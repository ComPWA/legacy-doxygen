<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>ComPWA: ParameterList Class Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body onload='searchBox.OnSelectItem(0);'>
<!-- Generated by Doxygen 1.7.4 -->
<script type="text/javascript"><!--
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
--></script>
<div id="top">
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">ComPWA</div>
   <div id="projectbrief">Common Partial-Wave-Analysis Framework</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="../../index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="../../namespaces.xhtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="../../annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="../../files.xhtml"><span>Files</span></a></li>
      <li id="searchli">
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="../../search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="../../search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="../../annotated.xhtml"><span>Class&#160;List</span></a></li>
      <li><a href="../../classes.xhtml"><span>Class&#160;Index</span></a></li>
      <li><a href="../../inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="../../functions.xhtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#pro-attribs">Protected Attributes</a> &#124;
<a href="#friends">Friends</a>  </div>
  <div class="headertitle">
<div class="title">ParameterList Class Reference</div>  </div>
</div>
<div class="contents">
<!-- doxytag: class="ParameterList" -->
<p>Internal container representing a parameter list.  
 <a href="../../d1/d9d/classParameterList.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../df/d9f/ParameterList_8hpp_source.xhtml">ParameterList.hpp</a>&gt;</code></p>
<div class="dynheader">
Collaboration diagram for ParameterList:</div>
<div class="dyncontent">
<div class="center"><iframe src="../../d5/ddb/classParameterList__coll__graph.svg" width="1330" height="1302" frameborder="0" scrolling="no"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
<center><span class="legend">[<a href="../../graph_legend.xhtml">legend</a>]</span></center></div>

<p><a href="../../d5/dad/classParameterList-members.xhtml">List of all members.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d9d/classParameterList.xhtml#a81cb788ca476171256c82f0416b584c6">ParameterList</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Standard constructor with empty parameter vector.  <a href="#a81cb788ca476171256c82f0416b584c6"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d9d/classParameterList.xhtml#ad5d4c58d007fad518ff783e6e9c45c1c">ParameterList</a> (const std::vector&lt; std::shared_ptr&lt; <a class="el" href="../../dd/d8d/classDoubleParameter.xhtml">DoubleParameter</a> &gt; &gt; &amp;inVec)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Standard constructor with a vector of <a class="el" href="../../dd/d8d/classDoubleParameter.xhtml" title="Implementations for internal parameter.">DoubleParameter</a>.  <a href="#ad5d4c58d007fad518ff783e6e9c45c1c"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d9d/classParameterList.xhtml#a2339c5a773db020c01d0d6b356004cce">ParameterList</a> (const std::vector&lt; std::shared_ptr&lt; <a class="el" href="../../dc/da0/classIntegerParameter.xhtml">IntegerParameter</a> &gt; &gt; &amp;inVec)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Standard constructor with a vector of <a class="el" href="../../dc/da0/classIntegerParameter.xhtml">IntegerParameter</a>.  <a href="#a2339c5a773db020c01d0d6b356004cce"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d9d/classParameterList.xhtml#a3edcee155f46cc562ea28c8c2ddb92ec">ParameterList</a> (const std::vector&lt; std::shared_ptr&lt; <a class="el" href="../../df/d1c/classBoolParameter.xhtml">BoolParameter</a> &gt; &gt; &amp;inVec)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Standard constructor with a vector of <a class="el" href="../../df/d1c/classBoolParameter.xhtml">BoolParameter</a>.  <a href="#a3edcee155f46cc562ea28c8c2ddb92ec"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d9d/classParameterList.xhtml#acc3d9e611409a0af5fa070597069dc75">ParameterList</a> (const std::vector&lt; std::shared_ptr&lt; <a class="el" href="../../dd/d8d/classDoubleParameter.xhtml">DoubleParameter</a> &gt; &gt; &amp;inD, const std::vector&lt; std::shared_ptr&lt; <a class="el" href="../../dc/da0/classIntegerParameter.xhtml">IntegerParameter</a> &gt; &gt; &amp;inI, const std::vector&lt; std::shared_ptr&lt; <a class="el" href="../../df/d1c/classBoolParameter.xhtml">BoolParameter</a> &gt; &gt; &amp;inB)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Standard constructor with a vector of bool, int and double PWAParameter.  <a href="#acc3d9e611409a0af5fa070597069dc75"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d9d/classParameterList.xhtml#a93bfa4961eab456b33f0009e7a5ab1bb">ParameterList</a> (const <a class="el" href="../../d1/d9d/classParameterList.xhtml">ParameterList</a> &amp;in)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy constructor using = operator.  <a href="#a93bfa4961eab456b33f0009e7a5ab1bb"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d9d/classParameterList.xhtml#ad3184442bd4735ef5afbb8f7cd7b8726">~ParameterList</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Empty Destructor.  <a href="#ad3184442bd4735ef5afbb8f7cd7b8726"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual std::shared_ptr<br class="typebreak"/>
&lt; <a class="el" href="../../d7/d6a/classAbsParameter.xhtml">AbsParameter</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d9d/classParameterList.xhtml#a132062ac381312aba2b5d96708b0686b">GetParameter</a> (const unsigned int i)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Getter for abstract parameter.  <a href="#a132062ac381312aba2b5d96708b0686b"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual std::shared_ptr<br class="typebreak"/>
&lt; <a class="el" href="../../d7/d6a/classAbsParameter.xhtml">AbsParameter</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d9d/classParameterList.xhtml#ae03baa5a0d9dca33996d2f3b8dd73711">GetParameter</a> (const std::string parname)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Getter for abstract parameter.  <a href="#ae03baa5a0d9dca33996d2f3b8dd73711"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d9d/classParameterList.xhtml#a3f27ba4154586dfb2d4c4c30d576219c">GetNParameter</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Getter for number of parameter.  <a href="#a3f27ba4154586dfb2d4c4c30d576219c"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d9d/classParameterList.xhtml#aa626799b903b16e7f6f29f918c626f9e">GetNDouble</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Getter for number of double parameter.  <a href="#aa626799b903b16e7f6f29f918c626f9e"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d9d/classParameterList.xhtml#a8f9f2b28594a1055ea5f8e920ebcbff7">GetNInteger</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Getter for number of integer parameter.  <a href="#a8f9f2b28594a1055ea5f8e920ebcbff7"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d9d/classParameterList.xhtml#a5c21a1598d5c0bf2f864f4bb10484313">GetNBool</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Getter for number of boolean parameter.  <a href="#a5c21a1598d5c0bf2f864f4bb10484313"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual std::shared_ptr<br class="typebreak"/>
&lt; <a class="el" href="../../dd/d8d/classDoubleParameter.xhtml">DoubleParameter</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d9d/classParameterList.xhtml#a60d49f17af8b63f4f153f9d420c3bcbb">GetDoubleParameter</a> (const unsigned int i)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Getter for floating point parameter.  <a href="#a60d49f17af8b63f4f153f9d420c3bcbb"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual std::shared_ptr<br class="typebreak"/>
&lt; <a class="el" href="../../dc/da0/classIntegerParameter.xhtml">IntegerParameter</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d9d/classParameterList.xhtml#a387e0fab0472050570f79035968f6f2b">GetIntegerParameter</a> (const unsigned int i)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Getter for integer parameter.  <a href="#a387e0fab0472050570f79035968f6f2b"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual std::shared_ptr<br class="typebreak"/>
&lt; <a class="el" href="../../df/d1c/classBoolParameter.xhtml">BoolParameter</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d9d/classParameterList.xhtml#af09490e1ac8a4bbddd4452ac1c60f658">GetBoolParameter</a> (const unsigned int i)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Getter for boolean parameter.  <a href="#af09490e1ac8a4bbddd4452ac1c60f658"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d9d/classParameterList.xhtml#a99c664620aa97bc31d1defcf7ab4c927">GetParameterValue</a> (const unsigned int i) const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Getter for parameter value.  <a href="#a99c664620aa97bc31d1defcf7ab4c927"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual std::shared_ptr<br class="typebreak"/>
&lt; <a class="el" href="../../dd/d8d/classDoubleParameter.xhtml">DoubleParameter</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d9d/classParameterList.xhtml#a0d7aa309727b08b467d93260cb0bb639">GetDoubleParameter</a> (const std::string parname)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Getter for floating point parameter.  <a href="#a0d7aa309727b08b467d93260cb0bb639"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual std::shared_ptr<br class="typebreak"/>
&lt; <a class="el" href="../../dc/da0/classIntegerParameter.xhtml">IntegerParameter</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d9d/classParameterList.xhtml#a2c8c2cdf950155fb786251adb483cda8">GetIntegerParameter</a> (const std::string parname)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Getter for integer parameter.  <a href="#a2c8c2cdf950155fb786251adb483cda8"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual std::shared_ptr<br class="typebreak"/>
&lt; <a class="el" href="../../df/d1c/classBoolParameter.xhtml">BoolParameter</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d9d/classParameterList.xhtml#aa973d632edd9f8560e76f7957da3a58b">GetBoolParameter</a> (const std::string parname)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Getter for boolean parameter.  <a href="#aa973d632edd9f8560e76f7957da3a58b"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d9d/classParameterList.xhtml#ac59904f89dfdc114aaaa6d3790ac9496">GetParameterValue</a> (const std::string parname) const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Getter for parameter value.  <a href="#ac59904f89dfdc114aaaa6d3790ac9496"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d9d/classParameterList.xhtml#ad88a26efd71e1d3d65924500b72ffd61">SetParameterValue</a> (const unsigned int i, const double inVal)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Setter for parameter value.  <a href="#ad88a26efd71e1d3d65924500b72ffd61"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d9d/classParameterList.xhtml#afefffdda9cf6dfd97a519baa0e1f6e5b">SetParameterValue</a> (const unsigned int i, const int inVal)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Setter for parameter value.  <a href="#afefffdda9cf6dfd97a519baa0e1f6e5b"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d9d/classParameterList.xhtml#a41192da59a56f939d1149a00cadfc6b3">SetParameterValue</a> (const unsigned int i, const bool inVal)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Setter for parameter value.  <a href="#a41192da59a56f939d1149a00cadfc6b3"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d9d/classParameterList.xhtml#a3574caceee6e2701f25327d35f7bce40">AddParameter</a> (std::shared_ptr&lt; <a class="el" href="../../d7/d6a/classAbsParameter.xhtml">AbsParameter</a> &gt; par)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Add parameter via abstract pointer.  <a href="#a3574caceee6e2701f25327d35f7bce40"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d9d/classParameterList.xhtml#ae99cc27c3e6ba571c6056b41fc98db8f">AddParameter</a> (std::shared_ptr&lt; <a class="el" href="../../dd/d8d/classDoubleParameter.xhtml">DoubleParameter</a> &gt; par)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Add floating point parameter.  <a href="#ae99cc27c3e6ba571c6056b41fc98db8f"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d9d/classParameterList.xhtml#a71f91e32a84787d5d12edaf9db2370ef">AddParameter</a> (std::shared_ptr&lt; <a class="el" href="../../dc/da0/classIntegerParameter.xhtml">IntegerParameter</a> &gt; par)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Add integer parameter.  <a href="#a71f91e32a84787d5d12edaf9db2370ef"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d9d/classParameterList.xhtml#a7475924528f166edfc9e37bb68e41bfb">AddParameter</a> (std::shared_ptr&lt; <a class="el" href="../../df/d1c/classBoolParameter.xhtml">BoolParameter</a> &gt; par)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Add boolean parameter.  <a href="#a7475924528f166edfc9e37bb68e41bfb"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d9d/classParameterList.xhtml#ac38ce5a2a0110de70fb2b264b8e7f6d2">RemoveDouble</a> (const unsigned int id)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Remove floating point parameter.  <a href="#ac38ce5a2a0110de70fb2b264b8e7f6d2"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d9d/classParameterList.xhtml#a5b904789262ece31024a488468cfa9e9">RemoveInteger</a> (const unsigned int id)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Remove integer parameter.  <a href="#a5b904789262ece31024a488468cfa9e9"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d9d/classParameterList.xhtml#ae19571aa39e0d2ab7332e287a5154bf1">RemoveBool</a> (const unsigned int id)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Remove boolean parameter.  <a href="#ae19571aa39e0d2ab7332e287a5154bf1"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d9d/classParameterList.xhtml#a7929098d7d8f501f7d0d9e28097031bb">RemoveDouble</a> (const std::string parName)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Remove floating point parameter.  <a href="#a7929098d7d8f501f7d0d9e28097031bb"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d9d/classParameterList.xhtml#ae74d0a7e3e7d8fa64fd5bef16e1cdd86">RemoveInteger</a> (const std::string parName)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Remove integer parameter.  <a href="#ae74d0a7e3e7d8fa64fd5bef16e1cdd86"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d9d/classParameterList.xhtml#a0d82a39df25f120e31eeef99856a1778">RemoveBool</a> (const std::string parName)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Remove boolean parameter.  <a href="#a0d82a39df25f120e31eeef99856a1778"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::string const &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d9d/classParameterList.xhtml#a8cbd202a3a670ce91d1bdf6e548c957b">to_str</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">A public function returning a string with parameter information.  <a href="#a8cbd202a3a670ce91d1bdf6e548c957b"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d9d/classParameterList.xhtml#ac93259ed7c23cfcc73e906664ba2159a">make_str</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">A protected function which creates an output string for printing.  <a href="#ac93259ed7c23cfcc73e906664ba2159a"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::map&lt; std::string, <br class="typebreak"/>
unsigned int &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d9d/classParameterList.xhtml#a96fbf1366e4ff34557a8ea073698b22a">mDoubleParID_</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Map of floating point parameter ids.  <a href="#a96fbf1366e4ff34557a8ea073698b22a"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::map&lt; std::string, <br class="typebreak"/>
unsigned int &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d9d/classParameterList.xhtml#a3165537f04f2be5549fe4d2271e4cf4b">mIntParID_</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Map of integer parameter ids.  <a href="#a3165537f04f2be5549fe4d2271e4cf4b"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::map&lt; std::string, <br class="typebreak"/>
unsigned int &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d9d/classParameterList.xhtml#a7aa6a9ff80e28bf0f62567765243e22a">mBoolParID_</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Map of boolean parameter ids.  <a href="#a7aa6a9ff80e28bf0f62567765243e22a"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::vector&lt; std::shared_ptr<br class="typebreak"/>
&lt; <a class="el" href="../../dd/d8d/classDoubleParameter.xhtml">DoubleParameter</a> &gt; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d9d/classParameterList.xhtml#ad6c4e63c2c71893dd9c732cb738be79d">vDoublePar_</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Vector of floating point parameters.  <a href="#ad6c4e63c2c71893dd9c732cb738be79d"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::vector&lt; std::shared_ptr<br class="typebreak"/>
&lt; <a class="el" href="../../dc/da0/classIntegerParameter.xhtml">IntegerParameter</a> &gt; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d9d/classParameterList.xhtml#a8773149b60a7f4fccd21183f59ea3f9f">vIntPar_</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Vector of integer parameters.  <a href="#a8773149b60a7f4fccd21183f59ea3f9f"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::vector&lt; std::shared_ptr<br class="typebreak"/>
&lt; <a class="el" href="../../df/d1c/classBoolParameter.xhtml">BoolParameter</a> &gt; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d9d/classParameterList.xhtml#a34c649412e92056ae41ac5c3e3e111e9">vBoolPar_</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Vector of boolean parameters.  <a href="#a34c649412e92056ae41ac5c3e3e111e9"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d9d/classParameterList.xhtml#a8091ca235596882df0e06a3fcd5345c6">out_</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Output string to print information.  <a href="#a8091ca235596882df0e06a3fcd5345c6"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="friends"></a>
Friends</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d9d/classParameterList.xhtml#ada2f035a1d035e7e93ca7f78cbd96f9a">operator&lt;&lt;</a> (std::ostream &amp;os, <a class="el" href="../../d1/d9d/classParameterList.xhtml">ParameterList</a> &amp;p)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">friend function to stream parameter information to output  <a href="#ada2f035a1d035e7e93ca7f78cbd96f9a"></a><br/></td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>Internal container representing a parameter list. </p>
</div><hr/><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a81cb788ca476171256c82f0416b584c6"></a><!-- doxytag: member="ParameterList::ParameterList" ref="a81cb788ca476171256c82f0416b584c6" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ParameterList::ParameterList </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Standard constructor with empty parameter vector. </p>
<p>Standard constructor without input. The vectors of parameters are empty. </p>

</div>
</div>
<a class="anchor" id="ad5d4c58d007fad518ff783e6e9c45c1c"></a><!-- doxytag: member="ParameterList::ParameterList" ref="ad5d4c58d007fad518ff783e6e9c45c1c" args="(const std::vector&lt; std::shared_ptr&lt; DoubleParameter &gt; &gt; &amp;inVec)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ParameterList::ParameterList </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; std::shared_ptr&lt; <a class="el" href="../../dd/d8d/classDoubleParameter.xhtml">DoubleParameter</a> &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>inVec</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Standard constructor with a vector of <a class="el" href="../../dd/d8d/classDoubleParameter.xhtml" title="Implementations for internal parameter.">DoubleParameter</a>. </p>
<p>Standard constructor with list of PWAParameter provided. The vector gets copied to the internal vector. To avoid copying, use the addParameter() functions and empty constructor PWAParameterList. Non-double parameter are empty </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">inVec</td><td>input vector of double parameters </td></tr>
  </table>
  </dd>
</dl>
<dl class="see"><dt><b>See also:</b></dt><dd>addParameter(PWAParameter&lt;double&gt;&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="a2339c5a773db020c01d0d6b356004cce"></a><!-- doxytag: member="ParameterList::ParameterList" ref="a2339c5a773db020c01d0d6b356004cce" args="(const std::vector&lt; std::shared_ptr&lt; IntegerParameter &gt; &gt; &amp;inVec)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ParameterList::ParameterList </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; std::shared_ptr&lt; <a class="el" href="../../dc/da0/classIntegerParameter.xhtml">IntegerParameter</a> &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>inVec</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Standard constructor with a vector of <a class="el" href="../../dc/da0/classIntegerParameter.xhtml">IntegerParameter</a>. </p>
<p>Standard constructor with list of PWAParameter provided. The vector gets copied to the internal vector. To avoid copying, use the addParameter() functions and empty constructor PWAParameterList. Non-integer parameter are empty </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">inVec</td><td>input vector of integer parameters </td></tr>
  </table>
  </dd>
</dl>
<dl class="see"><dt><b>See also:</b></dt><dd>addParameter(PWAParameter&lt;integer&gt;&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="a3edcee155f46cc562ea28c8c2ddb92ec"></a><!-- doxytag: member="ParameterList::ParameterList" ref="a3edcee155f46cc562ea28c8c2ddb92ec" args="(const std::vector&lt; std::shared_ptr&lt; BoolParameter &gt; &gt; &amp;inVec)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ParameterList::ParameterList </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; std::shared_ptr&lt; <a class="el" href="../../df/d1c/classBoolParameter.xhtml">BoolParameter</a> &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>inVec</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Standard constructor with a vector of <a class="el" href="../../df/d1c/classBoolParameter.xhtml">BoolParameter</a>. </p>
<p>Standard constructor with list of PWAParameter provided. The vector gets copied to the internal vector. To avoid copying, use the addParameter() functions and empty constructor PWAParameterList. Non-boolean parameter are empty </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">inVec</td><td>input vector of boolean parameters </td></tr>
  </table>
  </dd>
</dl>
<dl class="see"><dt><b>See also:</b></dt><dd>addParameter(PWAParameter&lt;bool&gt;&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="acc3d9e611409a0af5fa070597069dc75"></a><!-- doxytag: member="ParameterList::ParameterList" ref="acc3d9e611409a0af5fa070597069dc75" args="(const std::vector&lt; std::shared_ptr&lt; DoubleParameter &gt; &gt; &amp;inD, const std::vector&lt; std::shared_ptr&lt; IntegerParameter &gt; &gt; &amp;inI, const std::vector&lt; std::shared_ptr&lt; BoolParameter &gt; &gt; &amp;inB)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ParameterList::ParameterList </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; std::shared_ptr&lt; <a class="el" href="../../dd/d8d/classDoubleParameter.xhtml">DoubleParameter</a> &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>inD</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; std::shared_ptr&lt; <a class="el" href="../../dc/da0/classIntegerParameter.xhtml">IntegerParameter</a> &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>inI</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; std::shared_ptr&lt; <a class="el" href="../../df/d1c/classBoolParameter.xhtml">BoolParameter</a> &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>inB</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Standard constructor with a vector of bool, int and double PWAParameter. </p>
<p>Standard constructor with list of PWAParameter provided. The vectors get copied to the internal vectors. To avoid copying, use the addParameter() functions and empty constructor PWAParameterList. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">inD</td><td>input vector of floating point parameters </td></tr>
    <tr><td class="paramname">inI</td><td>input vector of integer parameters </td></tr>
    <tr><td class="paramname">inB</td><td>input vector of boolean parameters </td></tr>
  </table>
  </dd>
</dl>
<dl class="see"><dt><b>See also:</b></dt><dd>addParameter(PWAParameter&lt;double&gt;&amp;, PWAParameter&lt;int&gt;&amp;, PWAParameter&lt;bool&gt;&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="a93bfa4961eab456b33f0009e7a5ab1bb"></a><!-- doxytag: member="ParameterList::ParameterList" ref="a93bfa4961eab456b33f0009e7a5ab1bb" args="(const ParameterList &amp;in)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ParameterList::ParameterList </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d1/d9d/classParameterList.xhtml">ParameterList</a> &amp;&#160;</td>
          <td class="paramname"><em>in</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Copy constructor using = operator. </p>
<p>Simple copy constructor using the = operator. As this operator is not overloaded in this class, c++ will copy every member variable. As this is a container class, this should be fine. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">in</td><td>input PWAParameterList which variables will be copied </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ad3184442bd4735ef5afbb8f7cd7b8726"></a><!-- doxytag: member="ParameterList::~ParameterList" ref="ad3184442bd4735ef5afbb8f7cd7b8726" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ParameterList::~ParameterList </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Empty Destructor. </p>
<p>There is nothing to destroy :( </p>

</div>
</div>
<hr/><h2>Member Function Documentation</h2>
<a class="anchor" id="a3574caceee6e2701f25327d35f7bce40"></a><!-- doxytag: member="ParameterList::AddParameter" ref="a3574caceee6e2701f25327d35f7bce40" args="(std::shared_ptr&lt; AbsParameter &gt; par)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ParameterList::AddParameter </td>
          <td>(</td>
          <td class="paramtype">std::shared_ptr&lt; <a class="el" href="../../d7/d6a/classAbsParameter.xhtml">AbsParameter</a> &gt;&#160;</td>
          <td class="paramname"><em>par</em></td><td>)</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Add parameter via abstract pointer. </p>
<p>Adds a parameter with to be defined type to the list </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">par</td><td>input parameter </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ae99cc27c3e6ba571c6056b41fc98db8f"></a><!-- doxytag: member="ParameterList::AddParameter" ref="ae99cc27c3e6ba571c6056b41fc98db8f" args="(std::shared_ptr&lt; DoubleParameter &gt; par)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ParameterList::AddParameter </td>
          <td>(</td>
          <td class="paramtype">std::shared_ptr&lt; <a class="el" href="../../dd/d8d/classDoubleParameter.xhtml">DoubleParameter</a> &gt;&#160;</td>
          <td class="paramname"><em>par</em></td><td>)</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Add floating point parameter. </p>
<p>Adds a floating point parameter to the list </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">par</td><td>input parameter </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a71f91e32a84787d5d12edaf9db2370ef"></a><!-- doxytag: member="ParameterList::AddParameter" ref="a71f91e32a84787d5d12edaf9db2370ef" args="(std::shared_ptr&lt; IntegerParameter &gt; par)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ParameterList::AddParameter </td>
          <td>(</td>
          <td class="paramtype">std::shared_ptr&lt; <a class="el" href="../../dc/da0/classIntegerParameter.xhtml">IntegerParameter</a> &gt;&#160;</td>
          <td class="paramname"><em>par</em></td><td>)</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Add integer parameter. </p>
<p>Adds an integer parameter to the list </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">par</td><td>input parameter </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a7475924528f166edfc9e37bb68e41bfb"></a><!-- doxytag: member="ParameterList::AddParameter" ref="a7475924528f166edfc9e37bb68e41bfb" args="(std::shared_ptr&lt; BoolParameter &gt; par)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ParameterList::AddParameter </td>
          <td>(</td>
          <td class="paramtype">std::shared_ptr&lt; <a class="el" href="../../df/d1c/classBoolParameter.xhtml">BoolParameter</a> &gt;&#160;</td>
          <td class="paramname"><em>par</em></td><td>)</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Add boolean parameter. </p>
<p>Adds an boolean parameter to the list </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">par</td><td>input parameter </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="af09490e1ac8a4bbddd4452ac1c60f658"></a><!-- doxytag: member="ParameterList::GetBoolParameter" ref="af09490e1ac8a4bbddd4452ac1c60f658" args="(const unsigned int i)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::shared_ptr&lt; <a class="el" href="../../df/d1c/classBoolParameter.xhtml">BoolParameter</a> &gt; ParameterList::GetBoolParameter </td>
          <td>(</td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>i</em></td><td>)</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Getter for boolean parameter. </p>
<p>Getter for boolean parameter </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">i</td><td>input number of parameter to load </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>par output container for loaded parameter </dd></dl>

</div>
</div>
<a class="anchor" id="aa973d632edd9f8560e76f7957da3a58b"></a><!-- doxytag: member="ParameterList::GetBoolParameter" ref="aa973d632edd9f8560e76f7957da3a58b" args="(const std::string parname)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::shared_ptr&lt; <a class="el" href="../../df/d1c/classBoolParameter.xhtml">BoolParameter</a> &gt; ParameterList::GetBoolParameter </td>
          <td>(</td>
          <td class="paramtype">const std::string&#160;</td>
          <td class="paramname"><em>parname</em></td><td>)</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Getter for boolean parameter. </p>
<p>Getter for boolean parameter </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">parname</td><td>input name of parameter to load </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>par output container for loaded parameter </dd></dl>

</div>
</div>
<a class="anchor" id="a60d49f17af8b63f4f153f9d420c3bcbb"></a><!-- doxytag: member="ParameterList::GetDoubleParameter" ref="a60d49f17af8b63f4f153f9d420c3bcbb" args="(const unsigned int i)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::shared_ptr&lt; <a class="el" href="../../dd/d8d/classDoubleParameter.xhtml">DoubleParameter</a> &gt; ParameterList::GetDoubleParameter </td>
          <td>(</td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>i</em></td><td>)</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Getter for floating point parameter. </p>
<p>Getter for floating point parameter </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">i</td><td>input number of parameter to load </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>par output container for loaded parameter </dd></dl>

</div>
</div>
<a class="anchor" id="a0d7aa309727b08b467d93260cb0bb639"></a><!-- doxytag: member="ParameterList::GetDoubleParameter" ref="a0d7aa309727b08b467d93260cb0bb639" args="(const std::string parname)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::shared_ptr&lt; <a class="el" href="../../dd/d8d/classDoubleParameter.xhtml">DoubleParameter</a> &gt; ParameterList::GetDoubleParameter </td>
          <td>(</td>
          <td class="paramtype">const std::string&#160;</td>
          <td class="paramname"><em>parname</em></td><td>)</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Getter for floating point parameter. </p>
<p>Getter for floating point parameter </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">parname</td><td>input name of parameter to load </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>par output container for loaded parameter </dd></dl>

</div>
</div>
<a class="anchor" id="a387e0fab0472050570f79035968f6f2b"></a><!-- doxytag: member="ParameterList::GetIntegerParameter" ref="a387e0fab0472050570f79035968f6f2b" args="(const unsigned int i)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::shared_ptr&lt; <a class="el" href="../../dc/da0/classIntegerParameter.xhtml">IntegerParameter</a> &gt; ParameterList::GetIntegerParameter </td>
          <td>(</td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>i</em></td><td>)</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Getter for integer parameter. </p>
<p>Getter for integer parameter </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">i</td><td>input number of parameter to load </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>par output container for loaded parameter </dd></dl>

</div>
</div>
<a class="anchor" id="a2c8c2cdf950155fb786251adb483cda8"></a><!-- doxytag: member="ParameterList::GetIntegerParameter" ref="a2c8c2cdf950155fb786251adb483cda8" args="(const std::string parname)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::shared_ptr&lt; <a class="el" href="../../dc/da0/classIntegerParameter.xhtml">IntegerParameter</a> &gt; ParameterList::GetIntegerParameter </td>
          <td>(</td>
          <td class="paramtype">const std::string&#160;</td>
          <td class="paramname"><em>parname</em></td><td>)</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Getter for integer parameter. </p>
<p>Getter for integer parameter </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">i</td><td>input number of parameter to load </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>par output container for loaded parameter </dd></dl>

</div>
</div>
<a class="anchor" id="a5c21a1598d5c0bf2f864f4bb10484313"></a><!-- doxytag: member="ParameterList::GetNBool" ref="a5c21a1598d5c0bf2f864f4bb10484313" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const unsigned int ParameterList::GetNBool </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Getter for number of boolean parameter. </p>

</div>
</div>
<a class="anchor" id="aa626799b903b16e7f6f29f918c626f9e"></a><!-- doxytag: member="ParameterList::GetNDouble" ref="aa626799b903b16e7f6f29f918c626f9e" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const unsigned int ParameterList::GetNDouble </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Getter for number of double parameter. </p>

</div>
</div>
<a class="anchor" id="a8f9f2b28594a1055ea5f8e920ebcbff7"></a><!-- doxytag: member="ParameterList::GetNInteger" ref="a8f9f2b28594a1055ea5f8e920ebcbff7" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const unsigned int ParameterList::GetNInteger </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Getter for number of integer parameter. </p>

</div>
</div>
<a class="anchor" id="a3f27ba4154586dfb2d4c4c30d576219c"></a><!-- doxytag: member="ParameterList::GetNParameter" ref="a3f27ba4154586dfb2d4c4c30d576219c" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const unsigned int ParameterList::GetNParameter </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Getter for number of parameter. </p>

</div>
</div>
<a class="anchor" id="ae03baa5a0d9dca33996d2f3b8dd73711"></a><!-- doxytag: member="ParameterList::GetParameter" ref="ae03baa5a0d9dca33996d2f3b8dd73711" args="(const std::string parname)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::shared_ptr&lt; <a class="el" href="../../d7/d6a/classAbsParameter.xhtml">AbsParameter</a> &gt; ParameterList::GetParameter </td>
          <td>(</td>
          <td class="paramtype">const std::string&#160;</td>
          <td class="paramname"><em>parname</em></td><td>)</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Getter for abstract parameter. </p>
<p>Getter for abstract parameter pointer </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">parname</td><td>name of parameter to load </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>shared pointer to parameter </dd></dl>

</div>
</div>
<a class="anchor" id="a132062ac381312aba2b5d96708b0686b"></a><!-- doxytag: member="ParameterList::GetParameter" ref="a132062ac381312aba2b5d96708b0686b" args="(const unsigned int i)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::shared_ptr&lt; <a class="el" href="../../d7/d6a/classAbsParameter.xhtml">AbsParameter</a> &gt; ParameterList::GetParameter </td>
          <td>(</td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>i</em></td><td>)</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Getter for abstract parameter. </p>
<p>Getter for abstract parameter pointer </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">i</td><td>input number of parameter to load </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>shared pointer to parameter </dd></dl>

</div>
</div>
<a class="anchor" id="a99c664620aa97bc31d1defcf7ab4c927"></a><!-- doxytag: member="ParameterList::GetParameterValue" ref="a99c664620aa97bc31d1defcf7ab4c927" args="(const unsigned int i) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const double ParameterList::GetParameterValue </td>
          <td>(</td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>i</em></td><td>)</td>
          <td> const<code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Getter for parameter value. </p>
<p>Getter for parameter value </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">i</td><td>input number of parameter to load </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>par output container for loaded parameter </dd></dl>

</div>
</div>
<a class="anchor" id="ac59904f89dfdc114aaaa6d3790ac9496"></a><!-- doxytag: member="ParameterList::GetParameterValue" ref="ac59904f89dfdc114aaaa6d3790ac9496" args="(const std::string parname) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const double ParameterList::GetParameterValue </td>
          <td>(</td>
          <td class="paramtype">const std::string&#160;</td>
          <td class="paramname"><em>parname</em></td><td>)</td>
          <td> const<code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Getter for parameter value. </p>
<p>Getter for parameter value </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">parname</td><td>input name of parameter to load </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>par output container for loaded parameter </dd></dl>

</div>
</div>
<a class="anchor" id="ac93259ed7c23cfcc73e906664ba2159a"></a><!-- doxytag: member="ParameterList::make_str" ref="ac93259ed7c23cfcc73e906664ba2159a" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ParameterList::make_str </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>A protected function which creates an output string for printing. </p>
<p>This function uses all available information about the parameterlist to create a string which will be streamed via the stream operator &lt;&lt;. </p>
<dl class="see"><dt><b>See also:</b></dt><dd>operator&lt;&lt;, <a class="el" href="../../d1/d9d/classParameterList.xhtml#a8cbd202a3a670ce91d1bdf6e548c957b" title="A public function returning a string with parameter information.">to_str()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a0d82a39df25f120e31eeef99856a1778"></a><!-- doxytag: member="ParameterList::RemoveBool" ref="a0d82a39df25f120e31eeef99856a1778" args="(const std::string parName)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ParameterList::RemoveBool </td>
          <td>(</td>
          <td class="paramtype">const std::string&#160;</td>
          <td class="paramname"><em>parName</em></td><td>)</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Remove boolean parameter. </p>
<p>Remove an boolean parameter from the list </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">parName</td><td>parameter name </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ae19571aa39e0d2ab7332e287a5154bf1"></a><!-- doxytag: member="ParameterList::RemoveBool" ref="ae19571aa39e0d2ab7332e287a5154bf1" args="(const unsigned int id)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ParameterList::RemoveBool </td>
          <td>(</td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>id</em></td><td>)</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Remove boolean parameter. </p>
<p>Remove an boolean parameter from the list </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">par</td><td>input parameter </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ac38ce5a2a0110de70fb2b264b8e7f6d2"></a><!-- doxytag: member="ParameterList::RemoveDouble" ref="ac38ce5a2a0110de70fb2b264b8e7f6d2" args="(const unsigned int id)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ParameterList::RemoveDouble </td>
          <td>(</td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>id</em></td><td>)</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Remove floating point parameter. </p>
<p>Remove a floating point parameter from the list </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">par</td><td>input parameter </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a7929098d7d8f501f7d0d9e28097031bb"></a><!-- doxytag: member="ParameterList::RemoveDouble" ref="a7929098d7d8f501f7d0d9e28097031bb" args="(const std::string parName)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ParameterList::RemoveDouble </td>
          <td>(</td>
          <td class="paramtype">const std::string&#160;</td>
          <td class="paramname"><em>parName</em></td><td>)</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Remove floating point parameter. </p>
<p>Remove a floating point parameter from the list </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">parName</td><td>parameter name </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ae74d0a7e3e7d8fa64fd5bef16e1cdd86"></a><!-- doxytag: member="ParameterList::RemoveInteger" ref="ae74d0a7e3e7d8fa64fd5bef16e1cdd86" args="(const std::string parName)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ParameterList::RemoveInteger </td>
          <td>(</td>
          <td class="paramtype">const std::string&#160;</td>
          <td class="paramname"><em>parName</em></td><td>)</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Remove integer parameter. </p>
<p>Remove an integer parameter from the list </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">parName</td><td>parameter name </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a5b904789262ece31024a488468cfa9e9"></a><!-- doxytag: member="ParameterList::RemoveInteger" ref="a5b904789262ece31024a488468cfa9e9" args="(const unsigned int id)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ParameterList::RemoveInteger </td>
          <td>(</td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>id</em></td><td>)</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Remove integer parameter. </p>
<p>Remove an integer parameter from the list </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">par</td><td>input parameter </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a41192da59a56f939d1149a00cadfc6b3"></a><!-- doxytag: member="ParameterList::SetParameterValue" ref="a41192da59a56f939d1149a00cadfc6b3" args="(const unsigned int i, const bool inVal)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ParameterList::SetParameterValue </td>
          <td>(</td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>i</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>inVal</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Setter for parameter value. </p>
<p>Setter for parameter value </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">i</td><td>input number of parameter to load </td></tr>
    <tr><td class="paramname">inVal</td><td>input boolean value for parameter </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="afefffdda9cf6dfd97a519baa0e1f6e5b"></a><!-- doxytag: member="ParameterList::SetParameterValue" ref="afefffdda9cf6dfd97a519baa0e1f6e5b" args="(const unsigned int i, const int inVal)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ParameterList::SetParameterValue </td>
          <td>(</td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>i</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>inVal</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Setter for parameter value. </p>
<p>Setter for parameter value </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">i</td><td>input number of parameter to load </td></tr>
    <tr><td class="paramname">inVal</td><td>input integer value for parameter </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ad88a26efd71e1d3d65924500b72ffd61"></a><!-- doxytag: member="ParameterList::SetParameterValue" ref="ad88a26efd71e1d3d65924500b72ffd61" args="(const unsigned int i, const double inVal)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ParameterList::SetParameterValue </td>
          <td>(</td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>i</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>inVal</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Setter for parameter value. </p>
<p>Setter for parameter value </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">i</td><td>input number of parameter to load </td></tr>
    <tr><td class="paramname">inVal</td><td>input floating value for parameter </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a8cbd202a3a670ce91d1bdf6e548c957b"></a><!-- doxytag: member="ParameterList::to_str" ref="a8cbd202a3a670ce91d1bdf6e548c957b" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string const &amp; ParameterList::to_str </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>A public function returning a string with parameter information. </p>
<p>This function simply returns the member string out_, which contains all parameter information. The string gets created using the outstream of the PWAParameter class. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>string with parameter information </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd>operator&lt;&lt; </dd></dl>

</div>
</div>
<hr/><h2>Friends And Related Function Documentation</h2>
<a class="anchor" id="ada2f035a1d035e7e93ca7f78cbd96f9a"></a><!-- doxytag: member="ParameterList::operator&lt;&lt;" ref="ada2f035a1d035e7e93ca7f78cbd96f9a" args="(std::ostream &amp;os, ParameterList &amp;p)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::ostream&amp; operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d1/d9d/classParameterList.xhtml">ParameterList</a> &amp;&#160;</td>
          <td class="paramname"><em>p</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>friend function to stream parameter information to output </p>
<p>Declaring the stream-operator &lt;&lt; as friend allows to stream parameter information to the output as easily as a generic type. The definition of this class has to be outside the namespace of the class. </p>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="../../d1/d9d/classParameterList.xhtml#ac93259ed7c23cfcc73e906664ba2159a" title="A protected function which creates an output string for printing.">make_str()</a>, <a class="el" href="../../d1/d9d/classParameterList.xhtml#a8cbd202a3a670ce91d1bdf6e548c957b" title="A public function returning a string with parameter information.">to_str()</a> </dd></dl>

</div>
</div>
<hr/><h2>Member Data Documentation</h2>
<a class="anchor" id="a7aa6a9ff80e28bf0f62567765243e22a"></a><!-- doxytag: member="ParameterList::mBoolParID_" ref="a7aa6a9ff80e28bf0f62567765243e22a" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::map&lt;std::string,unsigned int&gt; <a class="el" href="../../d1/d9d/classParameterList.xhtml#a7aa6a9ff80e28bf0f62567765243e22a">ParameterList::mBoolParID_</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Map of boolean parameter ids. </p>

</div>
</div>
<a class="anchor" id="a96fbf1366e4ff34557a8ea073698b22a"></a><!-- doxytag: member="ParameterList::mDoubleParID_" ref="a96fbf1366e4ff34557a8ea073698b22a" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::map&lt;std::string,unsigned int&gt; <a class="el" href="../../d1/d9d/classParameterList.xhtml#a96fbf1366e4ff34557a8ea073698b22a">ParameterList::mDoubleParID_</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Map of floating point parameter ids. </p>

</div>
</div>
<a class="anchor" id="a3165537f04f2be5549fe4d2271e4cf4b"></a><!-- doxytag: member="ParameterList::mIntParID_" ref="a3165537f04f2be5549fe4d2271e4cf4b" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::map&lt;std::string,unsigned int&gt; <a class="el" href="../../d1/d9d/classParameterList.xhtml#a3165537f04f2be5549fe4d2271e4cf4b">ParameterList::mIntParID_</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Map of integer parameter ids. </p>

</div>
</div>
<a class="anchor" id="a8091ca235596882df0e06a3fcd5345c6"></a><!-- doxytag: member="ParameterList::out_" ref="a8091ca235596882df0e06a3fcd5345c6" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string <a class="el" href="../../d1/d9d/classParameterList.xhtml#a8091ca235596882df0e06a3fcd5345c6">ParameterList::out_</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Output string to print information. </p>

</div>
</div>
<a class="anchor" id="a34c649412e92056ae41ac5c3e3e111e9"></a><!-- doxytag: member="ParameterList::vBoolPar_" ref="a34c649412e92056ae41ac5c3e3e111e9" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;std::shared_ptr&lt;<a class="el" href="../../df/d1c/classBoolParameter.xhtml">BoolParameter</a>&gt; &gt; <a class="el" href="../../d1/d9d/classParameterList.xhtml#a34c649412e92056ae41ac5c3e3e111e9">ParameterList::vBoolPar_</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Vector of boolean parameters. </p>

</div>
</div>
<a class="anchor" id="ad6c4e63c2c71893dd9c732cb738be79d"></a><!-- doxytag: member="ParameterList::vDoublePar_" ref="ad6c4e63c2c71893dd9c732cb738be79d" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;std::shared_ptr&lt;<a class="el" href="../../dd/d8d/classDoubleParameter.xhtml">DoubleParameter</a>&gt; &gt; <a class="el" href="../../d1/d9d/classParameterList.xhtml#ad6c4e63c2c71893dd9c732cb738be79d">ParameterList::vDoublePar_</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Vector of floating point parameters. </p>

</div>
</div>
<a class="anchor" id="a8773149b60a7f4fccd21183f59ea3f9f"></a><!-- doxytag: member="ParameterList::vIntPar_" ref="a8773149b60a7f4fccd21183f59ea3f9f" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;std::shared_ptr&lt;<a class="el" href="../../dc/da0/classIntegerParameter.xhtml">IntegerParameter</a>&gt; &gt; <a class="el" href="../../d1/d9d/classParameterList.xhtml#a8773149b60a7f4fccd21183f59ea3f9f">ParameterList::vIntPar_</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Vector of integer parameters. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>Core/<a class="el" href="../../df/d9f/ParameterList_8hpp_source.xhtml">ParameterList.hpp</a></li>
<li>Core/<a class="el" href="../../d2/dd8/ParameterList_8cpp.xhtml">ParameterList.cpp</a></li>
</ul>
</div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<hr class="footer"/><address class="footer"><small>Generated on Thu Oct 24 2013 for ComPWA by&#160;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.7.4 </small></address>
</body>
</html>
