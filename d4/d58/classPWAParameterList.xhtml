<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>ComPWA: PWAParameterList Class Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body onload='searchBox.OnSelectItem(0);'>
<!-- Generated by Doxygen 1.7.4 -->
<script type="text/javascript"><!--
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
--></script>
<div id="top">
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">ComPWA</div>
   <div id="projectbrief">Common Partial-Wave-Analysis Framework</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="../../index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="../../namespaces.xhtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="../../annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="../../files.xhtml"><span>Files</span></a></li>
      <li id="searchli">
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="../../search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="../../search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="../../annotated.xhtml"><span>Class&#160;List</span></a></li>
      <li><a href="../../classes.xhtml"><span>Class&#160;Index</span></a></li>
      <li><a href="../../inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="../../functions.xhtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#pro-attribs">Protected Attributes</a> &#124;
<a href="#friends">Friends</a>  </div>
  <div class="headertitle">
<div class="title">PWAParameterList Class Reference</div>  </div>
</div>
<div class="contents">
<!-- doxytag: class="PWAParameterList" -->
<p>Internal container representing a parameter.  
 <a href="../../d4/d58/classPWAParameterList.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../da/d90/PWAParameterList_8hpp_source.xhtml">PWAParameterList.hpp</a>&gt;</code></p>
<div class="dynheader">
Collaboration diagram for PWAParameterList:</div>
<div class="dyncontent">
<div class="center"><iframe src="../../dd/df6/classPWAParameterList__coll__graph.svg" width="918" height="1918" frameborder="0" scrolling="no"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
<center><span class="legend">[<a href="../../graph_legend.xhtml">legend</a>]</span></center></div>

<p><a href="../../d4/d22/classPWAParameterList-members.xhtml">List of all members.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d58/classPWAParameterList.xhtml#ab3a62d1f4f6aa8ba15ee385aaa4b4225">PWAParameterList</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Standard constructor with empty parameter vector.  <a href="#ab3a62d1f4f6aa8ba15ee385aaa4b4225"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d58/classPWAParameterList.xhtml#a7d02e1dba3865175a8321b433521e508">PWAParameterList</a> (const std::vector&lt; <a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml">PWAGenericPar</a>&lt; double &gt; &gt; &amp;inVec)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Standard constructor with a vector of double <a class="el" href="../../d2/d41/classPWAParameter.xhtml" title="Base class for internal parameter.">PWAParameter</a>.  <a href="#a7d02e1dba3865175a8321b433521e508"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d58/classPWAParameterList.xhtml#a69409f5f2a78a39e4b72e9538d9b0e32">PWAParameterList</a> (const std::vector&lt; <a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml">PWAGenericPar</a>&lt; int &gt; &gt; &amp;inVec)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Standard constructor with a vector of integer <a class="el" href="../../d2/d41/classPWAParameter.xhtml" title="Base class for internal parameter.">PWAParameter</a>.  <a href="#a69409f5f2a78a39e4b72e9538d9b0e32"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d58/classPWAParameterList.xhtml#a4a93c0ab41670dca883e13b94e90c010">PWAParameterList</a> (const std::vector&lt; <a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml">PWAGenericPar</a>&lt; bool &gt; &gt; &amp;inVec)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Standard constructor with a vector of boolean <a class="el" href="../../d2/d41/classPWAParameter.xhtml" title="Base class for internal parameter.">PWAParameter</a>.  <a href="#a4a93c0ab41670dca883e13b94e90c010"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d58/classPWAParameterList.xhtml#a117842300a7b17d8ed7519cd555e0cd0">PWAParameterList</a> (const std::vector&lt; <a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml">PWAGenericPar</a>&lt; double &gt; &gt; &amp;inD, const std::vector&lt; <a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml">PWAGenericPar</a>&lt; int &gt; &gt; &amp;inI, const std::vector&lt; <a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml">PWAGenericPar</a>&lt; bool &gt; &gt; &amp;inB)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Standard constructor with a vector of bool, int and double <a class="el" href="../../d2/d41/classPWAParameter.xhtml" title="Base class for internal parameter.">PWAParameter</a>.  <a href="#a117842300a7b17d8ed7519cd555e0cd0"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d58/classPWAParameterList.xhtml#afb6760141da53331e814a9d7013645ad">PWAParameterList</a> (const <a class="el" href="../../d4/d58/classPWAParameterList.xhtml">PWAParameterList</a> &amp;in)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy constructor using = operator.  <a href="#afb6760141da53331e814a9d7013645ad"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d58/classPWAParameterList.xhtml#ad4498f4b9aaa2606ade9b3271ab85340">~PWAParameterList</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Empty Destructor.  <a href="#ad4498f4b9aaa2606ade9b3271ab85340"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d58/classPWAParameterList.xhtml#af16e81a2abd6199d101bb13358e2ed50">GetParameter</a> (const unsigned int i, <a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml">PWAGenericPar</a>&lt; double &gt; &amp;par) const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Getter for floating point parameter.  <a href="#af16e81a2abd6199d101bb13358e2ed50"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d58/classPWAParameterList.xhtml#a0bfde178a6d5066d4616e90307e2cc2f">GetParameter</a> (const unsigned int i, <a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml">PWAGenericPar</a>&lt; int &gt; &amp;par) const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Getter for integer parameter.  <a href="#a0bfde178a6d5066d4616e90307e2cc2f"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d58/classPWAParameterList.xhtml#a1d6d6a540f73e856f6c02961abb99041">GetParameter</a> (const unsigned int i, <a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml">PWAGenericPar</a>&lt; bool &gt; &amp;par) const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Getter for boolean parameter.  <a href="#a1d6d6a540f73e856f6c02961abb99041"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d58/classPWAParameterList.xhtml#ad7af81d0ed483c12f481445214f3f885">AddParameter</a> (<a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml">PWAGenericPar</a>&lt; double &gt; &amp;par)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Add floating point parameter.  <a href="#ad7af81d0ed483c12f481445214f3f885"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d58/classPWAParameterList.xhtml#ab1e3318d5b042bdc46d7b87b9e78c9ed">AddParameter</a> (<a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml">PWAGenericPar</a>&lt; int &gt; &amp;par)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Add integer parameter.  <a href="#ab1e3318d5b042bdc46d7b87b9e78c9ed"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d58/classPWAParameterList.xhtml#a830a0c9883aec2c12546d5b5d77d22b0">AddParameter</a> (<a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml">PWAGenericPar</a>&lt; bool &gt; &amp;par)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Add boolean parameter.  <a href="#a830a0c9883aec2c12546d5b5d77d22b0"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::string const &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d58/classPWAParameterList.xhtml#acb69770f80594638c2969c0e3d57b7f9">to_str</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">A public function returning a string with parameter information.  <a href="#acb69770f80594638c2969c0e3d57b7f9"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d58/classPWAParameterList.xhtml#a59228aa2a85b0d66a6e95aea228ecd48">make_str</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">A protected function which creates an output string for printing.  <a href="#a59228aa2a85b0d66a6e95aea228ecd48"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml">PWAGenericPar</a><br class="typebreak"/>
&lt; double &gt; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d58/classPWAParameterList.xhtml#a569403d952eeeff33728074204426170">vDoublePar_</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Vector of floating point parameters.  <a href="#a569403d952eeeff33728074204426170"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml">PWAGenericPar</a>&lt; int &gt; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d58/classPWAParameterList.xhtml#a8affd4f27f32310307771b0b332d09b9">vIntPar_</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Vector of integer parameters.  <a href="#a8affd4f27f32310307771b0b332d09b9"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml">PWAGenericPar</a><br class="typebreak"/>
&lt; bool &gt; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d58/classPWAParameterList.xhtml#ad7977f99056b91415ad9003c0915fabb">vBoolPar_</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Vector of boolean parameters.  <a href="#ad7977f99056b91415ad9003c0915fabb"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d58/classPWAParameterList.xhtml#a8a9844e65d376400f792c92525787a2f">out_</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Output string to print information.  <a href="#a8a9844e65d376400f792c92525787a2f"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="friends"></a>
Friends</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d58/classPWAParameterList.xhtml#a19aa6351ed72d10dffca7845878b07d2">operator&lt;&lt;</a> (std::ostream &amp;os, const <a class="el" href="../../d4/d58/classPWAParameterList.xhtml">PWAParameterList</a> &amp;p)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">friend function to stream parameter information to output  <a href="#a19aa6351ed72d10dffca7845878b07d2"></a><br/></td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>Internal container representing a parameter. </p>
</div><hr/><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="ab3a62d1f4f6aa8ba15ee385aaa4b4225"></a><!-- doxytag: member="PWAParameterList::PWAParameterList" ref="ab3a62d1f4f6aa8ba15ee385aaa4b4225" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">PWAParameterList::PWAParameterList </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Standard constructor with empty parameter vector. </p>
<p>Standard constructor without input. The vectors of parameters are empty. </p>

</div>
</div>
<a class="anchor" id="a7d02e1dba3865175a8321b433521e508"></a><!-- doxytag: member="PWAParameterList::PWAParameterList" ref="a7d02e1dba3865175a8321b433521e508" args="(const std::vector&lt; PWAGenericPar&lt; double &gt; &gt; &amp;inVec)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">PWAParameterList::PWAParameterList </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml">PWAGenericPar</a>&lt; double &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>inVec</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Standard constructor with a vector of double <a class="el" href="../../d2/d41/classPWAParameter.xhtml" title="Base class for internal parameter.">PWAParameter</a>. </p>
<p>Standard constructor with list of <a class="el" href="../../d2/d41/classPWAParameter.xhtml" title="Base class for internal parameter.">PWAParameter</a> provided. The vector gets copied to the internal vector. To avoid copying, use the addParameter() functions and empty constructor <a class="el" href="../../d4/d58/classPWAParameterList.xhtml" title="Internal container representing a parameter.">PWAParameterList</a>. Non-double parameter are empty </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">inVec</td><td>input vector of double parameters </td></tr>
  </table>
  </dd>
</dl>
<dl class="see"><dt><b>See also:</b></dt><dd>addParameter(PWAParameter&lt;double&gt;&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="a69409f5f2a78a39e4b72e9538d9b0e32"></a><!-- doxytag: member="PWAParameterList::PWAParameterList" ref="a69409f5f2a78a39e4b72e9538d9b0e32" args="(const std::vector&lt; PWAGenericPar&lt; int &gt; &gt; &amp;inVec)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">PWAParameterList::PWAParameterList </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml">PWAGenericPar</a>&lt; int &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>inVec</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Standard constructor with a vector of integer <a class="el" href="../../d2/d41/classPWAParameter.xhtml" title="Base class for internal parameter.">PWAParameter</a>. </p>
<p>Standard constructor with list of <a class="el" href="../../d2/d41/classPWAParameter.xhtml" title="Base class for internal parameter.">PWAParameter</a> provided. The vector gets copied to the internal vector. To avoid copying, use the addParameter() functions and empty constructor <a class="el" href="../../d4/d58/classPWAParameterList.xhtml" title="Internal container representing a parameter.">PWAParameterList</a>. Non-integer parameter are empty </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">inVec</td><td>input vector of integer parameters </td></tr>
  </table>
  </dd>
</dl>
<dl class="see"><dt><b>See also:</b></dt><dd>addParameter(PWAParameter&lt;integer&gt;&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="a4a93c0ab41670dca883e13b94e90c010"></a><!-- doxytag: member="PWAParameterList::PWAParameterList" ref="a4a93c0ab41670dca883e13b94e90c010" args="(const std::vector&lt; PWAGenericPar&lt; bool &gt; &gt; &amp;inVec)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">PWAParameterList::PWAParameterList </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml">PWAGenericPar</a>&lt; bool &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>inVec</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Standard constructor with a vector of boolean <a class="el" href="../../d2/d41/classPWAParameter.xhtml" title="Base class for internal parameter.">PWAParameter</a>. </p>
<p>Standard constructor with list of <a class="el" href="../../d2/d41/classPWAParameter.xhtml" title="Base class for internal parameter.">PWAParameter</a> provided. The vector gets copied to the internal vector. To avoid copying, use the addParameter() functions and empty constructor <a class="el" href="../../d4/d58/classPWAParameterList.xhtml" title="Internal container representing a parameter.">PWAParameterList</a>. Non-boolean parameter are empty </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">inVec</td><td>input vector of boolean parameters </td></tr>
  </table>
  </dd>
</dl>
<dl class="see"><dt><b>See also:</b></dt><dd>addParameter(PWAParameter&lt;bool&gt;&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="a117842300a7b17d8ed7519cd555e0cd0"></a><!-- doxytag: member="PWAParameterList::PWAParameterList" ref="a117842300a7b17d8ed7519cd555e0cd0" args="(const std::vector&lt; PWAGenericPar&lt; double &gt; &gt; &amp;inD, const std::vector&lt; PWAGenericPar&lt; int &gt; &gt; &amp;inI, const std::vector&lt; PWAGenericPar&lt; bool &gt; &gt; &amp;inB)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">PWAParameterList::PWAParameterList </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml">PWAGenericPar</a>&lt; double &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>inD</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml">PWAGenericPar</a>&lt; int &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>inI</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml">PWAGenericPar</a>&lt; bool &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>inB</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Standard constructor with a vector of bool, int and double <a class="el" href="../../d2/d41/classPWAParameter.xhtml" title="Base class for internal parameter.">PWAParameter</a>. </p>
<p>Standard constructor with list of <a class="el" href="../../d2/d41/classPWAParameter.xhtml" title="Base class for internal parameter.">PWAParameter</a> provided. The vectors get copied to the internal vectors. To avoid copying, use the addParameter() functions and empty constructor <a class="el" href="../../d4/d58/classPWAParameterList.xhtml" title="Internal container representing a parameter.">PWAParameterList</a>. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">inD</td><td>input vector of floating point parameters </td></tr>
    <tr><td class="paramname">inI</td><td>input vector of integer parameters </td></tr>
    <tr><td class="paramname">inB</td><td>input vector of boolean parameters </td></tr>
  </table>
  </dd>
</dl>
<dl class="see"><dt><b>See also:</b></dt><dd>addParameter(PWAParameter&lt;double&gt;&amp;, PWAParameter&lt;int&gt;&amp;, PWAParameter&lt;bool&gt;&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="afb6760141da53331e814a9d7013645ad"></a><!-- doxytag: member="PWAParameterList::PWAParameterList" ref="afb6760141da53331e814a9d7013645ad" args="(const PWAParameterList &amp;in)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">PWAParameterList::PWAParameterList </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d4/d58/classPWAParameterList.xhtml">PWAParameterList</a> &amp;&#160;</td>
          <td class="paramname"><em>in</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Copy constructor using = operator. </p>
<p>Simple copy constructor using the = operator. As this operator is not overloaded in this class, c++ will copy every member variable. As this is a container class, this should be fine. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">in</td><td>input <a class="el" href="../../d4/d58/classPWAParameterList.xhtml" title="Internal container representing a parameter.">PWAParameterList</a> which variables will be copied </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ad4498f4b9aaa2606ade9b3271ab85340"></a><!-- doxytag: member="PWAParameterList::~PWAParameterList" ref="ad4498f4b9aaa2606ade9b3271ab85340" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">PWAParameterList::~PWAParameterList </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Empty Destructor. </p>
<p>There is nothing to destroy :( </p>

</div>
</div>
<hr/><h2>Member Function Documentation</h2>
<a class="anchor" id="ad7af81d0ed483c12f481445214f3f885"></a><!-- doxytag: member="PWAParameterList::AddParameter" ref="ad7af81d0ed483c12f481445214f3f885" args="(PWAGenericPar&lt; double &gt; &amp;par)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void PWAParameterList::AddParameter </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml">PWAGenericPar</a>&lt; double &gt; &amp;&#160;</td>
          <td class="paramname"><em>par</em></td><td>)</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Add floating point parameter. </p>
<p>Adds a floating point parameter to the list </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">par</td><td>input parameter </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ab1e3318d5b042bdc46d7b87b9e78c9ed"></a><!-- doxytag: member="PWAParameterList::AddParameter" ref="ab1e3318d5b042bdc46d7b87b9e78c9ed" args="(PWAGenericPar&lt; int &gt; &amp;par)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void PWAParameterList::AddParameter </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml">PWAGenericPar</a>&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>par</em></td><td>)</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Add integer parameter. </p>
<p>Adds an integer parameter to the list </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">par</td><td>input parameter </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a830a0c9883aec2c12546d5b5d77d22b0"></a><!-- doxytag: member="PWAParameterList::AddParameter" ref="a830a0c9883aec2c12546d5b5d77d22b0" args="(PWAGenericPar&lt; bool &gt; &amp;par)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void PWAParameterList::AddParameter </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml">PWAGenericPar</a>&lt; bool &gt; &amp;&#160;</td>
          <td class="paramname"><em>par</em></td><td>)</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Add boolean parameter. </p>
<p>Adds an boolean parameter to the list </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">par</td><td>input parameter </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a0bfde178a6d5066d4616e90307e2cc2f"></a><!-- doxytag: member="PWAParameterList::GetParameter" ref="a0bfde178a6d5066d4616e90307e2cc2f" args="(const unsigned int i, PWAGenericPar&lt; int &gt; &amp;par) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const int PWAParameterList::GetParameter </td>
          <td>(</td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>i</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml">PWAGenericPar</a>&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>par</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const<code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Getter for integer parameter. </p>
<p>Getter for integer parameter </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">i</td><td>input number of parameter to load </td></tr>
    <tr><td class="paramname">par</td><td>output container for loaded parameter </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="af16e81a2abd6199d101bb13358e2ed50"></a><!-- doxytag: member="PWAParameterList::GetParameter" ref="af16e81a2abd6199d101bb13358e2ed50" args="(const unsigned int i, PWAGenericPar&lt; double &gt; &amp;par) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const int PWAParameterList::GetParameter </td>
          <td>(</td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>i</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml">PWAGenericPar</a>&lt; double &gt; &amp;&#160;</td>
          <td class="paramname"><em>par</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const<code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Getter for floating point parameter. </p>
<p>Getter for floating point parameter </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">i</td><td>input number of parameter to load </td></tr>
    <tr><td class="paramname">par</td><td>output container for loaded parameter </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a1d6d6a540f73e856f6c02961abb99041"></a><!-- doxytag: member="PWAParameterList::GetParameter" ref="a1d6d6a540f73e856f6c02961abb99041" args="(const unsigned int i, PWAGenericPar&lt; bool &gt; &amp;par) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const int PWAParameterList::GetParameter </td>
          <td>(</td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>i</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml">PWAGenericPar</a>&lt; bool &gt; &amp;&#160;</td>
          <td class="paramname"><em>par</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const<code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Getter for boolean parameter. </p>
<p>Getter for boolean parameter </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">i</td><td>input number of parameter to load </td></tr>
    <tr><td class="paramname">par</td><td>output container for loaded parameter </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a59228aa2a85b0d66a6e95aea228ecd48"></a><!-- doxytag: member="PWAParameterList::make_str" ref="a59228aa2a85b0d66a6e95aea228ecd48" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void PWAParameterList::make_str </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>A protected function which creates an output string for printing. </p>
<p>This function uses all available information about the parameterlist to create a string which will be streamed via the stream operator &lt;&lt;. </p>
<dl class="see"><dt><b>See also:</b></dt><dd>operator&lt;&lt;, <a class="el" href="../../d4/d58/classPWAParameterList.xhtml#acb69770f80594638c2969c0e3d57b7f9" title="A public function returning a string with parameter information.">to_str()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="acb69770f80594638c2969c0e3d57b7f9"></a><!-- doxytag: member="PWAParameterList::to_str" ref="acb69770f80594638c2969c0e3d57b7f9" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string const &amp; PWAParameterList::to_str </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>A public function returning a string with parameter information. </p>
<p>This function simply returns the member string out_, which contains all parameter information. The string gets created using the outstream of the <a class="el" href="../../d2/d41/classPWAParameter.xhtml" title="Base class for internal parameter.">PWAParameter</a> class. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>string with parameter information </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd>operator&lt;&lt; </dd></dl>

</div>
</div>
<hr/><h2>Friends And Related Function Documentation</h2>
<a class="anchor" id="a19aa6351ed72d10dffca7845878b07d2"></a><!-- doxytag: member="PWAParameterList::operator&lt;&lt;" ref="a19aa6351ed72d10dffca7845878b07d2" args="(std::ostream &amp;os, const PWAParameterList &amp;p)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::ostream&amp; operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../d4/d58/classPWAParameterList.xhtml">PWAParameterList</a> &amp;&#160;</td>
          <td class="paramname"><em>p</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>friend function to stream parameter information to output </p>
<p>Declaring the stream-operator &lt;&lt; as friend allows to stream parameter information to the output as easily as a generic type. The definition of this class has to be outside the namespace of the class. </p>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="../../d4/d58/classPWAParameterList.xhtml#a59228aa2a85b0d66a6e95aea228ecd48" title="A protected function which creates an output string for printing.">make_str()</a>, <a class="el" href="../../d4/d58/classPWAParameterList.xhtml#acb69770f80594638c2969c0e3d57b7f9" title="A public function returning a string with parameter information.">to_str()</a> </dd></dl>

</div>
</div>
<hr/><h2>Member Data Documentation</h2>
<a class="anchor" id="a8a9844e65d376400f792c92525787a2f"></a><!-- doxytag: member="PWAParameterList::out_" ref="a8a9844e65d376400f792c92525787a2f" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string <a class="el" href="../../d4/d58/classPWAParameterList.xhtml#a8a9844e65d376400f792c92525787a2f">PWAParameterList::out_</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Output string to print information. </p>

</div>
</div>
<a class="anchor" id="ad7977f99056b91415ad9003c0915fabb"></a><!-- doxytag: member="PWAParameterList::vBoolPar_" ref="ad7977f99056b91415ad9003c0915fabb" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml">PWAGenericPar</a>&lt;bool&gt; &gt; <a class="el" href="../../d4/d58/classPWAParameterList.xhtml#ad7977f99056b91415ad9003c0915fabb">PWAParameterList::vBoolPar_</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Vector of boolean parameters. </p>

</div>
</div>
<a class="anchor" id="a569403d952eeeff33728074204426170"></a><!-- doxytag: member="PWAParameterList::vDoublePar_" ref="a569403d952eeeff33728074204426170" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml">PWAGenericPar</a>&lt;double&gt; &gt; <a class="el" href="../../d4/d58/classPWAParameterList.xhtml#a569403d952eeeff33728074204426170">PWAParameterList::vDoublePar_</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Vector of floating point parameters. </p>

</div>
</div>
<a class="anchor" id="a8affd4f27f32310307771b0b332d09b9"></a><!-- doxytag: member="PWAParameterList::vIntPar_" ref="a8affd4f27f32310307771b0b332d09b9" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml">PWAGenericPar</a>&lt;int&gt; &gt; <a class="el" href="../../d4/d58/classPWAParameterList.xhtml#a8affd4f27f32310307771b0b332d09b9">PWAParameterList::vIntPar_</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Vector of integer parameters. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>Core/<a class="el" href="../../da/d90/PWAParameterList_8hpp_source.xhtml">PWAParameterList.hpp</a></li>
<li>Core/<a class="el" href="../../de/d61/PWAParameterList_8cpp.xhtml">PWAParameterList.cpp</a></li>
</ul>
</div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<hr class="footer"/><address class="footer"><small>Generated on Thu Mar 21 2013 for ComPWA by&#160;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.7.4 </small></address>
</body>
</html>
