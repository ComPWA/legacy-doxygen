<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>ComPWA: PWAGenericPar&lt; T &gt; Class Template Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body onload='searchBox.OnSelectItem(0);'>
<!-- Generated by Doxygen 1.7.4 -->
<script type="text/javascript"><!--
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
--></script>
<div id="top">
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">ComPWA</div>
   <div id="projectbrief">Common Partial-Wave-Analysis Framework</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="../../index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="../../namespaces.xhtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="../../annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="../../files.xhtml"><span>Files</span></a></li>
      <li id="searchli">
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="../../search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="../../search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="../../annotated.xhtml"><span>Class&#160;List</span></a></li>
      <li><a href="../../classes.xhtml"><span>Class&#160;Index</span></a></li>
      <li><a href="../../inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="../../functions.xhtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#pro-attribs">Protected Attributes</a> &#124;
<a href="#friends">Friends</a>  </div>
  <div class="headertitle">
<div class="title">PWAGenericPar&lt; T &gt; Class Template Reference</div>  </div>
</div>
<div class="contents">
<!-- doxytag: class="PWAGenericPar" --><!-- doxytag: inherits="PWAParameter" -->
<p>Internal container representing a generic parameter.  
 <a href="../../d4/dc2/classPWAGenericPar.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../d0/d2f/PWAGenericPar_8hpp_source.xhtml">PWAGenericPar.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for PWAGenericPar&lt; T &gt;:</div>
<div class="dyncontent">
<div class="center"><iframe src="../../dd/d9e/classPWAGenericPar__inherit__graph.svg" width="160" height="1027" frameborder="0" scrolling="no"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
<center><span class="legend">[<a href="../../graph_legend.xhtml">legend</a>]</span></center></div>
<div class="dynheader">
Collaboration diagram for PWAGenericPar&lt; T &gt;:</div>
<div class="dyncontent">
<div class="center"><iframe src="../../d6/d25/classPWAGenericPar__coll__graph.svg" width="252" height="1384" frameborder="0" scrolling="no"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
<center><span class="legend">[<a href="../../graph_legend.xhtml">legend</a>]</span></center></div>

<p><a href="../../d1/d62/classPWAGenericPar-members.xhtml">List of all members.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml#aedfef8bce802a80801bd0385388cc1f8">PWAGenericPar</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Standard constructor without information.  <a href="#aedfef8bce802a80801bd0385388cc1f8"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml#a2e73d8edddb43df08112569756164853">PWAGenericPar</a> (const T value)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Standard constructor with a value.  <a href="#a2e73d8edddb43df08112569756164853"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml#a29744d48e8cb440120dec5122b40fe34">PWAGenericPar</a> (const T value, const T error)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Standard constructor with value and error.  <a href="#a29744d48e8cb440120dec5122b40fe34"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml#a54dfeff973328da222e780c3204658c2">PWAGenericPar</a> (const T value, const T min, const T max)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Standard constructor with value and bounds.  <a href="#a54dfeff973328da222e780c3204658c2"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml#ac216349f6b0e8692cf699c341e658ac0">PWAGenericPar</a> (const T value, const T min, const T max, const T error)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Standard constructor with value, bounds and error.  <a href="#ac216349f6b0e8692cf699c341e658ac0"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml#af9975dbee1ca4090a9b9dccea11b4cb5">PWAGenericPar</a> (const <a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml">PWAGenericPar</a>&lt; T &gt; &amp;in)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy constructor using = operator.  <a href="#af9975dbee1ca4090a9b9dccea11b4cb5"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml#a5e19d2b8ffbf13a1c14ef9bda96b4eeb">~PWAGenericPar</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Empty Destructor.  <a href="#a5e19d2b8ffbf13a1c14ef9bda96b4eeb"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml#a73a574779c34dddf5ee7c3cf2b12ed95">GetValue</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Getter for value of parameter cast to double.  <a href="#a73a574779c34dddf5ee7c3cf2b12ed95"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml#aae82f8b9e6c95753c68e812bcab9c3ce">GetMinValue</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Getter for lower bound of parameter cast to double.  <a href="#aae82f8b9e6c95753c68e812bcab9c3ce"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml#abf7d1bd64645e637e5db9fe2846c89b9">GetMaxValue</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Getter for upper bound of parameter cast to double.  <a href="#abf7d1bd64645e637e5db9fe2846c89b9"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml#a310723e4ca56b8e6cbca08aa2788ddbb">GetError</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Getter for error of parameter cast to double.  <a href="#a310723e4ca56b8e6cbca08aa2788ddbb"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const T&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml#a1a443659e00190691de8d6772990d9ff">GetTValue</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Getter for value of parameter.  <a href="#a1a443659e00190691de8d6772990d9ff"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const T&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml#a6ae800ae31ce80f2a02c33a4978ee033">GetTMinValue</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Getter for lower bound of parameter.  <a href="#a6ae800ae31ce80f2a02c33a4978ee033"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const T&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml#a4d9b4ce2a5c3e692cb30660ea0bae5a1">GetTMaxValue</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Getter for upper bound of parameter.  <a href="#a4d9b4ce2a5c3e692cb30660ea0bae5a1"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const T&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml#ad7f1e1271390f0e66a8ebd422f500e56">GetTError</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Getter for error of parameter.  <a href="#ad7f1e1271390f0e66a8ebd422f500e56"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml#a0e67e29ddc70af3afecbd144313ee9b5">SetValue</a> (const double inVal)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Setter for value of parameter cast from double.  <a href="#a0e67e29ddc70af3afecbd144313ee9b5"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml#a739e05e724c995fa1e9434ab64558bb3">SetError</a> (const double inErr)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Setter for error of parameter cast from double.  <a href="#a739e05e724c995fa1e9434ab64558bb3"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml#a24e0d1a6f38538c7414cc356a91a1255">SetMinMax</a> (const double inMin, const double inMax)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Setter for bounds of parameter cast to double.  <a href="#a24e0d1a6f38538c7414cc356a91a1255"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml#a524f053b06a1e0b9fe98ff5b3ac711a8">SetTValue</a> (const T value)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Setter for value of parameter.  <a href="#a524f053b06a1e0b9fe98ff5b3ac711a8"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml#aec1ba5d3ae23d2627dbda829a184a558">SetTError</a> (const T error)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Setter for error of parameter.  <a href="#aec1ba5d3ae23d2627dbda829a184a558"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml#af49ff13dcec6edde04686355cd9566f2">SetTMinMax</a> (const T min, const T max)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Setter for bounds.  <a href="#af49ff13dcec6edde04686355cd9566f2"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml#a75c1d834c9314d65692d5bfc21cb8332">SetTMinValue</a> (const T min)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Setter for lower bound.  <a href="#a75c1d834c9314d65692d5bfc21cb8332"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml#a9b83b47d41821a08cf24ed0c46a9c4bf">SetTMaxValue</a> (const T max)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Setter for upper bound.  <a href="#a9b83b47d41821a08cf24ed0c46a9c4bf"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml#a32c44cebf508b1c23809fec5868bb56d">type</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">A public function returning a string naming its type.  <a href="#a32c44cebf508b1c23809fec5868bb56d"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d2/d41/classPWAParameter.xhtml#a6784e991bb00f1d5a115425e07bb1ee5">HasBounds</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if parameter has bounds.  <a href="#a6784e991bb00f1d5a115425e07bb1ee5"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d2/d41/classPWAParameter.xhtml#af73b9467e4b3988b6826881c33181079">UseBounds</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if bounds should be used.  <a href="#af73b9467e4b3988b6826881c33181079"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d2/d41/classPWAParameter.xhtml#a3683c4f449434c3767f384ed8fb697c1">UseBounds</a> (const bool use)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Set if bounds should be used.  <a href="#a3683c4f449434c3767f384ed8fb697c1"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d2/d41/classPWAParameter.xhtml#afae06859d2deeb750b9bd65e7c38f6fb">HasError</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if parameter has an error.  <a href="#afae06859d2deeb750b9bd65e7c38f6fb"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::string const &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d2/d41/classPWAParameter.xhtml#aa4c036889d0dc5939408ab21fdf6042d">to_str</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">A public function returning a string with parameter information.  <a href="#aa4c036889d0dc5939408ab21fdf6042d"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml#a18ac45c2dfe9a743f1f9bfd0f3a5fc41">check_bounds</a> (const T min, const T max)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">A protected function to check if bounds are valid.  <a href="#a18ac45c2dfe9a743f1f9bfd0f3a5fc41"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml#a79c5e4e98597e0d14ea054c3bba417f3">make_str</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">A protected function which creates an output string for printing.  <a href="#a79c5e4e98597e0d14ea054c3bba417f3"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">T&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml#a444481f45bf8c1b7196a56eb7333f764">val_</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">T&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml#a8f2b73b3b1f62b2fb980b2cd95479c83">min_</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">T&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml#ae548db033127a5a6c03981b82f2ac237">max_</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">T&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml#a0c3fe7d543731ba43fb490d6b8abcd04">err_</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Containers of parameter information.  <a href="#a0c3fe7d543731ba43fb490d6b8abcd04"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d2/d41/classPWAParameter.xhtml#ab058ea9b02d2637c56563f4cb350dba2">out_</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Output string to print information.  <a href="#ab058ea9b02d2637c56563f4cb350dba2"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d2/d41/classPWAParameter.xhtml#ae6fad21d8b2849c95871505d740e76bb">bounds_</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Are valid bounds defined for this parameter?  <a href="#ae6fad21d8b2849c95871505d740e76bb"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d2/d41/classPWAParameter.xhtml#a4da02e4d7c2f368b9a6d90725813f392">error_</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Is an error defined for this parameter?  <a href="#a4da02e4d7c2f368b9a6d90725813f392"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d2/d41/classPWAParameter.xhtml#a126bf4dac98f6579fdad974d2724459c">usebounds_</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Do you want to restrict your parameter?  <a href="#a126bf4dac98f6579fdad974d2724459c"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="friends"></a>
Friends</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d2/d41/classPWAParameter.xhtml#ad65da6fd195ae0b6ecd3335b1c4c5a03">operator&lt;&lt;</a> (std::ostream &amp;os, const <a class="el" href="../../d2/d41/classPWAParameter.xhtml">PWAParameter</a> &amp;p)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">friend function to stream parameter information to output  <a href="#ad65da6fd195ae0b6ecd3335b1c4c5a03"></a><br/></td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><h3>template&lt;class T&gt;<br/>
class PWAGenericPar&lt; T &gt;</h3>

<p>Internal container representing a generic parameter. </p>
</div><hr/><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="aedfef8bce802a80801bd0385388cc1f8"></a><!-- doxytag: member="PWAGenericPar::PWAGenericPar" ref="aedfef8bce802a80801bd0385388cc1f8" args="()" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml">PWAGenericPar</a>&lt; T &gt;::<a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml">PWAGenericPar</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Standard constructor without information. </p>
<p>Standard constructor with no information provided. Creates parameter with value 0 but without bounds or an error. </p>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml#a79c5e4e98597e0d14ea054c3bba417f3" title="A protected function which creates an output string for printing.">make_str()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a2e73d8edddb43df08112569756164853"></a><!-- doxytag: member="PWAGenericPar::PWAGenericPar" ref="a2e73d8edddb43df08112569756164853" args="(const T value)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml">PWAGenericPar</a>&lt; T &gt;::<a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml">PWAGenericPar</a> </td>
          <td>(</td>
          <td class="paramtype">const T&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Standard constructor with a value. </p>
<p>Standard constructor with just a value provided. Creates parameter with given value but without bounds or an error. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>input value of the parameter </td></tr>
  </table>
  </dd>
</dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml#a79c5e4e98597e0d14ea054c3bba417f3" title="A protected function which creates an output string for printing.">make_str()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a29744d48e8cb440120dec5122b40fe34"></a><!-- doxytag: member="PWAGenericPar::PWAGenericPar" ref="a29744d48e8cb440120dec5122b40fe34" args="(const T value, const T error)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml">PWAGenericPar</a>&lt; T &gt;::<a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml">PWAGenericPar</a> </td>
          <td>(</td>
          <td class="paramtype">const T&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T&#160;</td>
          <td class="paramname"><em>error</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Standard constructor with value and error. </p>
<p>Standard constructor with value and error provided. Creates parameter with given value and error but without bounds. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>input value of the parameter </td></tr>
    <tr><td class="paramname">error</td><td>input error of the parameter </td></tr>
  </table>
  </dd>
</dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml#a79c5e4e98597e0d14ea054c3bba417f3" title="A protected function which creates an output string for printing.">make_str()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a54dfeff973328da222e780c3204658c2"></a><!-- doxytag: member="PWAGenericPar::PWAGenericPar" ref="a54dfeff973328da222e780c3204658c2" args="(const T value, const T min, const T max)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml">PWAGenericPar</a>&lt; T &gt;::<a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml">PWAGenericPar</a> </td>
          <td>(</td>
          <td class="paramtype">const T&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T&#160;</td>
          <td class="paramname"><em>min</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T&#160;</td>
          <td class="paramname"><em>max</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Standard constructor with value and bounds. </p>
<p>Standard constructor with value and bounds provided. Creates parameter with given value and bounds but without error. If a check for valid bounds fails, just the value is used. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>input value of the parameter </td></tr>
    <tr><td class="paramname">min</td><td>input lower bound </td></tr>
    <tr><td class="paramname">max</td><td>input upper bound </td></tr>
  </table>
  </dd>
</dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml#a79c5e4e98597e0d14ea054c3bba417f3" title="A protected function which creates an output string for printing.">make_str()</a>, <a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml#a18ac45c2dfe9a743f1f9bfd0f3a5fc41" title="A protected function to check if bounds are valid.">check_bounds()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ac216349f6b0e8692cf699c341e658ac0"></a><!-- doxytag: member="PWAGenericPar::PWAGenericPar" ref="ac216349f6b0e8692cf699c341e658ac0" args="(const T value, const T min, const T max, const T error)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml">PWAGenericPar</a>&lt; T &gt;::<a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml">PWAGenericPar</a> </td>
          <td>(</td>
          <td class="paramtype">const T&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T&#160;</td>
          <td class="paramname"><em>min</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T&#160;</td>
          <td class="paramname"><em>max</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T&#160;</td>
          <td class="paramname"><em>error</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Standard constructor with value, bounds and error. </p>
<p>Standard constructor with value, bounds and error provided. Creates parameter with the given information. If a check for valid bounds fails, just value and error are used. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>input value of the parameter </td></tr>
    <tr><td class="paramname">min</td><td>input lower bound </td></tr>
    <tr><td class="paramname">max</td><td>input upper bound </td></tr>
    <tr><td class="paramname">error</td><td>input error of the parameter </td></tr>
  </table>
  </dd>
</dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml#a79c5e4e98597e0d14ea054c3bba417f3" title="A protected function which creates an output string for printing.">make_str()</a>, <a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml#a18ac45c2dfe9a743f1f9bfd0f3a5fc41" title="A protected function to check if bounds are valid.">check_bounds()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="af9975dbee1ca4090a9b9dccea11b4cb5"></a><!-- doxytag: member="PWAGenericPar::PWAGenericPar" ref="af9975dbee1ca4090a9b9dccea11b4cb5" args="(const PWAGenericPar&lt; T &gt; &amp;in)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml">PWAGenericPar</a>&lt; T &gt;::<a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml">PWAGenericPar</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml">PWAGenericPar</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>in</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Copy constructor using = operator. </p>
<p>Simple copy constructor using the = operator. As this operator is not overloaded in this class, c++ will copy every member variable. As this is a container class, this should be fine. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">in</td><td>input <a class="el" href="../../d2/d41/classPWAParameter.xhtml" title="Base class for internal parameter.">PWAParameter</a> which variables will be copied </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a5e19d2b8ffbf13a1c14ef9bda96b4eeb"></a><!-- doxytag: member="PWAGenericPar::~PWAGenericPar" ref="a5e19d2b8ffbf13a1c14ef9bda96b4eeb" args="()" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml">PWAGenericPar</a>&lt; T &gt;::~<a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml">PWAGenericPar</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Empty Destructor. </p>
<p>There is nothing to destroy :( </p>

</div>
</div>
<hr/><h2>Member Function Documentation</h2>
<a class="anchor" id="a18ac45c2dfe9a743f1f9bfd0f3a5fc41"></a><!-- doxytag: member="PWAGenericPar::check_bounds" ref="a18ac45c2dfe9a743f1f9bfd0f3a5fc41" args="(const T min, const T max)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml">PWAGenericPar</a>&lt; T &gt;::check_bounds </td>
          <td>(</td>
          <td class="paramtype">const T&#160;</td>
          <td class="paramname"><em>min</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T&#160;</td>
          <td class="paramname"><em>max</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline, protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>A protected function to check if bounds are valid. </p>
<p>This function checks if the bounds of the parameter are valid: Upper bound should be larger then lower bound and the value should be inside of the bounds. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">max</td><td>upper bound to check </td></tr>
    <tr><td class="paramname">min</td><td>lower bound to check </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>bool if bounds are valid </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd>PWAParameter(const T value, const T min, const T max) </dd>
<dd>
PWAParameter(const T value, const T min, const T max, const T error) </dd>
<dd>
<a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml#a24e0d1a6f38538c7414cc356a91a1255" title="Setter for bounds of parameter cast to double.">SetMinMax()</a>, SetMinValue(), SetMaxValue() </dd></dl>

</div>
</div>
<a class="anchor" id="a310723e4ca56b8e6cbca08aa2788ddbb"></a><!-- doxytag: member="PWAGenericPar::GetError" ref="a310723e4ca56b8e6cbca08aa2788ddbb" args="() const " -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">virtual const double <a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml">PWAGenericPar</a>&lt; T &gt;::GetError </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Getter for error of parameter cast to double. </p>

<p>Implements <a class="el" href="../../d2/d41/classPWAParameter.xhtml#a1471bc8a2a8a4e0e4c5db16b28f844a2">PWAParameter</a>.</p>

</div>
</div>
<a class="anchor" id="abf7d1bd64645e637e5db9fe2846c89b9"></a><!-- doxytag: member="PWAGenericPar::GetMaxValue" ref="abf7d1bd64645e637e5db9fe2846c89b9" args="() const " -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">virtual const double <a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml">PWAGenericPar</a>&lt; T &gt;::GetMaxValue </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Getter for upper bound of parameter cast to double. </p>

<p>Implements <a class="el" href="../../d2/d41/classPWAParameter.xhtml#a926950f56b7bd0ebd246cae77ea1500b">PWAParameter</a>.</p>

</div>
</div>
<a class="anchor" id="aae82f8b9e6c95753c68e812bcab9c3ce"></a><!-- doxytag: member="PWAGenericPar::GetMinValue" ref="aae82f8b9e6c95753c68e812bcab9c3ce" args="() const " -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">virtual const double <a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml">PWAGenericPar</a>&lt; T &gt;::GetMinValue </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Getter for lower bound of parameter cast to double. </p>

<p>Implements <a class="el" href="../../d2/d41/classPWAParameter.xhtml#aef2524862d2ad22ad061cd64a14a6467">PWAParameter</a>.</p>

</div>
</div>
<a class="anchor" id="ad7f1e1271390f0e66a8ebd422f500e56"></a><!-- doxytag: member="PWAGenericPar::GetTError" ref="ad7f1e1271390f0e66a8ebd422f500e56" args="() const " -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">virtual const T <a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml">PWAGenericPar</a>&lt; T &gt;::GetTError </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Getter for error of parameter. </p>

</div>
</div>
<a class="anchor" id="a4d9b4ce2a5c3e692cb30660ea0bae5a1"></a><!-- doxytag: member="PWAGenericPar::GetTMaxValue" ref="a4d9b4ce2a5c3e692cb30660ea0bae5a1" args="() const " -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">virtual const T <a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml">PWAGenericPar</a>&lt; T &gt;::GetTMaxValue </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Getter for upper bound of parameter. </p>

</div>
</div>
<a class="anchor" id="a6ae800ae31ce80f2a02c33a4978ee033"></a><!-- doxytag: member="PWAGenericPar::GetTMinValue" ref="a6ae800ae31ce80f2a02c33a4978ee033" args="() const " -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">virtual const T <a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml">PWAGenericPar</a>&lt; T &gt;::GetTMinValue </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Getter for lower bound of parameter. </p>

</div>
</div>
<a class="anchor" id="a1a443659e00190691de8d6772990d9ff"></a><!-- doxytag: member="PWAGenericPar::GetTValue" ref="a1a443659e00190691de8d6772990d9ff" args="() const " -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">virtual const T <a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml">PWAGenericPar</a>&lt; T &gt;::GetTValue </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Getter for value of parameter. </p>

</div>
</div>
<a class="anchor" id="a73a574779c34dddf5ee7c3cf2b12ed95"></a><!-- doxytag: member="PWAGenericPar::GetValue" ref="a73a574779c34dddf5ee7c3cf2b12ed95" args="() const " -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">virtual const double <a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml">PWAGenericPar</a>&lt; T &gt;::GetValue </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Getter for value of parameter cast to double. </p>

<p>Implements <a class="el" href="../../d2/d41/classPWAParameter.xhtml#a54294f7ba94bdfc507da479519fcee42">PWAParameter</a>.</p>

</div>
</div>
<a class="anchor" id="a6784e991bb00f1d5a115425e07bb1ee5"></a><!-- doxytag: member="PWAGenericPar::HasBounds" ref="a6784e991bb00f1d5a115425e07bb1ee5" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const bool PWAParameter::HasBounds </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline, virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Check if parameter has bounds. </p>

</div>
</div>
<a class="anchor" id="afae06859d2deeb750b9bd65e7c38f6fb"></a><!-- doxytag: member="PWAGenericPar::HasError" ref="afae06859d2deeb750b9bd65e7c38f6fb" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const bool PWAParameter::HasError </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline, virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Check if parameter has an error. </p>

</div>
</div>
<a class="anchor" id="a79c5e4e98597e0d14ea054c3bba417f3"></a><!-- doxytag: member="PWAGenericPar::make_str" ref="a79c5e4e98597e0d14ea054c3bba417f3" args="()" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">virtual void <a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml">PWAGenericPar</a>&lt; T &gt;::make_str </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline, protected, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>A protected function which creates an output string for printing. </p>
<p>This function uses all available information about the parameter to create a string which will be streamed via the stream operator &lt;&lt;. </p>
<dl class="see"><dt><b>See also:</b></dt><dd>operator&lt;&lt;, <a class="el" href="../../d2/d41/classPWAParameter.xhtml#aa4c036889d0dc5939408ab21fdf6042d" title="A public function returning a string with parameter information.">to_str()</a>, <a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml#a32c44cebf508b1c23809fec5868bb56d" title="A public function returning a string naming its type.">type()</a> </dd></dl>

<p>Implements <a class="el" href="../../d2/d41/classPWAParameter.xhtml#adf13cd0d1afeebdfe0571ecc9043f38e">PWAParameter</a>.</p>

</div>
</div>
<a class="anchor" id="a739e05e724c995fa1e9434ab64558bb3"></a><!-- doxytag: member="PWAGenericPar::SetError" ref="a739e05e724c995fa1e9434ab64558bb3" args="(const double inErr)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">virtual void <a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml">PWAGenericPar</a>&lt; T &gt;::SetError </td>
          <td>(</td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>inErr</em></td><td>)</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Setter for error of parameter cast from double. </p>

<p>Implements <a class="el" href="../../d2/d41/classPWAParameter.xhtml#a368ea723c3860700c79c38368615d238">PWAParameter</a>.</p>

</div>
</div>
<a class="anchor" id="a24e0d1a6f38538c7414cc356a91a1255"></a><!-- doxytag: member="PWAGenericPar::SetMinMax" ref="a24e0d1a6f38538c7414cc356a91a1255" args="(const double inMin, const double inMax)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">virtual const bool <a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml">PWAGenericPar</a>&lt; T &gt;::SetMinMax </td>
          <td>(</td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>inMin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>inMax</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Setter for bounds of parameter cast to double. </p>

<p>Implements <a class="el" href="../../d2/d41/classPWAParameter.xhtml#a9289a1faa43eb67959e11d5e50084b2c">PWAParameter</a>.</p>

</div>
</div>
<a class="anchor" id="aec1ba5d3ae23d2627dbda829a184a558"></a><!-- doxytag: member="PWAGenericPar::SetTError" ref="aec1ba5d3ae23d2627dbda829a184a558" args="(const T error)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">virtual void <a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml">PWAGenericPar</a>&lt; T &gt;::SetTError </td>
          <td>(</td>
          <td class="paramtype">const T&#160;</td>
          <td class="paramname"><em>error</em></td><td>)</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Setter for error of parameter. </p>

</div>
</div>
<a class="anchor" id="a9b83b47d41821a08cf24ed0c46a9c4bf"></a><!-- doxytag: member="PWAGenericPar::SetTMaxValue" ref="a9b83b47d41821a08cf24ed0c46a9c4bf" args="(const T max)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">virtual const bool <a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml">PWAGenericPar</a>&lt; T &gt;::SetTMaxValue </td>
          <td>(</td>
          <td class="paramtype">const T&#160;</td>
          <td class="paramname"><em>max</em></td><td>)</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Setter for upper bound. </p>
<p>Setter for upper bound of the parameter. If a check for valid bounds fails, it returns false and nothing changes. This means if the upper bound is invalid the parameter maintains its old bounds if it had some. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">max</td><td>input upper bound </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>bool if successful (re)set upper bound </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml#a18ac45c2dfe9a743f1f9bfd0f3a5fc41" title="A protected function to check if bounds are valid.">check_bounds()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="af49ff13dcec6edde04686355cd9566f2"></a><!-- doxytag: member="PWAGenericPar::SetTMinMax" ref="af49ff13dcec6edde04686355cd9566f2" args="(const T min, const T max)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">virtual const bool <a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml">PWAGenericPar</a>&lt; T &gt;::SetTMinMax </td>
          <td>(</td>
          <td class="paramtype">const T&#160;</td>
          <td class="paramname"><em>min</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T&#160;</td>
          <td class="paramname"><em>max</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Setter for bounds. </p>
<p>Setter for bounds of the parameter. If a check for valid bounds fails, it returns false and nothing changes. This means if the bounds are invalid the parameter maintains its old bounds if it had some. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">min</td><td>input lower bound </td></tr>
    <tr><td class="paramname">max</td><td>input upper bound </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>bool if successful (re)set the bounds </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml#a18ac45c2dfe9a743f1f9bfd0f3a5fc41" title="A protected function to check if bounds are valid.">check_bounds()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a75c1d834c9314d65692d5bfc21cb8332"></a><!-- doxytag: member="PWAGenericPar::SetTMinValue" ref="a75c1d834c9314d65692d5bfc21cb8332" args="(const T min)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">virtual const bool <a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml">PWAGenericPar</a>&lt; T &gt;::SetTMinValue </td>
          <td>(</td>
          <td class="paramtype">const T&#160;</td>
          <td class="paramname"><em>min</em></td><td>)</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Setter for lower bound. </p>
<p>Setter for lower bound of the parameter. If a check for valid bounds fails, it returns false and nothing changes. This means if the lower bound is invalid the parameter maintains its old bounds if it had some. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">min</td><td>input lower bound </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>bool if successful (re)set lower bound </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml#a18ac45c2dfe9a743f1f9bfd0f3a5fc41" title="A protected function to check if bounds are valid.">check_bounds()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a524f053b06a1e0b9fe98ff5b3ac711a8"></a><!-- doxytag: member="PWAGenericPar::SetTValue" ref="a524f053b06a1e0b9fe98ff5b3ac711a8" args="(const T value)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">virtual void <a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml">PWAGenericPar</a>&lt; T &gt;::SetTValue </td>
          <td>(</td>
          <td class="paramtype">const T&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Setter for value of parameter. </p>

</div>
</div>
<a class="anchor" id="a0e67e29ddc70af3afecbd144313ee9b5"></a><!-- doxytag: member="PWAGenericPar::SetValue" ref="a0e67e29ddc70af3afecbd144313ee9b5" args="(const double inVal)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">virtual void <a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml">PWAGenericPar</a>&lt; T &gt;::SetValue </td>
          <td>(</td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>inVal</em></td><td>)</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Setter for value of parameter cast from double. </p>

<p>Implements <a class="el" href="../../d2/d41/classPWAParameter.xhtml#ae71a61a9bf127e87b59a97f864ffced4">PWAParameter</a>.</p>

</div>
</div>
<a class="anchor" id="aa4c036889d0dc5939408ab21fdf6042d"></a><!-- doxytag: member="PWAGenericPar::to_str" ref="aa4c036889d0dc5939408ab21fdf6042d" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string const&amp; PWAParameter::to_str </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>A public function returning a string with parameter information. </p>
<p>This function simply returns the member string out_, which contains all parameter information. The string gets rebuild with every change of the parameter. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>string with parameter information </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd>operator&lt;&lt;, <a class="el" href="../../d2/d41/classPWAParameter.xhtml#adf13cd0d1afeebdfe0571ecc9043f38e" title="A protected function which creates an output string for printing.">make_str()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a32c44cebf508b1c23809fec5868bb56d"></a><!-- doxytag: member="PWAGenericPar::type" ref="a32c44cebf508b1c23809fec5868bb56d" args="()" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">virtual const std::string <a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml">PWAGenericPar</a>&lt; T &gt;::type </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>A public function returning a string naming its type. </p>
<p>This function is used to get the type of the implementation of this general parameter interface. Beware: using typid gives compiler-dependent output! </p>
<dl class="see"><dt><b>See also:</b></dt><dd>operator&lt;&lt;, <a class="el" href="../../d2/d41/classPWAParameter.xhtml#aa4c036889d0dc5939408ab21fdf6042d" title="A public function returning a string with parameter information.">to_str()</a>, <a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml#a79c5e4e98597e0d14ea054c3bba417f3" title="A protected function which creates an output string for printing.">make_str()</a> </dd></dl>

<p>Implements <a class="el" href="../../d2/d41/classPWAParameter.xhtml#ada7ecf50de381382dbc500c99888ba75">PWAParameter</a>.</p>

</div>
</div>
<a class="anchor" id="af73b9467e4b3988b6826881c33181079"></a><!-- doxytag: member="PWAGenericPar::UseBounds" ref="af73b9467e4b3988b6826881c33181079" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const bool PWAParameter::UseBounds </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline, virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Check if bounds should be used. </p>

</div>
</div>
<a class="anchor" id="a3683c4f449434c3767f384ed8fb697c1"></a><!-- doxytag: member="PWAGenericPar::UseBounds" ref="a3683c4f449434c3767f384ed8fb697c1" args="(const bool use)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const void PWAParameter::UseBounds </td>
          <td>(</td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>use</em></td><td>)</td>
          <td><code> [inline, virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set if bounds should be used. </p>

</div>
</div>
<hr/><h2>Friends And Related Function Documentation</h2>
<a class="anchor" id="ad65da6fd195ae0b6ecd3335b1c4c5a03"></a><!-- doxytag: member="PWAGenericPar::operator&lt;&lt;" ref="ad65da6fd195ae0b6ecd3335b1c4c5a03" args="(std::ostream &amp;os, const PWAParameter &amp;p)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::ostream&amp; operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../d2/d41/classPWAParameter.xhtml">PWAParameter</a> &amp;&#160;</td>
          <td class="paramname"><em>p</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>friend function to stream parameter information to output </p>
<p>Declaring the stream-operator &lt;&lt; as friend allows to stream parameter information to the output as easily as a generic type. The definition of this class has to be outside the namespace of the class. </p>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="../../d2/d41/classPWAParameter.xhtml#adf13cd0d1afeebdfe0571ecc9043f38e" title="A protected function which creates an output string for printing.">make_str()</a>, <a class="el" href="../../d2/d41/classPWAParameter.xhtml#aa4c036889d0dc5939408ab21fdf6042d" title="A public function returning a string with parameter information.">to_str()</a> </dd></dl>

</div>
</div>
<hr/><h2>Member Data Documentation</h2>
<a class="anchor" id="ae6fad21d8b2849c95871505d740e76bb"></a><!-- doxytag: member="PWAGenericPar::bounds_" ref="ae6fad21d8b2849c95871505d740e76bb" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="../../d2/d41/classPWAParameter.xhtml#ae6fad21d8b2849c95871505d740e76bb">PWAParameter::bounds_</a><code> [protected, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Are valid bounds defined for this parameter? </p>

</div>
</div>
<a class="anchor" id="a0c3fe7d543731ba43fb490d6b8abcd04"></a><!-- doxytag: member="PWAGenericPar::err_" ref="a0c3fe7d543731ba43fb490d6b8abcd04" args="" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T <a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml">PWAGenericPar</a>&lt; T &gt;::<a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml#a0c3fe7d543731ba43fb490d6b8abcd04">err_</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Containers of parameter information. </p>

</div>
</div>
<a class="anchor" id="a4da02e4d7c2f368b9a6d90725813f392"></a><!-- doxytag: member="PWAGenericPar::error_" ref="a4da02e4d7c2f368b9a6d90725813f392" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="../../d2/d41/classPWAParameter.xhtml#a4da02e4d7c2f368b9a6d90725813f392">PWAParameter::error_</a><code> [protected, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Is an error defined for this parameter? </p>

</div>
</div>
<a class="anchor" id="ae548db033127a5a6c03981b82f2ac237"></a><!-- doxytag: member="PWAGenericPar::max_" ref="ae548db033127a5a6c03981b82f2ac237" args="" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T <a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml">PWAGenericPar</a>&lt; T &gt;::<a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml#ae548db033127a5a6c03981b82f2ac237">max_</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a8f2b73b3b1f62b2fb980b2cd95479c83"></a><!-- doxytag: member="PWAGenericPar::min_" ref="a8f2b73b3b1f62b2fb980b2cd95479c83" args="" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T <a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml">PWAGenericPar</a>&lt; T &gt;::<a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml#a8f2b73b3b1f62b2fb980b2cd95479c83">min_</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="ab058ea9b02d2637c56563f4cb350dba2"></a><!-- doxytag: member="PWAGenericPar::out_" ref="ab058ea9b02d2637c56563f4cb350dba2" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string <a class="el" href="../../d2/d41/classPWAParameter.xhtml#ab058ea9b02d2637c56563f4cb350dba2">PWAParameter::out_</a><code> [protected, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Output string to print information. </p>

</div>
</div>
<a class="anchor" id="a126bf4dac98f6579fdad974d2724459c"></a><!-- doxytag: member="PWAGenericPar::usebounds_" ref="a126bf4dac98f6579fdad974d2724459c" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="../../d2/d41/classPWAParameter.xhtml#a126bf4dac98f6579fdad974d2724459c">PWAParameter::usebounds_</a><code> [protected, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Do you want to restrict your parameter? </p>

</div>
</div>
<a class="anchor" id="a444481f45bf8c1b7196a56eb7333f764"></a><!-- doxytag: member="PWAGenericPar::val_" ref="a444481f45bf8c1b7196a56eb7333f764" args="" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T <a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml">PWAGenericPar</a>&lt; T &gt;::<a class="el" href="../../d4/dc2/classPWAGenericPar.xhtml#a444481f45bf8c1b7196a56eb7333f764">val_</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>Core/<a class="el" href="../../d0/d2f/PWAGenericPar_8hpp_source.xhtml">PWAGenericPar.hpp</a></li>
</ul>
</div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<hr class="footer"/><address class="footer"><small>Generated on Thu Mar 21 2013 for ComPWA by&#160;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.7.4 </small></address>
</body>
</html>
