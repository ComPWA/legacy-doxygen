<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>ComPWA: ComplexParameter Class Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body onload='searchBox.OnSelectItem(0);'>
<!-- Generated by Doxygen 1.7.4 -->
<script type="text/javascript"><!--
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
--></script>
<div id="top">
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">ComPWA</div>
   <div id="projectbrief">Common Partial-Wave-Analysis Framework</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="../../index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="../../namespaces.xhtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="../../annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="../../files.xhtml"><span>Files</span></a></li>
      <li id="searchli">
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="../../search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="../../search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="../../annotated.xhtml"><span>Class&#160;List</span></a></li>
      <li><a href="../../classes.xhtml"><span>Class&#160;Index</span></a></li>
      <li><a href="../../inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="../../functions.xhtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#pro-attribs">Protected Attributes</a> &#124;
<a href="#friends">Friends</a>  </div>
  <div class="headertitle">
<div class="title">ComplexParameter Class Reference</div>  </div>
</div>
<div class="contents">
<!-- doxytag: class="ComplexParameter" --><!-- doxytag: inherits="AbsParameter" -->
<p><code>#include &lt;<a class="el" href="../../db/dce/Parameter_8hpp_source.xhtml">Parameter.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for ComplexParameter:</div>
<div class="dyncontent">
<div class="center"><iframe src="../../db/d91/classComplexParameter__inherit__graph.svg" width="174" height="1030" frameborder="0" scrolling="no"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
<center><span class="legend">[<a href="../../graph_legend.xhtml">legend</a>]</span></center></div>
<div class="dynheader">
Collaboration diagram for ComplexParameter:</div>
<div class="dyncontent">
<div class="center"><iframe src="../../d0/d9a/classComplexParameter__coll__graph.svg" width="475" height="1422" frameborder="0" scrolling="no"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
<center><span class="legend">[<a href="../../graph_legend.xhtml">legend</a>]</span></center></div>

<p><a href="../../de/dc6/classComplexParameter-members.xhtml">List of all members.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d65/classComplexParameter.xhtml#a6871ed44271e647014943736539468a6">ComplexParameter</a> (std::string inName)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Standard constructor without information.  <a href="#a6871ed44271e647014943736539468a6"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d65/classComplexParameter.xhtml#ad423947bdb6b14d4318d513ea1c6cf73">ComplexParameter</a> (std::string inName, const std::complex&lt; double &gt; value)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Standard constructor with a value.  <a href="#ad423947bdb6b14d4318d513ea1c6cf73"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d65/classComplexParameter.xhtml#ab53230098d0d04118c3b59843aa9bd84">ComplexParameter</a> (std::string inName, const std::complex&lt; double &gt; value, const std::complex&lt; double &gt; error)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Standard constructor with value and error.  <a href="#ab53230098d0d04118c3b59843aa9bd84"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d65/classComplexParameter.xhtml#adfa38797de8febd9c7c1eaa89846d656">ComplexParameter</a> (std::string inName, const std::complex&lt; double &gt; value, const std::complex&lt; double &gt; min, const std::complex&lt; double &gt; max)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Standard constructor with value and bounds.  <a href="#adfa38797de8febd9c7c1eaa89846d656"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d65/classComplexParameter.xhtml#a5ae7454a9ce2d4f1df28425d11f5a260">ComplexParameter</a> (std::string inName, const std::complex&lt; double &gt; value, const std::complex&lt; double &gt; min, const std::complex&lt; double &gt; max, const std::complex&lt; double &gt; error)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Standard constructor with value, bounds and error.  <a href="#a5ae7454a9ce2d4f1df28425d11f5a260"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d65/classComplexParameter.xhtml#a873a02e75a32a1b4642db97d84035270">ComplexParameter</a> (const <a class="el" href="../../d5/d65/classComplexParameter.xhtml">ComplexParameter</a> &amp;in)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy constructor using = operator.  <a href="#a873a02e75a32a1b4642db97d84035270"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d65/classComplexParameter.xhtml#a4f431fbb7e36b2840c463b9b6241a1b0">~ComplexParameter</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Empty Destructor.  <a href="#a4f431fbb7e36b2840c463b9b6241a1b0"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d65/classComplexParameter.xhtml#a9fb346f2e7074d5a59822ba3f7e10ad5">HasBounds</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if parameter has bounds.  <a href="#a9fb346f2e7074d5a59822ba3f7e10ad5"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d65/classComplexParameter.xhtml#a9072eca0acd412762f0fea7a7b1e9db8">UseBounds</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if bounds should be used.  <a href="#a9072eca0acd412762f0fea7a7b1e9db8"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d65/classComplexParameter.xhtml#a0aa9e6ddd27d1e05a7be20ce5d5c93f8">HasError</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if parameter has an error.  <a href="#a0aa9e6ddd27d1e05a7be20ce5d5c93f8"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d65/classComplexParameter.xhtml#a8f59412be517f36aa06dcb6086e8ae0e">IsFixed</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if parameter is fixed.  <a href="#a8f59412be517f36aa06dcb6086e8ae0e"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const std::complex<br class="typebreak"/>
&lt; double &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d65/classComplexParameter.xhtml#af6971f72ea88e75bf9f2a6c2139b2eac">GetValue</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Getter for value of parameter.  <a href="#af6971f72ea88e75bf9f2a6c2139b2eac"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const std::complex<br class="typebreak"/>
&lt; double &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d65/classComplexParameter.xhtml#a20bd16cc9afe0f8647669109ba04d845">GetMinValue</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Getter for lower bound of parameter.  <a href="#a20bd16cc9afe0f8647669109ba04d845"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const std::complex<br class="typebreak"/>
&lt; double &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d65/classComplexParameter.xhtml#a4289cc9bb6421ba283156f96755e2fcf">GetMaxValue</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Getter for upper bound of parameter.  <a href="#a4289cc9bb6421ba283156f96755e2fcf"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const std::complex<br class="typebreak"/>
&lt; double &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d65/classComplexParameter.xhtml#a67239611b0d6c43627ef008e69b38d44">GetError</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Getter for error of parameter.  <a href="#a67239611b0d6c43627ef008e69b38d44"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d65/classComplexParameter.xhtml#a7cb25edb17470742a55ab3adb75f38b8">SetValue</a> (const std::complex&lt; double &gt; inVal)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Getter for <a class="el" href="../../db/d4e/classFunctionTree.xhtml" title="FunctionTree for the actual Optimization.">FunctionTree</a> support.  <a href="#a7cb25edb17470742a55ab3adb75f38b8"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d65/classComplexParameter.xhtml#a3fa27f43cbf2352e4f7f2cfbeb8db411">SetError</a> (const std::complex&lt; double &gt; inErr)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Setter for error of parameter.  <a href="#a3fa27f43cbf2352e4f7f2cfbeb8db411"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d65/classComplexParameter.xhtml#ad88ca11c646db03207eb551e5df9abf5">SetMinMax</a> (const std::complex&lt; double &gt; inMin, const std::complex&lt; double &gt; inMax)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Setter for bounds of parameter.  <a href="#ad88ca11c646db03207eb551e5df9abf5"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d65/classComplexParameter.xhtml#a435296790a982814e21496e3baf4b35f">SetMinValue</a> (const std::complex&lt; double &gt; min)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Setter for lower bound.  <a href="#a435296790a982814e21496e3baf4b35f"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d65/classComplexParameter.xhtml#a8209293c34746d7a539a2dd7a4e3cc15">SetMaxValue</a> (const std::complex&lt; double &gt; max)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Setter for upper bound.  <a href="#a8209293c34746d7a539a2dd7a4e3cc15"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d65/classComplexParameter.xhtml#a5b4df8e3613ed1c367e2b2844c716729">UseBounds</a> (const bool use)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Set if bounds should be used.  <a href="#a5b4df8e3613ed1c367e2b2844c716729"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d65/classComplexParameter.xhtml#a9fac1762575c6ef2af9870ba1103aaee">SetParameterFixed</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Call to fix parameter.  <a href="#a9fac1762575c6ef2af9870ba1103aaee"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d65/classComplexParameter.xhtml#a3997b8500986b41d8d3fec622fe04d11">SetParameterFree</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Call to free parameter.  <a href="#a3997b8500986b41d8d3fec622fe04d11"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d65/classComplexParameter.xhtml#a2fef664590f17ef9c92d3388f2e72202">FixParameter</a> (const bool fixed)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Set parameter free or fixed.  <a href="#a2fef664590f17ef9c92d3388f2e72202"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d65/classComplexParameter.xhtml#a53aaee0587bf6432126225e00deff91c">TypeName</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">A public function returning a string naming its type.  <a href="#a53aaee0587bf6432126225e00deff91c"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const std::string &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/d6a/classAbsParameter.xhtml#a881d731fe387c785a76b6aad22445400">GetName</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Getter for name of object.  <a href="#a881d731fe387c785a76b6aad22445400"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const <a class="el" href="../../d8/def/AbsParameter_8hpp.xhtml#a5c1a62d78971166ef74c26cf99527f8a">ParType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/d6a/classAbsParameter.xhtml#a126b949117c9428eca256fb279e34a06">type</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Getter for type of object.  <a href="#a126b949117c9428eca256fb279e34a06"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/d6a/classAbsParameter.xhtml#ae811fcec3165b341f11817196eba837f">Attach</a> (std::shared_ptr&lt; <a class="el" href="../../df/d75/classParObserver.xhtml">ParObserver</a> &gt; newObserver)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Attaches a new <a class="el" href="../../da/d83/classTreeNode.xhtml" title="TreeNode is the interface for elements of the FunctionTree.">TreeNode</a> as Observer.  <a href="#ae811fcec3165b341f11817196eba837f"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/d6a/classAbsParameter.xhtml#a701f1791c5e45a5d20414836d5468826">Detach</a> (std::shared_ptr&lt; <a class="el" href="../../df/d75/classParObserver.xhtml">ParObserver</a> &gt; obsoleteObserver)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes TreeNodes not needed as Observer anymore.  <a href="#a701f1791c5e45a5d20414836d5468826"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/d6a/classAbsParameter.xhtml#a9d8d907c87e67616f1fadf77475c650c">Notify</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Notify all observing TreeNodes that parameter changed.  <a href="#a9d8d907c87e67616f1fadf77475c650c"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual std::string const &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/d6a/classAbsParameter.xhtml#a155e74bf1c96ce8321ab65c6a003f868">to_str</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">A public function returning a string with parameter information.  <a href="#a155e74bf1c96ce8321ab65c6a003f868"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual std::string const &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/d6a/classAbsParameter.xhtml#a68d85baeb9b1963a03795e4abf37db7a">val_to_str</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">A public function returning a string with parameter value.  <a href="#a68d85baeb9b1963a03795e4abf37db7a"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d65/classComplexParameter.xhtml#a9e17e8d6a632edee0601000bc2632570">check_bounds</a> (const std::complex&lt; double &gt; min, const std::complex&lt; double &gt; max)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">A protected function to check if bounds are valid.  <a href="#a9e17e8d6a632edee0601000bc2632570"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d65/classComplexParameter.xhtml#af99cc8d55f96b1a61c36f3940193d533">make_str</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">A protected function which creates an output string for printing.  <a href="#af99cc8d55f96b1a61c36f3940193d533"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d65/classComplexParameter.xhtml#aedc12d950086c0c6e7f428b0e4fe2db9">bounds_</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Are valid bounds defined for this parameter?  <a href="#aedc12d950086c0c6e7f428b0e4fe2db9"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d65/classComplexParameter.xhtml#a198010c032eccaa7157ac20c7ae25da7">error_</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Is an error defined for this parameter?  <a href="#a198010c032eccaa7157ac20c7ae25da7"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d65/classComplexParameter.xhtml#a3a4f2aa9e7641de68e9918db62b9ed43">usebounds_</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Do you want to restrict your parameter?  <a href="#a3a4f2aa9e7641de68e9918db62b9ed43"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d65/classComplexParameter.xhtml#a28006c2bc7313d118dd3c627b69c4023">fixed_</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Do you want to keep parameter fixed?  <a href="#a28006c2bc7313d118dd3c627b69c4023"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::complex&lt; double &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d65/classComplexParameter.xhtml#a34365e5cc73c633507eeabada8340dd1">val_</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::complex&lt; double &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d65/classComplexParameter.xhtml#a4d7ea1c8e771ae2f5b37cf2fb59efbc5">min_</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::complex&lt; double &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d65/classComplexParameter.xhtml#a6e6863770b43cd304500046be87c88ad">max_</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::complex&lt; double &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d65/classComplexParameter.xhtml#a09d03270b9de1f0bd6b767588c2c73c5">err_</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Containers of parameter information.  <a href="#a09d03270b9de1f0bd6b767588c2c73c5"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/d6a/classAbsParameter.xhtml#a65c954387c0ad30e8daf73fddb4b27db">out_</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Output string to print information.  <a href="#a65c954387c0ad30e8daf73fddb4b27db"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/d6a/classAbsParameter.xhtml#ac9bd4b866495c7770e34cad366ebd0e2">outVal_</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Output string to print only value.  <a href="#ac9bd4b866495c7770e34cad366ebd0e2"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/d6a/classAbsParameter.xhtml#a1eaa1cd6f79b60be57c9b924eda0cad2">name_</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">internal name of the parameter  <a href="#a1eaa1cd6f79b60be57c9b924eda0cad2"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d8/def/AbsParameter_8hpp.xhtml#a5c1a62d78971166ef74c26cf99527f8a">ParType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/d6a/classAbsParameter.xhtml#a05225b008e34a284d5ffd65d0e479027">type_</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">ParType enum for type of parameter.  <a href="#a05225b008e34a284d5ffd65d0e479027"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::vector&lt; std::shared_ptr<br class="typebreak"/>
&lt; <a class="el" href="../../df/d75/classParObserver.xhtml">ParObserver</a> &gt; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/d6a/classAbsParameter.xhtml#abd724fca707acabfdf91b20739ce1e12">oberservingNodes</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">list of observers, e.g.  <a href="#abd724fca707acabfdf91b20739ce1e12"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="friends"></a>
Friends</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/d6a/classAbsParameter.xhtml#a3b45a8d9bd0b00a09238f40ca421543a">operator&lt;&lt;</a> (std::ostream &amp;out, std::shared_ptr&lt; <a class="el" href="../../d7/d6a/classAbsParameter.xhtml">AbsParameter</a> &gt; b)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Return shared_pointer pointing to this Parameter.  <a href="#a3b45a8d9bd0b00a09238f40ca421543a"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/d6a/classAbsParameter.xhtml#a4f06c9d592310ad3b31b4fc8f13e0faf">operator&lt;&lt;</a> (std::ostream &amp;out, const <a class="el" href="../../d7/d6a/classAbsParameter.xhtml">AbsParameter</a> &amp;b)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">friend function to stream parameter information to output  <a href="#a4f06c9d592310ad3b31b4fc8f13e0faf"></a><br/></td></tr>
</table>
<hr/><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a6871ed44271e647014943736539468a6"></a><!-- doxytag: member="ComplexParameter::ComplexParameter" ref="a6871ed44271e647014943736539468a6" args="(std::string inName)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ComplexParameter::ComplexParameter </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>inName</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Standard constructor without information. </p>
<p>Standard constructor with just a name provided. Creates parameter with value 0 but without bounds or an error. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">inName</td><td>internal string identifier of this parameter </td></tr>
  </table>
  </dd>
</dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="../../d5/d65/classComplexParameter.xhtml#af99cc8d55f96b1a61c36f3940193d533" title="A protected function which creates an output string for printing.">make_str()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ad423947bdb6b14d4318d513ea1c6cf73"></a><!-- doxytag: member="ComplexParameter::ComplexParameter" ref="ad423947bdb6b14d4318d513ea1c6cf73" args="(std::string inName, const std::complex&lt; double &gt; value)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ComplexParameter::ComplexParameter </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>inName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::complex&lt; double &gt;&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Standard constructor with a value. </p>
<p>Standard constructor with just value and name provided. Creates parameter with given value but without bounds or an error. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">inName</td><td>internal string identifier of this parameter </td></tr>
    <tr><td class="paramname">value</td><td>input value of the parameter </td></tr>
  </table>
  </dd>
</dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="../../d5/d65/classComplexParameter.xhtml#af99cc8d55f96b1a61c36f3940193d533" title="A protected function which creates an output string for printing.">make_str()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ab53230098d0d04118c3b59843aa9bd84"></a><!-- doxytag: member="ComplexParameter::ComplexParameter" ref="ab53230098d0d04118c3b59843aa9bd84" args="(std::string inName, const std::complex&lt; double &gt; value, const std::complex&lt; double &gt; error)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ComplexParameter::ComplexParameter </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>inName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::complex&lt; double &gt;&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::complex&lt; double &gt;&#160;</td>
          <td class="paramname"><em>error</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Standard constructor with value and error. </p>
<p>Standard constructor with value and error provided. Creates parameter with given value and error but without bounds. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">inName</td><td>internal string identifier of this parameter </td></tr>
    <tr><td class="paramname">value</td><td>input value of the parameter </td></tr>
    <tr><td class="paramname">error</td><td>input error of the parameter </td></tr>
  </table>
  </dd>
</dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="../../d5/d65/classComplexParameter.xhtml#af99cc8d55f96b1a61c36f3940193d533" title="A protected function which creates an output string for printing.">make_str()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="adfa38797de8febd9c7c1eaa89846d656"></a><!-- doxytag: member="ComplexParameter::ComplexParameter" ref="adfa38797de8febd9c7c1eaa89846d656" args="(std::string inName, const std::complex&lt; double &gt; value, const std::complex&lt; double &gt; min, const std::complex&lt; double &gt; max)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ComplexParameter::ComplexParameter </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>inName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::complex&lt; double &gt;&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::complex&lt; double &gt;&#160;</td>
          <td class="paramname"><em>min</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::complex&lt; double &gt;&#160;</td>
          <td class="paramname"><em>max</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Standard constructor with value and bounds. </p>
<p>Standard constructor with value and bounds provided. Creates parameter with given value and bounds but without error. If a check for valid bounds fails, just the value is used. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">inName</td><td>internal string identifier of this parameter </td></tr>
    <tr><td class="paramname">value</td><td>input value of the parameter </td></tr>
    <tr><td class="paramname">min</td><td>input lower bound </td></tr>
    <tr><td class="paramname">max</td><td>input upper bound </td></tr>
  </table>
  </dd>
</dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="../../d5/d65/classComplexParameter.xhtml#af99cc8d55f96b1a61c36f3940193d533" title="A protected function which creates an output string for printing.">make_str()</a>, <a class="el" href="../../d5/d65/classComplexParameter.xhtml#a9e17e8d6a632edee0601000bc2632570" title="A protected function to check if bounds are valid.">check_bounds()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a5ae7454a9ce2d4f1df28425d11f5a260"></a><!-- doxytag: member="ComplexParameter::ComplexParameter" ref="a5ae7454a9ce2d4f1df28425d11f5a260" args="(std::string inName, const std::complex&lt; double &gt; value, const std::complex&lt; double &gt; min, const std::complex&lt; double &gt; max, const std::complex&lt; double &gt; error)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ComplexParameter::ComplexParameter </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>inName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::complex&lt; double &gt;&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::complex&lt; double &gt;&#160;</td>
          <td class="paramname"><em>min</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::complex&lt; double &gt;&#160;</td>
          <td class="paramname"><em>max</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::complex&lt; double &gt;&#160;</td>
          <td class="paramname"><em>error</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Standard constructor with value, bounds and error. </p>
<p>Standard constructor with value, bounds and error provided. Creates parameter with the given information. If a check for valid bounds fails, just value and error are used. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">inName</td><td>internal string identifier of this parameter </td></tr>
    <tr><td class="paramname">value</td><td>input value of the parameter </td></tr>
    <tr><td class="paramname">min</td><td>input lower bound </td></tr>
    <tr><td class="paramname">max</td><td>input upper bound </td></tr>
    <tr><td class="paramname">error</td><td>input error of the parameter </td></tr>
  </table>
  </dd>
</dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="../../d5/d65/classComplexParameter.xhtml#af99cc8d55f96b1a61c36f3940193d533" title="A protected function which creates an output string for printing.">make_str()</a>, <a class="el" href="../../d5/d65/classComplexParameter.xhtml#a9e17e8d6a632edee0601000bc2632570" title="A protected function to check if bounds are valid.">check_bounds()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a873a02e75a32a1b4642db97d84035270"></a><!-- doxytag: member="ComplexParameter::ComplexParameter" ref="a873a02e75a32a1b4642db97d84035270" args="(const ComplexParameter &amp;in)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ComplexParameter::ComplexParameter </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d5/d65/classComplexParameter.xhtml">ComplexParameter</a> &amp;&#160;</td>
          <td class="paramname"><em>in</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Copy constructor using = operator. </p>
<p>Simple copy constructor using the = operator. As this operator is not overloaded in this class, c++ will copy every member variable. As this is a container class, this should be fine. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">in</td><td>input PWAParameter which variables will be copied </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a4f431fbb7e36b2840c463b9b6241a1b0"></a><!-- doxytag: member="ComplexParameter::~ComplexParameter" ref="a4f431fbb7e36b2840c463b9b6241a1b0" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual ComplexParameter::~ComplexParameter </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Empty Destructor. </p>
<p>There is nothing to destroy :( </p>

</div>
</div>
<hr/><h2>Member Function Documentation</h2>
<a class="anchor" id="ae811fcec3165b341f11817196eba837f"></a><!-- doxytag: member="ComplexParameter::Attach" ref="ae811fcec3165b341f11817196eba837f" args="(std::shared_ptr&lt; ParObserver &gt; newObserver)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void AbsParameter::Attach </td>
          <td>(</td>
          <td class="paramtype">std::shared_ptr&lt; <a class="el" href="../../df/d75/classParObserver.xhtml">ParObserver</a> &gt;&#160;</td>
          <td class="paramname"><em>newObserver</em></td><td>)</td>
          <td><code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Attaches a new <a class="el" href="../../da/d83/classTreeNode.xhtml" title="TreeNode is the interface for elements of the FunctionTree.">TreeNode</a> as Observer. </p>

</div>
</div>
<a class="anchor" id="a9e17e8d6a632edee0601000bc2632570"></a><!-- doxytag: member="ComplexParameter::check_bounds" ref="a9e17e8d6a632edee0601000bc2632570" args="(const std::complex&lt; double &gt; min, const std::complex&lt; double &gt; max)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool ComplexParameter::check_bounds </td>
          <td>(</td>
          <td class="paramtype">const std::complex&lt; double &gt;&#160;</td>
          <td class="paramname"><em>min</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::complex&lt; double &gt;&#160;</td>
          <td class="paramname"><em>max</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline, protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>A protected function to check if bounds are valid. </p>
<p>This function checks if the bounds of the parameter are valid: Upper bound should be larger then lower bound and the value should be inside of the bounds. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">max</td><td>upper bound to check </td></tr>
    <tr><td class="paramname">min</td><td>lower bound to check </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>bool if bounds are valid </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd>Parameter(const double value, const double min, const double max) </dd>
<dd>
Parameter(const double value, const double min, const double max, const double error) </dd>
<dd>
<a class="el" href="../../d5/d65/classComplexParameter.xhtml#ad88ca11c646db03207eb551e5df9abf5" title="Setter for bounds of parameter.">SetMinMax()</a>, <a class="el" href="../../d5/d65/classComplexParameter.xhtml#a435296790a982814e21496e3baf4b35f" title="Setter for lower bound.">SetMinValue()</a>, <a class="el" href="../../d5/d65/classComplexParameter.xhtml#a8209293c34746d7a539a2dd7a4e3cc15" title="Setter for upper bound.">SetMaxValue()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a701f1791c5e45a5d20414836d5468826"></a><!-- doxytag: member="ComplexParameter::Detach" ref="a701f1791c5e45a5d20414836d5468826" args="(std::shared_ptr&lt; ParObserver &gt; obsoleteObserver)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void AbsParameter::Detach </td>
          <td>(</td>
          <td class="paramtype">std::shared_ptr&lt; <a class="el" href="../../df/d75/classParObserver.xhtml">ParObserver</a> &gt;&#160;</td>
          <td class="paramname"><em>obsoleteObserver</em></td><td>)</td>
          <td><code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Removes TreeNodes not needed as Observer anymore. </p>

</div>
</div>
<a class="anchor" id="a2fef664590f17ef9c92d3388f2e72202"></a><!-- doxytag: member="ComplexParameter::FixParameter" ref="a2fef664590f17ef9c92d3388f2e72202" args="(const bool fixed)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const void ComplexParameter::FixParameter </td>
          <td>(</td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>fixed</em></td><td>)</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set parameter free or fixed. </p>

</div>
</div>
<a class="anchor" id="a67239611b0d6c43627ef008e69b38d44"></a><!-- doxytag: member="ComplexParameter::GetError" ref="a67239611b0d6c43627ef008e69b38d44" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const std::complex&lt;double&gt; ComplexParameter::GetError </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Getter for error of parameter. </p>

</div>
</div>
<a class="anchor" id="a4289cc9bb6421ba283156f96755e2fcf"></a><!-- doxytag: member="ComplexParameter::GetMaxValue" ref="a4289cc9bb6421ba283156f96755e2fcf" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const std::complex&lt;double&gt; ComplexParameter::GetMaxValue </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Getter for upper bound of parameter. </p>

</div>
</div>
<a class="anchor" id="a20bd16cc9afe0f8647669109ba04d845"></a><!-- doxytag: member="ComplexParameter::GetMinValue" ref="a20bd16cc9afe0f8647669109ba04d845" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const std::complex&lt;double&gt; ComplexParameter::GetMinValue </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Getter for lower bound of parameter. </p>

</div>
</div>
<a class="anchor" id="a881d731fe387c785a76b6aad22445400"></a><!-- doxytag: member="ComplexParameter::GetName" ref="a881d731fe387c785a76b6aad22445400" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const std::string&amp; AbsParameter::GetName </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline, virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Getter for name of object. </p>

</div>
</div>
<a class="anchor" id="af6971f72ea88e75bf9f2a6c2139b2eac"></a><!-- doxytag: member="ComplexParameter::GetValue" ref="af6971f72ea88e75bf9f2a6c2139b2eac" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const std::complex&lt;double&gt; ComplexParameter::GetValue </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Getter for value of parameter. </p>

</div>
</div>
<a class="anchor" id="a9fb346f2e7074d5a59822ba3f7e10ad5"></a><!-- doxytag: member="ComplexParameter::HasBounds" ref="a9fb346f2e7074d5a59822ba3f7e10ad5" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const bool ComplexParameter::HasBounds </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Check if parameter has bounds. </p>

</div>
</div>
<a class="anchor" id="a0aa9e6ddd27d1e05a7be20ce5d5c93f8"></a><!-- doxytag: member="ComplexParameter::HasError" ref="a0aa9e6ddd27d1e05a7be20ce5d5c93f8" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const bool ComplexParameter::HasError </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Check if parameter has an error. </p>

</div>
</div>
<a class="anchor" id="a8f59412be517f36aa06dcb6086e8ae0e"></a><!-- doxytag: member="ComplexParameter::IsFixed" ref="a8f59412be517f36aa06dcb6086e8ae0e" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const bool ComplexParameter::IsFixed </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Check if parameter is fixed. </p>

</div>
</div>
<a class="anchor" id="af99cc8d55f96b1a61c36f3940193d533"></a><!-- doxytag: member="ComplexParameter::make_str" ref="af99cc8d55f96b1a61c36f3940193d533" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual void ComplexParameter::make_str </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline, protected, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>A protected function which creates an output string for printing. </p>
<p>This function uses all available information about the parameter to create a string which will be streamed via the stream operator &lt;&lt;. </p>
<dl class="see"><dt><b>See also:</b></dt><dd>operator&lt;&lt;, <a class="el" href="../../d7/d6a/classAbsParameter.xhtml#a155e74bf1c96ce8321ab65c6a003f868" title="A public function returning a string with parameter information.">to_str()</a>, <a class="el" href="../../d7/d6a/classAbsParameter.xhtml#a126b949117c9428eca256fb279e34a06" title="Getter for type of object.">type()</a> </dd></dl>

<p>Implements <a class="el" href="../../d7/d6a/classAbsParameter.xhtml#a0c98ee88d1ccfbb6db5e7b02c96b2934">AbsParameter</a>.</p>

</div>
</div>
<a class="anchor" id="a9d8d907c87e67616f1fadf77475c650c"></a><!-- doxytag: member="ComplexParameter::Notify" ref="a9d8d907c87e67616f1fadf77475c650c" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void AbsParameter::Notify </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Notify all observing TreeNodes that parameter changed. </p>

</div>
</div>
<a class="anchor" id="a3fa27f43cbf2352e4f7f2cfbeb8db411"></a><!-- doxytag: member="ComplexParameter::SetError" ref="a3fa27f43cbf2352e4f7f2cfbeb8db411" args="(const std::complex&lt; double &gt; inErr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual void ComplexParameter::SetError </td>
          <td>(</td>
          <td class="paramtype">const std::complex&lt; double &gt;&#160;</td>
          <td class="paramname"><em>inErr</em></td><td>)</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Setter for error of parameter. </p>

</div>
</div>
<a class="anchor" id="a8209293c34746d7a539a2dd7a4e3cc15"></a><!-- doxytag: member="ComplexParameter::SetMaxValue" ref="a8209293c34746d7a539a2dd7a4e3cc15" args="(const std::complex&lt; double &gt; max)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const bool ComplexParameter::SetMaxValue </td>
          <td>(</td>
          <td class="paramtype">const std::complex&lt; double &gt;&#160;</td>
          <td class="paramname"><em>max</em></td><td>)</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Setter for upper bound. </p>
<p>Setter for upper bound of the parameter. If a check for valid bounds fails, it returns false and nothing changes. This means if the upper bound is invalid the parameter maintains its old bounds if it had some. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">max</td><td>input upper bound </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>bool if successful (re)set upper bound </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="../../d5/d65/classComplexParameter.xhtml#a9e17e8d6a632edee0601000bc2632570" title="A protected function to check if bounds are valid.">check_bounds()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ad88ca11c646db03207eb551e5df9abf5"></a><!-- doxytag: member="ComplexParameter::SetMinMax" ref="ad88ca11c646db03207eb551e5df9abf5" args="(const std::complex&lt; double &gt; inMin, const std::complex&lt; double &gt; inMax)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const bool ComplexParameter::SetMinMax </td>
          <td>(</td>
          <td class="paramtype">const std::complex&lt; double &gt;&#160;</td>
          <td class="paramname"><em>inMin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::complex&lt; double &gt;&#160;</td>
          <td class="paramname"><em>inMax</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Setter for bounds of parameter. </p>

</div>
</div>
<a class="anchor" id="a435296790a982814e21496e3baf4b35f"></a><!-- doxytag: member="ComplexParameter::SetMinValue" ref="a435296790a982814e21496e3baf4b35f" args="(const std::complex&lt; double &gt; min)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const bool ComplexParameter::SetMinValue </td>
          <td>(</td>
          <td class="paramtype">const std::complex&lt; double &gt;&#160;</td>
          <td class="paramname"><em>min</em></td><td>)</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Setter for lower bound. </p>
<p>Setter for lower bound of the parameter. If a check for valid bounds fails, it returns false and nothing changes. This means if the lower bound is invalid the parameter maintains its old bounds if it had some. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">min</td><td>input lower bound </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>bool if successful (re)set lower bound </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="../../d5/d65/classComplexParameter.xhtml#a9e17e8d6a632edee0601000bc2632570" title="A protected function to check if bounds are valid.">check_bounds()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a9fac1762575c6ef2af9870ba1103aaee"></a><!-- doxytag: member="ComplexParameter::SetParameterFixed" ref="a9fac1762575c6ef2af9870ba1103aaee" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const void ComplexParameter::SetParameterFixed </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Call to fix parameter. </p>

</div>
</div>
<a class="anchor" id="a3997b8500986b41d8d3fec622fe04d11"></a><!-- doxytag: member="ComplexParameter::SetParameterFree" ref="a3997b8500986b41d8d3fec622fe04d11" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const void ComplexParameter::SetParameterFree </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Call to free parameter. </p>

</div>
</div>
<a class="anchor" id="a7cb25edb17470742a55ab3adb75f38b8"></a><!-- doxytag: member="ComplexParameter::SetValue" ref="a7cb25edb17470742a55ab3adb75f38b8" args="(const std::complex&lt; double &gt; inVal)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual void ComplexParameter::SetValue </td>
          <td>(</td>
          <td class="paramtype">const std::complex&lt; double &gt;&#160;</td>
          <td class="paramname"><em>inVal</em></td><td>)</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Getter for <a class="el" href="../../db/d4e/classFunctionTree.xhtml" title="FunctionTree for the actual Optimization.">FunctionTree</a> support. </p>
<p>Setter for value of parameter </p>

</div>
</div>
<a class="anchor" id="a155e74bf1c96ce8321ab65c6a003f868"></a><!-- doxytag: member="ComplexParameter::to_str" ref="a155e74bf1c96ce8321ab65c6a003f868" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual std::string const&amp; AbsParameter::to_str </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline, virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>A public function returning a string with parameter information. </p>
<p>This function simply returns the member string out_, which contains all parameter information. The string gets rebuild with every change of the parameter. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>string with parameter information </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd>operator&lt;&lt;, <a class="el" href="../../d7/d6a/classAbsParameter.xhtml#a0c98ee88d1ccfbb6db5e7b02c96b2934" title="Interface to fill output string, to be implemented by parameter implementations.">make_str()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a126b949117c9428eca256fb279e34a06"></a><!-- doxytag: member="ComplexParameter::type" ref="a126b949117c9428eca256fb279e34a06" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const <a class="el" href="../../d8/def/AbsParameter_8hpp.xhtml#a5c1a62d78971166ef74c26cf99527f8a">ParType</a> AbsParameter::type </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline, virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Getter for type of object. </p>

</div>
</div>
<a class="anchor" id="a53aaee0587bf6432126225e00deff91c"></a><!-- doxytag: member="ComplexParameter::TypeName" ref="a53aaee0587bf6432126225e00deff91c" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const std::string ComplexParameter::TypeName </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>A public function returning a string naming its type. </p>
<p>This function is used to get the type of the implementation of this general parameter interface. </p>
<dl class="see"><dt><b>See also:</b></dt><dd>operator&lt;&lt;, <a class="el" href="../../d7/d6a/classAbsParameter.xhtml#a155e74bf1c96ce8321ab65c6a003f868" title="A public function returning a string with parameter information.">to_str()</a>, <a class="el" href="../../d5/d65/classComplexParameter.xhtml#af99cc8d55f96b1a61c36f3940193d533" title="A protected function which creates an output string for printing.">make_str()</a> </dd></dl>

<p>Implements <a class="el" href="../../d7/d6a/classAbsParameter.xhtml#a6798bb427c8fb456c4caae1b1b132ab7">AbsParameter</a>.</p>

</div>
</div>
<a class="anchor" id="a5b4df8e3613ed1c367e2b2844c716729"></a><!-- doxytag: member="ComplexParameter::UseBounds" ref="a5b4df8e3613ed1c367e2b2844c716729" args="(const bool use)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const void ComplexParameter::UseBounds </td>
          <td>(</td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>use</em></td><td>)</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set if bounds should be used. </p>

</div>
</div>
<a class="anchor" id="a9072eca0acd412762f0fea7a7b1e9db8"></a><!-- doxytag: member="ComplexParameter::UseBounds" ref="a9072eca0acd412762f0fea7a7b1e9db8" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const bool ComplexParameter::UseBounds </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Check if bounds should be used. </p>

</div>
</div>
<a class="anchor" id="a68d85baeb9b1963a03795e4abf37db7a"></a><!-- doxytag: member="ComplexParameter::val_to_str" ref="a68d85baeb9b1963a03795e4abf37db7a" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual std::string const&amp; AbsParameter::val_to_str </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline, virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>A public function returning a string with parameter value. </p>
<p>This function simply returns the member string outVal_, which contains the parameter value. The string gets rebuild with every change of the parameter. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>string with parameter information </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="../../d7/d6a/classAbsParameter.xhtml#a0c98ee88d1ccfbb6db5e7b02c96b2934" title="Interface to fill output string, to be implemented by parameter implementations.">make_str()</a> </dd></dl>

</div>
</div>
<hr/><h2>Friends And Related Function Documentation</h2>
<a class="anchor" id="a3b45a8d9bd0b00a09238f40ca421543a"></a><!-- doxytag: member="ComplexParameter::operator&lt;&lt;" ref="a3b45a8d9bd0b00a09238f40ca421543a" args="(std::ostream &amp;out, std::shared_ptr&lt; AbsParameter &gt; b)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::ostream&amp; operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::shared_ptr&lt; <a class="el" href="../../d7/d6a/classAbsParameter.xhtml">AbsParameter</a> &gt;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Return shared_pointer pointing to this Parameter. </p>
<p>friend function to stream parameter information to output</p>
<p>Declaring the stream-operator &lt;&lt; as friend allows to stream parameter information to the output as easily as a generic type. </p>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="../../d7/d6a/classAbsParameter.xhtml#a0c98ee88d1ccfbb6db5e7b02c96b2934" title="Interface to fill output string, to be implemented by parameter implementations.">make_str()</a>, <a class="el" href="../../d7/d6a/classAbsParameter.xhtml#a155e74bf1c96ce8321ab65c6a003f868" title="A public function returning a string with parameter information.">to_str()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a4f06c9d592310ad3b31b4fc8f13e0faf"></a><!-- doxytag: member="ComplexParameter::operator&lt;&lt;" ref="a4f06c9d592310ad3b31b4fc8f13e0faf" args="(std::ostream &amp;out, const AbsParameter &amp;b)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::ostream&amp; operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../d7/d6a/classAbsParameter.xhtml">AbsParameter</a> &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>friend function to stream parameter information to output </p>
<p>Declaring the stream-operator &lt;&lt; as friend allows to stream parameter information to the output as easily as a generic type. </p>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="../../d7/d6a/classAbsParameter.xhtml#a0c98ee88d1ccfbb6db5e7b02c96b2934" title="Interface to fill output string, to be implemented by parameter implementations.">make_str()</a>, <a class="el" href="../../d7/d6a/classAbsParameter.xhtml#a155e74bf1c96ce8321ab65c6a003f868" title="A public function returning a string with parameter information.">to_str()</a> </dd></dl>

</div>
</div>
<hr/><h2>Member Data Documentation</h2>
<a class="anchor" id="aedc12d950086c0c6e7f428b0e4fe2db9"></a><!-- doxytag: member="ComplexParameter::bounds_" ref="aedc12d950086c0c6e7f428b0e4fe2db9" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="../../d5/d65/classComplexParameter.xhtml#aedc12d950086c0c6e7f428b0e4fe2db9">ComplexParameter::bounds_</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Are valid bounds defined for this parameter? </p>

</div>
</div>
<a class="anchor" id="a09d03270b9de1f0bd6b767588c2c73c5"></a><!-- doxytag: member="ComplexParameter::err_" ref="a09d03270b9de1f0bd6b767588c2c73c5" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::complex&lt;double&gt; <a class="el" href="../../d5/d65/classComplexParameter.xhtml#a09d03270b9de1f0bd6b767588c2c73c5">ComplexParameter::err_</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Containers of parameter information. </p>

</div>
</div>
<a class="anchor" id="a198010c032eccaa7157ac20c7ae25da7"></a><!-- doxytag: member="ComplexParameter::error_" ref="a198010c032eccaa7157ac20c7ae25da7" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="../../d5/d65/classComplexParameter.xhtml#a198010c032eccaa7157ac20c7ae25da7">ComplexParameter::error_</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Is an error defined for this parameter? </p>

</div>
</div>
<a class="anchor" id="a28006c2bc7313d118dd3c627b69c4023"></a><!-- doxytag: member="ComplexParameter::fixed_" ref="a28006c2bc7313d118dd3c627b69c4023" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="../../d5/d65/classComplexParameter.xhtml#a28006c2bc7313d118dd3c627b69c4023">ComplexParameter::fixed_</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Do you want to keep parameter fixed? </p>

</div>
</div>
<a class="anchor" id="a6e6863770b43cd304500046be87c88ad"></a><!-- doxytag: member="ComplexParameter::max_" ref="a6e6863770b43cd304500046be87c88ad" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::complex&lt;double&gt; <a class="el" href="../../d5/d65/classComplexParameter.xhtml#a6e6863770b43cd304500046be87c88ad">ComplexParameter::max_</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a4d7ea1c8e771ae2f5b37cf2fb59efbc5"></a><!-- doxytag: member="ComplexParameter::min_" ref="a4d7ea1c8e771ae2f5b37cf2fb59efbc5" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::complex&lt;double&gt; <a class="el" href="../../d5/d65/classComplexParameter.xhtml#a4d7ea1c8e771ae2f5b37cf2fb59efbc5">ComplexParameter::min_</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a1eaa1cd6f79b60be57c9b924eda0cad2"></a><!-- doxytag: member="ComplexParameter::name_" ref="a1eaa1cd6f79b60be57c9b924eda0cad2" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string <a class="el" href="../../d7/d6a/classAbsParameter.xhtml#a1eaa1cd6f79b60be57c9b924eda0cad2">AbsParameter::name_</a><code> [protected, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>internal name of the parameter </p>

</div>
</div>
<a class="anchor" id="abd724fca707acabfdf91b20739ce1e12"></a><!-- doxytag: member="ComplexParameter::oberservingNodes" ref="abd724fca707acabfdf91b20739ce1e12" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;std::shared_ptr&lt;<a class="el" href="../../df/d75/classParObserver.xhtml">ParObserver</a>&gt; &gt; <a class="el" href="../../d7/d6a/classAbsParameter.xhtml#abd724fca707acabfdf91b20739ce1e12">AbsParameter::oberservingNodes</a><code> [protected, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>list of observers, e.g. </p>
<p>TreeNodes </p>

</div>
</div>
<a class="anchor" id="a65c954387c0ad30e8daf73fddb4b27db"></a><!-- doxytag: member="ComplexParameter::out_" ref="a65c954387c0ad30e8daf73fddb4b27db" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string <a class="el" href="../../d7/d6a/classAbsParameter.xhtml#a65c954387c0ad30e8daf73fddb4b27db">AbsParameter::out_</a><code> [protected, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Output string to print information. </p>

</div>
</div>
<a class="anchor" id="ac9bd4b866495c7770e34cad366ebd0e2"></a><!-- doxytag: member="ComplexParameter::outVal_" ref="ac9bd4b866495c7770e34cad366ebd0e2" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string <a class="el" href="../../d7/d6a/classAbsParameter.xhtml#ac9bd4b866495c7770e34cad366ebd0e2">AbsParameter::outVal_</a><code> [protected, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Output string to print only value. </p>

</div>
</div>
<a class="anchor" id="a05225b008e34a284d5ffd65d0e479027"></a><!-- doxytag: member="ComplexParameter::type_" ref="a05225b008e34a284d5ffd65d0e479027" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d8/def/AbsParameter_8hpp.xhtml#a5c1a62d78971166ef74c26cf99527f8a">ParType</a> <a class="el" href="../../d7/d6a/classAbsParameter.xhtml#a05225b008e34a284d5ffd65d0e479027">AbsParameter::type_</a><code> [protected, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>ParType enum for type of parameter. </p>

</div>
</div>
<a class="anchor" id="a3a4f2aa9e7641de68e9918db62b9ed43"></a><!-- doxytag: member="ComplexParameter::usebounds_" ref="a3a4f2aa9e7641de68e9918db62b9ed43" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="../../d5/d65/classComplexParameter.xhtml#a3a4f2aa9e7641de68e9918db62b9ed43">ComplexParameter::usebounds_</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Do you want to restrict your parameter? </p>

</div>
</div>
<a class="anchor" id="a34365e5cc73c633507eeabada8340dd1"></a><!-- doxytag: member="ComplexParameter::val_" ref="a34365e5cc73c633507eeabada8340dd1" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::complex&lt;double&gt; <a class="el" href="../../d5/d65/classComplexParameter.xhtml#a34365e5cc73c633507eeabada8340dd1">ComplexParameter::val_</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>Core/<a class="el" href="../../db/dce/Parameter_8hpp_source.xhtml">Parameter.hpp</a></li>
</ul>
</div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<hr class="footer"/><address class="footer"><small>Generated on Thu Oct 24 2013 for ComPWA by&#160;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.7.4 </small></address>
</body>
</html>
