<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>ComPWA: Core/AbsParameter.hpp Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body onload='searchBox.OnSelectItem(0);'>
<!-- Generated by Doxygen 1.7.4 -->
<script type="text/javascript"><!--
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
--></script>
<div id="top">
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">ComPWA</div>
   <div id="projectbrief">Common Partial-Wave-Analysis Framework</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="../../index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="../../namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="../../annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="../../files.xhtml"><span>Files</span></a></li>
      <li id="searchli">
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="../../search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="../../search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="../../files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="../../globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<div class="header">
  <div class="headertitle">
<div class="title">Core/AbsParameter.hpp</div>  </div>
</div>
<div class="contents">
<a href="../../d8/def/AbsParameter_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">//-------------------------------------------------------------------------------</span>
<a name="l00002"></a>00002 <span class="comment">// Copyright (c) 2013 Mathias Michel.</span>
<a name="l00003"></a>00003 <span class="comment">//</span>
<a name="l00004"></a>00004 <span class="comment">// This file is part of ComPWA, check license.txt for details</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">// All rights reserved. This program and the accompanying materials</span>
<a name="l00007"></a>00007 <span class="comment">// are made available under the terms of the GNU Public License v3.0</span>
<a name="l00008"></a>00008 <span class="comment">// which accompanies this distribution, and is available at</span>
<a name="l00009"></a>00009 <span class="comment">// http://www.gnu.org/licenses/gpl.html</span>
<a name="l00010"></a>00010 <span class="comment">//</span>
<a name="l00011"></a>00011 <span class="comment">// Contributors:</span>
<a name="l00012"></a>00012 <span class="comment">//     Mathias Michel - initial API and implementation</span>
<a name="l00013"></a>00013 <span class="comment">//-------------------------------------------------------------------------------</span>
<a name="l00015"></a>00015 <span class="comment"></span>
<a name="l00024"></a>00024 <span class="preprocessor">#ifndef _ABSPARAMETER_HPP_</span>
<a name="l00025"></a>00025 <span class="preprocessor"></span><span class="preprocessor">#define _ABSPARAMETER_HPP_</span>
<a name="l00026"></a>00026 <span class="preprocessor"></span>
<a name="l00027"></a>00027 
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;memory&gt;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;algorithm&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &quot;<a class="code" href="../../d9/d91/ParObserver_8hpp.xhtml" title="For the use in the function tree, the observer pattern is used.">Core/ParObserver.hpp</a>&quot;</span>
<a name="l00033"></a>00033 
<a name="l00034"></a><a class="code" href="../../d8/def/AbsParameter_8hpp.xhtml#a5c1a62d78971166ef74c26cf99527f8aa605159e8a4c32319fd69b5d151369d93">00034</a> <span class="keyword">enum</span> <a class="code" href="../../d8/def/AbsParameter_8hpp.xhtml#a5c1a62d78971166ef74c26cf99527f8a">ParType</a> { <a class="code" href="../../d8/def/AbsParameter_8hpp.xhtml#a5c1a62d78971166ef74c26cf99527f8aa5374e1234e4d55af346d6ae6263ad573">COMPLEX</a> = 1, <a class="code" href="../../d8/def/AbsParameter_8hpp.xhtml#a5c1a62d78971166ef74c26cf99527f8aa33465d1d419b1074fb259ef444609e92">DOUBLE</a> = 2, <a class="code" href="../../d8/def/AbsParameter_8hpp.xhtml#a5c1a62d78971166ef74c26cf99527f8aa5a063e265d2ac903b6808e9f6e73ec46">INTEGER</a> = 3, <a class="code" href="../../d8/def/AbsParameter_8hpp.xhtml#a5c1a62d78971166ef74c26cf99527f8aae663dbb8f8244e122acb5bd6b2c216e1">BOOL</a> = 4, <a class="code" href="../../d8/def/AbsParameter_8hpp.xhtml#a5c1a62d78971166ef74c26cf99527f8aa605159e8a4c32319fd69b5d151369d93">UNDEFINED</a> = 0};
<a name="l00035"></a>00035 
<a name="l00036"></a><a class="code" href="../../d7/d6a/classAbsParameter.xhtml">00036</a> <span class="keyword">class </span><a class="code" href="../../d7/d6a/classAbsParameter.xhtml" title="Base class for internal parameter.">AbsParameter</a> <span class="comment">//: public std::enable_shared_from_this&lt;AbsParameter&gt;</span>
<a name="l00037"></a>00037 {
<a name="l00038"></a>00038 <span class="keyword">public</span>:
<a name="l00040"></a><a class="code" href="../../d7/d6a/classAbsParameter.xhtml#ad07643baba6cc75c6036d83ae97f9428">00040</a>   <a class="code" href="../../d7/d6a/classAbsParameter.xhtml#ad07643baba6cc75c6036d83ae97f9428" title="Constructor with name of parameter and optional type.">AbsParameter</a>(std::string name, <a class="code" href="../../d8/def/AbsParameter_8hpp.xhtml#a5c1a62d78971166ef74c26cf99527f8a">ParType</a> <a class="code" href="../../d7/d6a/classAbsParameter.xhtml#a126b949117c9428eca256fb279e34a06" title="Getter for type of object.">type</a>=<a class="code" href="../../d8/def/AbsParameter_8hpp.xhtml#a5c1a62d78971166ef74c26cf99527f8aa605159e8a4c32319fd69b5d151369d93">ParType::UNDEFINED</a>):<a class="code" href="../../d7/d6a/classAbsParameter.xhtml#a1eaa1cd6f79b60be57c9b924eda0cad2" title="internal name of the parameter">name_</a>(name), <a class="code" href="../../d7/d6a/classAbsParameter.xhtml#a05225b008e34a284d5ffd65d0e479027" title="ParType enum for type of parameter.">type_</a>(<a class="code" href="../../d7/d6a/classAbsParameter.xhtml#a126b949117c9428eca256fb279e34a06" title="Getter for type of object.">type</a>){
<a name="l00041"></a>00041 
<a name="l00042"></a>00042   }
<a name="l00043"></a>00043 
<a name="l00045"></a><a class="code" href="../../d7/d6a/classAbsParameter.xhtml#a881d731fe387c785a76b6aad22445400">00045</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> std::string&amp; <a class="code" href="../../d7/d6a/classAbsParameter.xhtml#a881d731fe387c785a76b6aad22445400" title="Getter for name of object.">GetName</a>(){
<a name="l00046"></a>00046     <span class="keywordflow">return</span> <a class="code" href="../../d7/d6a/classAbsParameter.xhtml#a1eaa1cd6f79b60be57c9b924eda0cad2" title="internal name of the parameter">name_</a>;
<a name="l00047"></a>00047   }
<a name="l00048"></a>00048 
<a name="l00050"></a><a class="code" href="../../d7/d6a/classAbsParameter.xhtml#a126b949117c9428eca256fb279e34a06">00050</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> <a class="code" href="../../d8/def/AbsParameter_8hpp.xhtml#a5c1a62d78971166ef74c26cf99527f8a">ParType</a> <a class="code" href="../../d7/d6a/classAbsParameter.xhtml#a126b949117c9428eca256fb279e34a06" title="Getter for type of object.">type</a>(){
<a name="l00051"></a>00051     <span class="keywordflow">return</span> <a class="code" href="../../d7/d6a/classAbsParameter.xhtml#a05225b008e34a284d5ffd65d0e479027" title="ParType enum for type of parameter.">type_</a>;
<a name="l00052"></a>00052   }
<a name="l00053"></a>00053 
<a name="l00055"></a>00055   <span class="keyword">virtual</span> <span class="keyword">const</span> std::string <a class="code" href="../../d7/d6a/classAbsParameter.xhtml#a6798bb427c8fb456c4caae1b1b132ab7" title="Getter for typename of object, to be defined by the actual implementation.">TypeName</a>()=0;
<a name="l00056"></a>00056 
<a name="l00057"></a>00057   <span class="comment">//Observer Pattern Functions</span>
<a name="l00058"></a>00058 
<a name="l00060"></a><a class="code" href="../../d7/d6a/classAbsParameter.xhtml#ae811fcec3165b341f11817196eba837f">00060</a>   <span class="keywordtype">void</span> <a class="code" href="../../d7/d6a/classAbsParameter.xhtml#ae811fcec3165b341f11817196eba837f" title="Attaches a new TreeNode as Observer.">Attach</a>(std::shared_ptr&lt;ParObserver&gt; newObserver){
<a name="l00061"></a>00061     <a class="code" href="../../d7/d6a/classAbsParameter.xhtml#abd724fca707acabfdf91b20739ce1e12" title="list of observers, e.g.">oberservingNodes</a>.push_back(newObserver);;
<a name="l00062"></a>00062   }
<a name="l00063"></a>00063 
<a name="l00065"></a><a class="code" href="../../d7/d6a/classAbsParameter.xhtml#a701f1791c5e45a5d20414836d5468826">00065</a>   <span class="keywordtype">void</span> <a class="code" href="../../d7/d6a/classAbsParameter.xhtml#a701f1791c5e45a5d20414836d5468826" title="Removes TreeNodes not needed as Observer anymore.">Detach</a>(std::shared_ptr&lt;ParObserver&gt; obsoleteObserver){
<a name="l00066"></a>00066     <a class="code" href="../../d7/d6a/classAbsParameter.xhtml#abd724fca707acabfdf91b20739ce1e12" title="list of observers, e.g.">oberservingNodes</a>.erase(std::remove(<a class="code" href="../../d7/d6a/classAbsParameter.xhtml#abd724fca707acabfdf91b20739ce1e12" title="list of observers, e.g.">oberservingNodes</a>.begin(), <a class="code" href="../../d7/d6a/classAbsParameter.xhtml#abd724fca707acabfdf91b20739ce1e12" title="list of observers, e.g.">oberservingNodes</a>.end(), obsoleteObserver), <a class="code" href="../../d7/d6a/classAbsParameter.xhtml#abd724fca707acabfdf91b20739ce1e12" title="list of observers, e.g.">oberservingNodes</a>.end());
<a name="l00067"></a>00067   }
<a name="l00068"></a>00068 
<a name="l00070"></a><a class="code" href="../../d7/d6a/classAbsParameter.xhtml#a9d8d907c87e67616f1fadf77475c650c">00070</a>   <span class="keywordtype">void</span> <a class="code" href="../../d7/d6a/classAbsParameter.xhtml#a9d8d907c87e67616f1fadf77475c650c" title="Notify all observing TreeNodes that parameter changed.">Notify</a>(){
<a name="l00071"></a>00071     <span class="keywordflow">for</span>(std::vector&lt;std::shared_ptr&lt;ParObserver&gt; &gt;::const_iterator iter = <a class="code" href="../../d7/d6a/classAbsParameter.xhtml#abd724fca707acabfdf91b20739ce1e12" title="list of observers, e.g.">oberservingNodes</a>.begin(); iter != <a class="code" href="../../d7/d6a/classAbsParameter.xhtml#abd724fca707acabfdf91b20739ce1e12" title="list of observers, e.g.">oberservingNodes</a>.end(); ++iter)
<a name="l00072"></a>00072     {
<a name="l00073"></a>00073         <span class="keywordflow">if</span>(*iter != 0)
<a name="l00074"></a>00074         {
<a name="l00075"></a>00075             (*iter)-&gt;Update();
<a name="l00076"></a>00076         }
<a name="l00077"></a>00077     }
<a name="l00078"></a>00078   }
<a name="l00079"></a>00079 
<a name="l00081"></a>00081   <span class="comment">//std::shared_ptr&lt;AbsParameter&gt; getptr() {</span>
<a name="l00082"></a>00082   <span class="comment">//    return shared_from_this();</span>
<a name="l00083"></a>00083   <span class="comment">//}</span>
<a name="l00084"></a>00084 
<a name="l00086"></a>00086 
<a name="l00091"></a><a class="code" href="../../d7/d6a/classAbsParameter.xhtml#a3b45a8d9bd0b00a09238f40ca421543a">00091</a>   <span class="keyword">friend</span> std::ostream&amp; operator&lt;&lt;( std::ostream&amp; out, std::shared_ptr&lt;AbsParameter&gt; b ){
<a name="l00092"></a>00092     <span class="keywordflow">return</span> out &lt;&lt; b-&gt;to_str();
<a name="l00093"></a>00093   }
<a name="l00094"></a>00094 
<a name="l00096"></a>00096 
<a name="l00101"></a><a class="code" href="../../d7/d6a/classAbsParameter.xhtml#a4f06c9d592310ad3b31b4fc8f13e0faf">00101</a>   <span class="keyword">friend</span> std::ostream&amp; <a class="code" href="../../d7/d6a/classAbsParameter.xhtml#a4f06c9d592310ad3b31b4fc8f13e0faf" title="friend function to stream parameter information to output">operator&lt;&lt;</a>( std::ostream&amp; out, <span class="keyword">const</span> <a class="code" href="../../d7/d6a/classAbsParameter.xhtml" title="Base class for internal parameter.">AbsParameter</a>&amp; b ){
<a name="l00102"></a>00102     <span class="keywordflow">return</span> out &lt;&lt; b.<a class="code" href="../../d7/d6a/classAbsParameter.xhtml#a155e74bf1c96ce8321ab65c6a003f868" title="A public function returning a string with parameter information.">to_str</a>();
<a name="l00103"></a>00103   }
<a name="l00104"></a>00104 
<a name="l00106"></a>00106 
<a name="l00113"></a><a class="code" href="../../d7/d6a/classAbsParameter.xhtml#a155e74bf1c96ce8321ab65c6a003f868">00113</a>   <span class="keyword">virtual</span> std::string <span class="keyword">const</span>&amp; <a class="code" href="../../d7/d6a/classAbsParameter.xhtml#a155e74bf1c96ce8321ab65c6a003f868" title="A public function returning a string with parameter information.">to_str</a>()<span class="keyword"> const</span>{
<a name="l00114"></a>00114     <span class="keywordflow">return</span> <a class="code" href="../../d7/d6a/classAbsParameter.xhtml#a65c954387c0ad30e8daf73fddb4b27db" title="Output string to print information.">out_</a>;
<a name="l00115"></a>00115   }
<a name="l00116"></a>00116 
<a name="l00118"></a>00118 
<a name="l00125"></a><a class="code" href="../../d7/d6a/classAbsParameter.xhtml#a68d85baeb9b1963a03795e4abf37db7a">00125</a>   <span class="keyword">virtual</span> std::string <span class="keyword">const</span>&amp; <a class="code" href="../../d7/d6a/classAbsParameter.xhtml#a68d85baeb9b1963a03795e4abf37db7a" title="A public function returning a string with parameter value.">val_to_str</a>()<span class="keyword"> const</span>{
<a name="l00126"></a>00126     <span class="keywordflow">return</span> <a class="code" href="../../d7/d6a/classAbsParameter.xhtml#ac9bd4b866495c7770e34cad366ebd0e2" title="Output string to print only value.">outVal_</a>;
<a name="l00127"></a>00127   }
<a name="l00128"></a>00128 
<a name="l00129"></a>00129 <span class="keyword">protected</span>:
<a name="l00130"></a><a class="code" href="../../d7/d6a/classAbsParameter.xhtml#a65c954387c0ad30e8daf73fddb4b27db">00130</a>   std::string <a class="code" href="../../d7/d6a/classAbsParameter.xhtml#a65c954387c0ad30e8daf73fddb4b27db" title="Output string to print information.">out_</a>; 
<a name="l00131"></a><a class="code" href="../../d7/d6a/classAbsParameter.xhtml#ac9bd4b866495c7770e34cad366ebd0e2">00131</a>   std::string <a class="code" href="../../d7/d6a/classAbsParameter.xhtml#ac9bd4b866495c7770e34cad366ebd0e2" title="Output string to print only value.">outVal_</a>; 
<a name="l00132"></a><a class="code" href="../../d7/d6a/classAbsParameter.xhtml#a1eaa1cd6f79b60be57c9b924eda0cad2">00132</a>   std::string <a class="code" href="../../d7/d6a/classAbsParameter.xhtml#a1eaa1cd6f79b60be57c9b924eda0cad2" title="internal name of the parameter">name_</a>; 
<a name="l00133"></a><a class="code" href="../../d7/d6a/classAbsParameter.xhtml#a05225b008e34a284d5ffd65d0e479027">00133</a>   <a class="code" href="../../d8/def/AbsParameter_8hpp.xhtml#a5c1a62d78971166ef74c26cf99527f8a">ParType</a> <a class="code" href="../../d7/d6a/classAbsParameter.xhtml#a05225b008e34a284d5ffd65d0e479027" title="ParType enum for type of parameter.">type_</a>; 
<a name="l00135"></a><a class="code" href="../../d7/d6a/classAbsParameter.xhtml#abd724fca707acabfdf91b20739ce1e12">00135</a>   std::vector&lt;std::shared_ptr&lt;ParObserver&gt; &gt; <a class="code" href="../../d7/d6a/classAbsParameter.xhtml#abd724fca707acabfdf91b20739ce1e12" title="list of observers, e.g.">oberservingNodes</a>; 
<a name="l00137"></a>00137 
<a name="l00138"></a>00138   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../d7/d6a/classAbsParameter.xhtml#a0c98ee88d1ccfbb6db5e7b02c96b2934" title="Interface to fill output string, to be implemented by parameter implementations.">make_str</a>() =0;
<a name="l00139"></a>00139 };
<a name="l00140"></a>00140 
<a name="l00141"></a>00141 <span class="preprocessor">#endif</span>
</pre></div></div>
</div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<hr class="footer"/><address class="footer"><small>Generated on Wed Dec 4 2013 for ComPWA by&#160;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.7.4 </small></address>
</body>
</html>
