<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>ComPWA: Core/FunctionTree.hpp Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body onload='searchBox.OnSelectItem(0);'>
<!-- Generated by Doxygen 1.7.4 -->
<script type="text/javascript"><!--
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
--></script>
<div id="top">
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">ComPWA</div>
   <div id="projectbrief">Common Partial-Wave-Analysis Framework</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="../../index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="../../namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="../../annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="../../files.xhtml"><span>Files</span></a></li>
      <li id="searchli">
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="../../search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="../../search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="../../files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="../../globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<div class="header">
  <div class="headertitle">
<div class="title">Core/FunctionTree.hpp</div>  </div>
</div>
<div class="contents">
<a href="../../da/db2/FunctionTree_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">//-------------------------------------------------------------------------------</span>
<a name="l00002"></a>00002 <span class="comment">// Copyright (c) 2013 Mathias Michel.</span>
<a name="l00003"></a>00003 <span class="comment">//</span>
<a name="l00004"></a>00004 <span class="comment">// This file is part of ComPWA, check license.txt for details</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">// All rights reserved. This program and the accompanying materials</span>
<a name="l00007"></a>00007 <span class="comment">// are made available under the terms of the GNU Public License v3.0</span>
<a name="l00008"></a>00008 <span class="comment">// which accompanies this distribution, and is available at</span>
<a name="l00009"></a>00009 <span class="comment">// http://www.gnu.org/licenses/gpl.html</span>
<a name="l00010"></a>00010 <span class="comment">//</span>
<a name="l00011"></a>00011 <span class="comment">// Contributors:</span>
<a name="l00012"></a>00012 <span class="comment">//     Mathias Michel - initial API and implementation</span>
<a name="l00013"></a>00013 <span class="comment">//-------------------------------------------------------------------------------</span>
<a name="l00015"></a>00015 <span class="comment"></span>
<a name="l00022"></a>00022 <span class="preprocessor">#ifndef _FUNCTIONTREE_HPP_</span>
<a name="l00023"></a>00023 <span class="preprocessor"></span><span class="preprocessor">#define _FUNCTIONTREE_HPP_</span>
<a name="l00024"></a>00024 <span class="preprocessor"></span>
<a name="l00025"></a>00025 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &lt;memory&gt;</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;map&gt;</span>
<a name="l00029"></a>00029 
<a name="l00030"></a>00030 <span class="preprocessor">#include &quot;<a class="code" href="../../dc/d66/Functions_8hpp.xhtml" title="This file contains Functions implementing the Strategy interface so they can be used inside a node of...">Core/Functions.hpp</a>&quot;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &quot;<a class="code" href="../../df/d5a/TreeNode_8hpp.xhtml" title="This class acts as a container for a parameter in a function tree.">Core/TreeNode.hpp</a>&quot;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &quot;<a class="code" href="../../d8/def/AbsParameter_8hpp.xhtml" title="This class defines the internal container of a parameter.">Core/AbsParameter.hpp</a>&quot;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &quot;<a class="code" href="../../db/dce/Parameter_8hpp.xhtml" title="This class implements some internal container of parameters.">Core/Parameter.hpp</a>&quot;</span>
<a name="l00034"></a>00034 
<a name="l00035"></a>00035 <span class="preprocessor">#include &quot;<a class="code" href="../../de/d1f/ControlParameter_8hpp.xhtml" title="This class provides the interface for the optimizer module to access the data.">Optimizer/ControlParameter.hpp</a>&quot;</span>
<a name="l00036"></a>00036 
<a name="l00037"></a><a class="code" href="../../db/d4e/classFunctionTree.xhtml">00037</a> <span class="keyword">class </span><a class="code" href="../../db/d4e/classFunctionTree.xhtml" title="FunctionTree for the actual Optimization.">FunctionTree</a> <span class="comment">//: public ControlParametr</span>
<a name="l00038"></a>00038 {
<a name="l00039"></a>00039 <span class="keyword">public</span>:
<a name="l00041"></a>00041 
<a name="l00044"></a><a class="code" href="../../db/d4e/classFunctionTree.xhtml#abbed10393af549b8c47eeda2a41ee050">00044</a>   <a class="code" href="../../db/d4e/classFunctionTree.xhtml#abbed10393af549b8c47eeda2a41ee050" title="Standard constructor.">FunctionTree</a>(){
<a name="l00045"></a>00045 
<a name="l00046"></a>00046   }
<a name="l00047"></a>00047 
<a name="l00049"></a>00049 
<a name="l00053"></a><a class="code" href="../../db/d4e/classFunctionTree.xhtml#abdfab0cf52a8d1a41c07366056b682d8">00053</a>   <a class="code" href="../../db/d4e/classFunctionTree.xhtml#abdfab0cf52a8d1a41c07366056b682d8" title="Standard constructor.">FunctionTree</a>(std::shared_ptr&lt;TreeNode&gt; <a class="code" href="../../db/d4e/classFunctionTree.xhtml#a8102d6ce16e86b404cc2add774280e98" title="return the head of the tree">head</a>):<a class="code" href="../../db/d4e/classFunctionTree.xhtml#af3e16cfb83914a900d8e9188066fc1f1" title="the head node storing the absolute result">head_</a>(head){
<a name="l00054"></a>00054     <a class="code" href="../../db/d4e/classFunctionTree.xhtml#abddde6e92373980c5fb3212dde676ac3" title="map to store the nodes">nodes_</a>.insert(std::pair&lt;std::string, std::shared_ptr&lt;TreeNode&gt; &gt;(head-&gt;getName(),<a class="code" href="../../db/d4e/classFunctionTree.xhtml#a8102d6ce16e86b404cc2add774280e98" title="return the head of the tree">head</a>));
<a name="l00055"></a>00055   }
<a name="l00056"></a>00056 
<a name="l00058"></a><a class="code" href="../../db/d4e/classFunctionTree.xhtml#af18eb4b2af7fc935bbdddea2664b15b9">00058</a>   <span class="keyword">virtual</span> <a class="code" href="../../db/d4e/classFunctionTree.xhtml#af18eb4b2af7fc935bbdddea2664b15b9" title="Destructor.">~FunctionTree</a>(){
<a name="l00059"></a>00059     <span class="comment">//;</span>
<a name="l00060"></a>00060   }
<a name="l00061"></a>00061 
<a name="l00063"></a>00063 
<a name="l00068"></a><a class="code" href="../../db/d4e/classFunctionTree.xhtml#ab69fc24891172146a80844adafdec53d">00068</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../db/d4e/classFunctionTree.xhtml#ab69fc24891172146a80844adafdec53d" title="Add node to FcnTree.">addNode</a>(std::shared_ptr&lt;TreeNode&gt; newNode){
<a name="l00069"></a>00069     <span class="comment">//TODO: check existence, throw exception</span>
<a name="l00070"></a>00070     <a class="code" href="../../db/d4e/classFunctionTree.xhtml#abddde6e92373980c5fb3212dde676ac3" title="map to store the nodes">nodes_</a>.insert(std::pair&lt;std::string, std::shared_ptr&lt;TreeNode&gt; &gt;(newNode-&gt;getName(),newNode));
<a name="l00071"></a>00071     newNode-&gt;linkParents();
<a name="l00072"></a>00072   }
<a name="l00073"></a>00073 
<a name="l00075"></a>00075 
<a name="l00081"></a><a class="code" href="../../db/d4e/classFunctionTree.xhtml#a1c4a0a6bedded50b6f309473f2107eb7">00081</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../db/d4e/classFunctionTree.xhtml#a1c4a0a6bedded50b6f309473f2107eb7" title="Create head node of FcnTree.">createHead</a>(<span class="keyword">const</span> std::string&amp; name, std::shared_ptr&lt;Strategy&gt; strat){
<a name="l00082"></a>00082     <span class="comment">//TODO: (type of) parameter from strategy!</span>
<a name="l00083"></a>00083     <span class="comment">//std::shared_ptr&lt;AbsParameter&gt; inter = strat-&gt;GetResultContainer();</span>
<a name="l00084"></a>00084 
<a name="l00085"></a>00085     std::shared_ptr&lt;DoubleParameter&gt; inter(<span class="keyword">new</span> <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml" title="Implementations for internal parameter.">DoubleParameter</a>(<span class="stringliteral">&quot;par&quot;</span>+name,0.));
<a name="l00086"></a>00086     std::shared_ptr&lt;TreeNode&gt; newNode(<span class="keyword">new</span> <a class="code" href="../../da/d83/classTreeNode.xhtml" title="TreeNode is the interface for elements of the FunctionTree.">TreeNode</a>(name, inter, strat, std::shared_ptr&lt;TreeNode&gt;()));
<a name="l00087"></a>00087     <a class="code" href="../../db/d4e/classFunctionTree.xhtml#af3e16cfb83914a900d8e9188066fc1f1" title="the head node storing the absolute result">head_</a> = newNode;
<a name="l00088"></a>00088     <a class="code" href="../../db/d4e/classFunctionTree.xhtml#abddde6e92373980c5fb3212dde676ac3" title="map to store the nodes">nodes_</a>.insert(std::pair&lt;std::string, std::shared_ptr&lt;TreeNode&gt; &gt;(name,newNode));
<a name="l00089"></a>00089   }
<a name="l00090"></a>00090 
<a name="l00092"></a>00092 
<a name="l00100"></a><a class="code" href="../../db/d4e/classFunctionTree.xhtml#a99747122bc4c10a5d23404fe675e2db8">00100</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../db/d4e/classFunctionTree.xhtml#a99747122bc4c10a5d23404fe675e2db8" title="Create a node for the FcnTree.">createNode</a>(<span class="keyword">const</span> std::string&amp; name, std::shared_ptr&lt;Strategy&gt; strat, std::string parent){
<a name="l00101"></a>00101     <span class="comment">//TODO: (type of) parameter from strategy!</span>
<a name="l00102"></a>00102     <span class="comment">//std::shared_ptr&lt;AbsParameter&gt; inter = strat-&gt;GetResultContainer();</span>
<a name="l00103"></a>00103 
<a name="l00104"></a>00104     std::shared_ptr&lt;DoubleParameter&gt; inter(<span class="keyword">new</span> <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml" title="Implementations for internal parameter.">DoubleParameter</a>(<span class="stringliteral">&quot;par&quot;</span>+name,0.));
<a name="l00105"></a>00105     std::shared_ptr&lt;TreeNode&gt; parentNode = <a class="code" href="../../db/d4e/classFunctionTree.xhtml#abddde6e92373980c5fb3212dde676ac3" title="map to store the nodes">nodes_</a>.at(parent);
<a name="l00106"></a>00106     std::shared_ptr&lt;TreeNode&gt; newNode(<span class="keyword">new</span> <a class="code" href="../../da/d83/classTreeNode.xhtml" title="TreeNode is the interface for elements of the FunctionTree.">TreeNode</a>(name, inter, strat, parentNode));
<a name="l00107"></a>00107     <a class="code" href="../../db/d4e/classFunctionTree.xhtml#abddde6e92373980c5fb3212dde676ac3" title="map to store the nodes">nodes_</a>.insert(std::pair&lt;std::string, std::shared_ptr&lt;TreeNode&gt; &gt;(name,newNode));
<a name="l00108"></a>00108     newNode-&gt;linkParents();
<a name="l00109"></a>00109   }
<a name="l00110"></a>00110 
<a name="l00112"></a>00112 
<a name="l00120"></a><a class="code" href="../../db/d4e/classFunctionTree.xhtml#a1e6e54ba1b97b3fd9f1169fababcb519">00120</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../db/d4e/classFunctionTree.xhtml#a1e6e54ba1b97b3fd9f1169fababcb519" title="Create a leaf for the FcnTree.">createLeaf</a>(<span class="keyword">const</span> std::string name, <span class="keyword">const</span> <span class="keywordtype">double</span> extPar, std::string parent){
<a name="l00121"></a>00121     std::shared_ptr&lt;TreeNode&gt; parentNode = <a class="code" href="../../db/d4e/classFunctionTree.xhtml#abddde6e92373980c5fb3212dde676ac3" title="map to store the nodes">nodes_</a>.at(parent);
<a name="l00122"></a>00122     std::shared_ptr&lt;TreeNode&gt; leaf;
<a name="l00123"></a>00123     std::shared_ptr&lt;DoubleParameter&gt; staticVal(<span class="keyword">new</span> <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml" title="Implementations for internal parameter.">DoubleParameter</a>(<span class="stringliteral">&quot;ParOfNode_&quot;</span>+name,extPar));
<a name="l00124"></a>00124 
<a name="l00125"></a>00125     <span class="comment">//check if Leaf already exists</span>
<a name="l00126"></a>00126     <span class="keywordtype">bool</span> exists = <span class="keyword">true</span>;
<a name="l00127"></a>00127     <span class="keywordflow">if</span> ( <a class="code" href="../../db/d4e/classFunctionTree.xhtml#abddde6e92373980c5fb3212dde676ac3" title="map to store the nodes">nodes_</a>.find( name ) == <a class="code" href="../../db/d4e/classFunctionTree.xhtml#abddde6e92373980c5fb3212dde676ac3" title="map to store the nodes">nodes_</a>.end() ) {
<a name="l00128"></a>00128       exists=<span class="keyword">false</span>;
<a name="l00129"></a>00129     } <span class="keywordflow">else</span> {
<a name="l00130"></a>00130       leaf = <a class="code" href="../../db/d4e/classFunctionTree.xhtml#abddde6e92373980c5fb3212dde676ac3" title="map to store the nodes">nodes_</a>.at(name);
<a name="l00131"></a>00131     }
<a name="l00132"></a>00132 
<a name="l00133"></a>00133     <span class="comment">//setup connections</span>
<a name="l00134"></a>00134     <span class="keywordflow">if</span>(exists){
<a name="l00135"></a>00135       leaf-&gt;addParent(parentNode);
<a name="l00136"></a>00136       <span class="comment">//TODO: check if also static?</span>
<a name="l00137"></a>00137     }<span class="keywordflow">else</span>{
<a name="l00138"></a>00138       leaf = std::shared_ptr&lt;TreeNode&gt;(<span class="keyword">new</span> <a class="code" href="../../da/d83/classTreeNode.xhtml" title="TreeNode is the interface for elements of the FunctionTree.">TreeNode</a>(name, staticVal, std::shared_ptr&lt;Strategy&gt;(), parentNode));
<a name="l00139"></a>00139       <a class="code" href="../../db/d4e/classFunctionTree.xhtml#abddde6e92373980c5fb3212dde676ac3" title="map to store the nodes">nodes_</a>.insert(std::pair&lt;std::string, std::shared_ptr&lt;TreeNode&gt; &gt;(name,leaf));
<a name="l00140"></a>00140       leaf-&gt;linkParents();
<a name="l00141"></a>00141     }
<a name="l00142"></a>00142   }
<a name="l00143"></a>00143 
<a name="l00145"></a>00145 
<a name="l00154"></a><a class="code" href="../../db/d4e/classFunctionTree.xhtml#a44029cd86a372185320cc27bf529271a">00154</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../db/d4e/classFunctionTree.xhtml#a44029cd86a372185320cc27bf529271a" title="Create a leaf for the FcnTree.">createLeaf</a>(<span class="keyword">const</span> std::string name, std::shared_ptr&lt;AbsParameter&gt; extPar, std::string parent){
<a name="l00155"></a>00155     std::shared_ptr&lt;TreeNode&gt; parentNode = <a class="code" href="../../db/d4e/classFunctionTree.xhtml#abddde6e92373980c5fb3212dde676ac3" title="map to store the nodes">nodes_</a>.at(parent);
<a name="l00156"></a>00156     std::shared_ptr&lt;TreeNode&gt; leaf;
<a name="l00157"></a>00157 
<a name="l00158"></a>00158     <span class="comment">//check if Leaf already exists</span>
<a name="l00159"></a>00159     <span class="keywordtype">bool</span> exists = <span class="keyword">true</span>;
<a name="l00160"></a>00160     <span class="keywordflow">if</span> ( <a class="code" href="../../db/d4e/classFunctionTree.xhtml#abddde6e92373980c5fb3212dde676ac3" title="map to store the nodes">nodes_</a>.find( name ) == <a class="code" href="../../db/d4e/classFunctionTree.xhtml#abddde6e92373980c5fb3212dde676ac3" title="map to store the nodes">nodes_</a>.end() ) {
<a name="l00161"></a>00161       exists=<span class="keyword">false</span>;
<a name="l00162"></a>00162     } <span class="keywordflow">else</span> {
<a name="l00163"></a>00163       leaf = <a class="code" href="../../db/d4e/classFunctionTree.xhtml#abddde6e92373980c5fb3212dde676ac3" title="map to store the nodes">nodes_</a>.at(name);
<a name="l00164"></a>00164     }
<a name="l00165"></a>00165 
<a name="l00166"></a>00166     <span class="comment">//setup connections</span>
<a name="l00167"></a>00167     <span class="keywordflow">if</span>(exists){
<a name="l00168"></a>00168       leaf-&gt;addParent(parentNode);
<a name="l00169"></a>00169     }<span class="keywordflow">else</span>{
<a name="l00170"></a>00170       leaf = std::shared_ptr&lt;TreeNode&gt;(<span class="keyword">new</span> <a class="code" href="../../da/d83/classTreeNode.xhtml" title="TreeNode is the interface for elements of the FunctionTree.">TreeNode</a>(name, extPar, std::shared_ptr&lt;Strategy&gt;() , parentNode));
<a name="l00171"></a>00171       <a class="code" href="../../db/d4e/classFunctionTree.xhtml#abddde6e92373980c5fb3212dde676ac3" title="map to store the nodes">nodes_</a>.insert(std::pair&lt;std::string, std::shared_ptr&lt;TreeNode&gt; &gt;(name,leaf));
<a name="l00172"></a>00172       leaf-&gt;linkParents();
<a name="l00173"></a>00173       extPar-&gt;Attach(leaf);
<a name="l00174"></a>00174     }
<a name="l00175"></a>00175   }
<a name="l00176"></a>00176 
<a name="l00178"></a>00178 
<a name="l00182"></a><a class="code" href="../../db/d4e/classFunctionTree.xhtml#a8102d6ce16e86b404cc2add774280e98">00182</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> std::shared_ptr&lt;TreeNode&gt; <a class="code" href="../../db/d4e/classFunctionTree.xhtml#a8102d6ce16e86b404cc2add774280e98" title="return the head of the tree">head</a>()<span class="keyword"> const </span>{
<a name="l00183"></a>00183     <span class="keywordflow">return</span> <a class="code" href="../../db/d4e/classFunctionTree.xhtml#af3e16cfb83914a900d8e9188066fc1f1" title="the head node storing the absolute result">head_</a>;
<a name="l00184"></a>00184     <span class="comment">//TODO: return double? ;</span>
<a name="l00185"></a>00185   }
<a name="l00186"></a>00186 
<a name="l00187"></a>00187  <span class="comment">/* virtual double controlParameter(ParameterList&amp; minPar){</span>
<a name="l00188"></a>00188 <span class="comment">    ParType resultType = head_-&gt;getValue()-&gt;type();</span>
<a name="l00189"></a>00189 <span class="comment">    switch(par-&gt;type())</span>
<a name="l00190"></a>00190 <span class="comment">      {</span>
<a name="l00191"></a>00191 <span class="comment">      case ParType::COMPLEX: //TODO</span>
<a name="l00192"></a>00192 <span class="comment">        //cout &lt;&lt; &quot;Easy\n&quot;;</span>
<a name="l00193"></a>00193 <span class="comment">        break;</span>
<a name="l00194"></a>00194 <span class="comment">      case ParType::DOUBLE:{</span>
<a name="l00195"></a>00195 <span class="comment">        DoubleParameter* tmp = (DoubleParameter*) par.get(); //TODO: saver</span>
<a name="l00196"></a>00196 <span class="comment">        return tmp-&gt;GetValue();</span>
<a name="l00197"></a>00197 <span class="comment">        break;}</span>
<a name="l00198"></a>00198 <span class="comment">      case ParType::INTEGER:{</span>
<a name="l00199"></a>00199 <span class="comment">        IntegerParameter* tmp = (IntegerParameter*) par.get();</span>
<a name="l00200"></a>00200 <span class="comment">        return tmp-&gt;GetValue();</span>
<a name="l00201"></a>00201 <span class="comment">        break;}</span>
<a name="l00202"></a>00202 <span class="comment">      case ParType::BOOL:{</span>
<a name="l00203"></a>00203 <span class="comment">        BoolParameter* tmp = (BoolParameter*) par.get();</span>
<a name="l00204"></a>00204 <span class="comment">        return tmp-&gt;GetValue();</span>
<a name="l00205"></a>00205 <span class="comment">        break;}</span>
<a name="l00206"></a>00206 <span class="comment">      default:{</span>
<a name="l00207"></a>00207 <span class="comment">        //TODO exception</span>
<a name="l00208"></a>00208 <span class="comment">        //cout &lt;&lt; &quot;Invalid Selection\n&quot;;</span>
<a name="l00209"></a>00209 <span class="comment">        break;}</span>
<a name="l00210"></a>00210 <span class="comment">      }</span>
<a name="l00211"></a>00211 <span class="comment">    return 0;</span>
<a name="l00212"></a>00212 <span class="comment">  }*/</span>
<a name="l00213"></a>00213 
<a name="l00214"></a><a class="code" href="../../db/d4e/classFunctionTree.xhtml#a5fd9dddbd650d471f0950d8efaede3a1">00214</a>   <span class="keywordtype">void</span> <a class="code" href="../../db/d4e/classFunctionTree.xhtml#a5fd9dddbd650d471f0950d8efaede3a1">recalculate</a>(){
<a name="l00215"></a>00215     <a class="code" href="../../db/d4e/classFunctionTree.xhtml#af3e16cfb83914a900d8e9188066fc1f1" title="the head node storing the absolute result">head_</a>-&gt;recalculate();
<a name="l00216"></a>00216   }
<a name="l00217"></a>00217 
<a name="l00219"></a>00219 
<a name="l00224"></a><a class="code" href="../../db/d4e/classFunctionTree.xhtml#adb151ae77c2f66aaa19125fd16dc7d96">00224</a>   <span class="keyword">friend</span> std::ostream&amp; <a class="code" href="../../db/d4e/classFunctionTree.xhtml#adb151ae77c2f66aaa19125fd16dc7d96" title="friend function to stream parameter information to output">operator&lt;&lt;</a>( std::ostream&amp; out, <span class="keyword">const</span> <a class="code" href="../../db/d4e/classFunctionTree.xhtml" title="FunctionTree for the actual Optimization.">FunctionTree</a>&amp; b ){
<a name="l00225"></a>00225     <span class="keywordflow">return</span> out &lt;&lt; b.<a class="code" href="../../db/d4e/classFunctionTree.xhtml#a8102d6ce16e86b404cc2add774280e98" title="return the head of the tree">head</a>();
<a name="l00226"></a>00226   }
<a name="l00227"></a>00227 
<a name="l00229"></a>00229 
<a name="l00236"></a><a class="code" href="../../db/d4e/classFunctionTree.xhtml#a1600c99126915d65e1584ebe848b545c">00236</a>   <span class="keyword">friend</span> std::ostream&amp; operator&lt;&lt;( std::ostream&amp; out, std::shared_ptr&lt;FunctionTree&gt; b ){
<a name="l00237"></a>00237     <span class="keywordflow">return</span> out &lt;&lt; b-&gt;head();
<a name="l00238"></a>00238   }
<a name="l00239"></a>00239 
<a name="l00240"></a>00240 
<a name="l00241"></a>00241 <span class="keyword">protected</span>:
<a name="l00242"></a><a class="code" href="../../db/d4e/classFunctionTree.xhtml#af3e16cfb83914a900d8e9188066fc1f1">00242</a>   std::shared_ptr&lt;TreeNode&gt; <a class="code" href="../../db/d4e/classFunctionTree.xhtml#af3e16cfb83914a900d8e9188066fc1f1" title="the head node storing the absolute result">head_</a>; 
<a name="l00243"></a><a class="code" href="../../db/d4e/classFunctionTree.xhtml#abddde6e92373980c5fb3212dde676ac3">00243</a>   std::map&lt;std::string, std::shared_ptr&lt;TreeNode&gt; &gt; <a class="code" href="../../db/d4e/classFunctionTree.xhtml#abddde6e92373980c5fb3212dde676ac3" title="map to store the nodes">nodes_</a>; 
<a name="l00245"></a>00245 };
<a name="l00246"></a>00246 
<a name="l00247"></a>00247 <span class="preprocessor">#endif </span><span class="comment">/* _FUNCTIONTREE_HPP_ */</span>
</pre></div></div>
</div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<hr class="footer"/><address class="footer"><small>Generated on Mon Dec 16 2013 for ComPWA by&#160;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.7.4 </small></address>
</body>
</html>
