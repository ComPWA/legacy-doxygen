<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>ComPWA: Core/Parameter.hpp Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body onload='searchBox.OnSelectItem(0);'>
<!-- Generated by Doxygen 1.7.4 -->
<script type="text/javascript"><!--
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
--></script>
<div id="top">
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">ComPWA</div>
   <div id="projectbrief">Common Partial-Wave-Analysis Framework</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="../../index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="../../namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="../../annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="../../files.xhtml"><span>Files</span></a></li>
      <li id="searchli">
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="../../search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="../../search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="../../files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="../../globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<div class="header">
  <div class="headertitle">
<div class="title">Core/Parameter.hpp</div>  </div>
</div>
<div class="contents">
<a href="../../db/dce/Parameter_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">//-------------------------------------------------------------------------------</span>
<a name="l00002"></a>00002 <span class="comment">// Copyright (c) 2013 Mathias Michel.</span>
<a name="l00003"></a>00003 <span class="comment">//</span>
<a name="l00004"></a>00004 <span class="comment">// This file is part of ComPWA, check license.txt for details</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">// All rights reserved. This program and the accompanying materials</span>
<a name="l00007"></a>00007 <span class="comment">// are made available under the terms of the GNU Public License v3.0</span>
<a name="l00008"></a>00008 <span class="comment">// which accompanies this distribution, and is available at</span>
<a name="l00009"></a>00009 <span class="comment">// http://www.gnu.org/licenses/gpl.html</span>
<a name="l00010"></a>00010 <span class="comment">//</span>
<a name="l00011"></a>00011 <span class="comment">// Contributors:</span>
<a name="l00012"></a>00012 <span class="comment">//     Mathias Michel - initial API and implementation</span>
<a name="l00013"></a>00013 <span class="comment">//-------------------------------------------------------------------------------</span>
<a name="l00015"></a>00015 <span class="comment"></span>
<a name="l00023"></a>00023 <span class="preprocessor">#ifndef _PARAMETER_HPP_</span>
<a name="l00024"></a>00024 <span class="preprocessor"></span><span class="preprocessor">#define _PARAMETER_HPP_</span>
<a name="l00025"></a>00025 <span class="preprocessor"></span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &lt;iostream&gt;</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;sstream&gt;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;complex&gt;</span>
<a name="l00030"></a>00030 
<a name="l00031"></a>00031 <span class="preprocessor">#include &quot;<a class="code" href="../../d8/def/AbsParameter_8hpp.xhtml" title="This class defines the internal container of a parameter.">Core/AbsParameter.hpp</a>&quot;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &quot;<a class="code" href="../../d2/de9/Exceptions_8hpp.xhtml" title="This class defines the ComPWA exception base-class and provides a set of standard exceptions...">Core/Exceptions.hpp</a>&quot;</span>
<a name="l00033"></a>00033 
<a name="l00034"></a><a class="code" href="../../d5/d65/classComplexParameter.xhtml">00034</a> <span class="keyword">class </span><a class="code" href="../../d5/d65/classComplexParameter.xhtml">ComplexParameter</a> : <span class="keyword">public</span> <a class="code" href="../../d7/d6a/classAbsParameter.xhtml" title="Base class for internal parameter.">AbsParameter</a>
<a name="l00035"></a>00035 {
<a name="l00036"></a>00036 
<a name="l00037"></a>00037 <span class="keyword">public</span>:
<a name="l00038"></a>00038 
<a name="l00040"></a>00040 
<a name="l00046"></a><a class="code" href="../../d5/d65/classComplexParameter.xhtml#a6871ed44271e647014943736539468a6">00046</a>   <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a6871ed44271e647014943736539468a6" title="Standard constructor without information.">ComplexParameter</a>(std::string inName):<a class="code" href="../../d7/d6a/classAbsParameter.xhtml" title="Base class for internal parameter.">AbsParameter</a>(inName,<a class="code" href="../../d8/def/AbsParameter_8hpp.xhtml#a5c1a62d78971166ef74c26cf99527f8a">ParType</a>::<a class="code" href="../../d8/def/AbsParameter_8hpp.xhtml#a5c1a62d78971166ef74c26cf99527f8aa5374e1234e4d55af346d6ae6263ad573">COMPLEX</a>),<a class="code" href="../../d5/d65/classComplexParameter.xhtml#a34365e5cc73c633507eeabada8340dd1">val_</a>(0.,0.),<a class="code" href="../../d5/d65/classComplexParameter.xhtml#a4d7ea1c8e771ae2f5b37cf2fb59efbc5">min_</a>(0.,0.),<a class="code" href="../../d5/d65/classComplexParameter.xhtml#a6e6863770b43cd304500046be87c88ad">max_</a>(0.,0.),<a class="code" href="../../d5/d65/classComplexParameter.xhtml#a09d03270b9de1f0bd6b767588c2c73c5" title="Containers of parameter information.">err_</a>(0.,0.) {
<a name="l00047"></a>00047      <a class="code" href="../../d5/d65/classComplexParameter.xhtml#aedc12d950086c0c6e7f428b0e4fe2db9" title="Are valid bounds defined for this parameter?">bounds_</a>= <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a3a4f2aa9e7641de68e9918db62b9ed43" title="Do you want to restrict your parameter?">usebounds_</a> = <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a198010c032eccaa7157ac20c7ae25da7" title="Is an error defined for this parameter?">error_</a> = <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a28006c2bc7313d118dd3c627b69c4023" title="Do you want to keep parameter fixed?">fixed_</a> = <span class="keyword">false</span>;
<a name="l00048"></a>00048      <a class="code" href="../../d5/d65/classComplexParameter.xhtml#af99cc8d55f96b1a61c36f3940193d533" title="A protected function which creates an output string for printing.">make_str</a>();
<a name="l00049"></a>00049    }
<a name="l00050"></a>00050 
<a name="l00052"></a>00052 
<a name="l00059"></a><a class="code" href="../../d5/d65/classComplexParameter.xhtml#ad423947bdb6b14d4318d513ea1c6cf73">00059</a>   <a class="code" href="../../d5/d65/classComplexParameter.xhtml#ad423947bdb6b14d4318d513ea1c6cf73" title="Standard constructor with a value.">ComplexParameter</a>(std::string inName, <span class="keyword">const</span> std::complex&lt;double&gt; value):<a class="code" href="../../d7/d6a/classAbsParameter.xhtml" title="Base class for internal parameter.">AbsParameter</a>(inName,<a class="code" href="../../d8/def/AbsParameter_8hpp.xhtml#a5c1a62d78971166ef74c26cf99527f8a">ParType</a>::<a class="code" href="../../d8/def/AbsParameter_8hpp.xhtml#a5c1a62d78971166ef74c26cf99527f8aa5374e1234e4d55af346d6ae6263ad573">COMPLEX</a>),<a class="code" href="../../d5/d65/classComplexParameter.xhtml#a34365e5cc73c633507eeabada8340dd1">val_</a>(value),<a class="code" href="../../d5/d65/classComplexParameter.xhtml#a4d7ea1c8e771ae2f5b37cf2fb59efbc5">min_</a>(0),<a class="code" href="../../d5/d65/classComplexParameter.xhtml#a6e6863770b43cd304500046be87c88ad">max_</a>(0),<a class="code" href="../../d5/d65/classComplexParameter.xhtml#a09d03270b9de1f0bd6b767588c2c73c5" title="Containers of parameter information.">err_</a>(0){
<a name="l00060"></a>00060      <a class="code" href="../../d5/d65/classComplexParameter.xhtml#aedc12d950086c0c6e7f428b0e4fe2db9" title="Are valid bounds defined for this parameter?">bounds_</a>= <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a3a4f2aa9e7641de68e9918db62b9ed43" title="Do you want to restrict your parameter?">usebounds_</a> = <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a198010c032eccaa7157ac20c7ae25da7" title="Is an error defined for this parameter?">error_</a> = <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a28006c2bc7313d118dd3c627b69c4023" title="Do you want to keep parameter fixed?">fixed_</a> = <span class="keyword">false</span>;
<a name="l00061"></a>00061      <a class="code" href="../../d5/d65/classComplexParameter.xhtml#af99cc8d55f96b1a61c36f3940193d533" title="A protected function which creates an output string for printing.">make_str</a>();
<a name="l00062"></a>00062    }
<a name="l00063"></a>00063 
<a name="l00065"></a>00065 
<a name="l00073"></a><a class="code" href="../../d5/d65/classComplexParameter.xhtml#ab53230098d0d04118c3b59843aa9bd84">00073</a>   <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a6871ed44271e647014943736539468a6" title="Standard constructor without information.">ComplexParameter</a>(std::string inName, <span class="keyword">const</span> std::complex&lt;double&gt; value, <span class="keyword">const</span> std::complex&lt;double&gt; error)
<a name="l00074"></a>00074    :<a class="code" href="../../d7/d6a/classAbsParameter.xhtml" title="Base class for internal parameter.">AbsParameter</a>(inName,<a class="code" href="../../d8/def/AbsParameter_8hpp.xhtml#a5c1a62d78971166ef74c26cf99527f8a">ParType</a>::<a class="code" href="../../d8/def/AbsParameter_8hpp.xhtml#a5c1a62d78971166ef74c26cf99527f8aa5374e1234e4d55af346d6ae6263ad573">COMPLEX</a>),<a class="code" href="../../d5/d65/classComplexParameter.xhtml#a34365e5cc73c633507eeabada8340dd1">val_</a>(value),<a class="code" href="../../d5/d65/classComplexParameter.xhtml#a4d7ea1c8e771ae2f5b37cf2fb59efbc5">min_</a>(0),<a class="code" href="../../d5/d65/classComplexParameter.xhtml#a6e6863770b43cd304500046be87c88ad">max_</a>(0),<a class="code" href="../../d5/d65/classComplexParameter.xhtml#a09d03270b9de1f0bd6b767588c2c73c5" title="Containers of parameter information.">err_</a>(error){
<a name="l00075"></a>00075      <a class="code" href="../../d5/d65/classComplexParameter.xhtml#aedc12d950086c0c6e7f428b0e4fe2db9" title="Are valid bounds defined for this parameter?">bounds_</a>= <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a3a4f2aa9e7641de68e9918db62b9ed43" title="Do you want to restrict your parameter?">usebounds_</a> = <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a28006c2bc7313d118dd3c627b69c4023" title="Do you want to keep parameter fixed?">fixed_</a> = <span class="keyword">false</span>;
<a name="l00076"></a>00076      <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a198010c032eccaa7157ac20c7ae25da7" title="Is an error defined for this parameter?">error_</a> = <span class="keyword">true</span>;
<a name="l00077"></a>00077      <a class="code" href="../../d5/d65/classComplexParameter.xhtml#af99cc8d55f96b1a61c36f3940193d533" title="A protected function which creates an output string for printing.">make_str</a>();
<a name="l00078"></a>00078    }
<a name="l00079"></a>00079 
<a name="l00081"></a>00081 
<a name="l00091"></a><a class="code" href="../../d5/d65/classComplexParameter.xhtml#adfa38797de8febd9c7c1eaa89846d656">00091</a>   <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a6871ed44271e647014943736539468a6" title="Standard constructor without information.">ComplexParameter</a>(std::string inName, <span class="keyword">const</span> std::complex&lt;double&gt; value, <span class="keyword">const</span> std::complex&lt;double&gt; min, <span class="keyword">const</span> std::complex&lt;double&gt; max)
<a name="l00092"></a>00092    :<a class="code" href="../../d7/d6a/classAbsParameter.xhtml" title="Base class for internal parameter.">AbsParameter</a>(inName,<a class="code" href="../../d8/def/AbsParameter_8hpp.xhtml#a5c1a62d78971166ef74c26cf99527f8a">ParType</a>::<a class="code" href="../../d8/def/AbsParameter_8hpp.xhtml#a5c1a62d78971166ef74c26cf99527f8aa5374e1234e4d55af346d6ae6263ad573">COMPLEX</a>),<a class="code" href="../../d5/d65/classComplexParameter.xhtml#a34365e5cc73c633507eeabada8340dd1">val_</a>(value),<a class="code" href="../../d5/d65/classComplexParameter.xhtml#a4d7ea1c8e771ae2f5b37cf2fb59efbc5">min_</a>(0),<a class="code" href="../../d5/d65/classComplexParameter.xhtml#a6e6863770b43cd304500046be87c88ad">max_</a>(0),<a class="code" href="../../d5/d65/classComplexParameter.xhtml#a09d03270b9de1f0bd6b767588c2c73c5" title="Containers of parameter information.">err_</a>(0){
<a name="l00093"></a>00093      <a class="code" href="../../d5/d65/classComplexParameter.xhtml#aedc12d950086c0c6e7f428b0e4fe2db9" title="Are valid bounds defined for this parameter?">bounds_</a>= <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a3a4f2aa9e7641de68e9918db62b9ed43" title="Do you want to restrict your parameter?">usebounds_</a> = <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a198010c032eccaa7157ac20c7ae25da7" title="Is an error defined for this parameter?">error_</a> = <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a28006c2bc7313d118dd3c627b69c4023" title="Do you want to keep parameter fixed?">fixed_</a> = <span class="keyword">false</span>;
<a name="l00094"></a>00094      <span class="keywordflow">if</span> (<a class="code" href="../../d5/d65/classComplexParameter.xhtml#a9e17e8d6a632edee0601000bc2632570" title="A protected function to check if bounds are valid.">check_bounds</a>(min, max)){
<a name="l00095"></a>00095        <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a4d7ea1c8e771ae2f5b37cf2fb59efbc5">min_</a> = min;
<a name="l00096"></a>00096        <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a6e6863770b43cd304500046be87c88ad">max_</a> = max;
<a name="l00097"></a>00097        <a class="code" href="../../d5/d65/classComplexParameter.xhtml#aedc12d950086c0c6e7f428b0e4fe2db9" title="Are valid bounds defined for this parameter?">bounds_</a> = <span class="keyword">true</span>;
<a name="l00098"></a>00098      }
<a name="l00099"></a>00099      <a class="code" href="../../d5/d65/classComplexParameter.xhtml#af99cc8d55f96b1a61c36f3940193d533" title="A protected function which creates an output string for printing.">make_str</a>();
<a name="l00100"></a>00100    }
<a name="l00101"></a>00101 
<a name="l00103"></a>00103 
<a name="l00114"></a><a class="code" href="../../d5/d65/classComplexParameter.xhtml#a5ae7454a9ce2d4f1df28425d11f5a260">00114</a>   <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a6871ed44271e647014943736539468a6" title="Standard constructor without information.">ComplexParameter</a>(std::string inName, <span class="keyword">const</span> std::complex&lt;double&gt; value, <span class="keyword">const</span> std::complex&lt;double&gt; min, <span class="keyword">const</span> std::complex&lt;double&gt; max, <span class="keyword">const</span> std::complex&lt;double&gt; error)
<a name="l00115"></a>00115    :<a class="code" href="../../d7/d6a/classAbsParameter.xhtml" title="Base class for internal parameter.">AbsParameter</a>(inName,<a class="code" href="../../d8/def/AbsParameter_8hpp.xhtml#a5c1a62d78971166ef74c26cf99527f8a">ParType</a>::<a class="code" href="../../d8/def/AbsParameter_8hpp.xhtml#a5c1a62d78971166ef74c26cf99527f8aa5374e1234e4d55af346d6ae6263ad573">COMPLEX</a>),<a class="code" href="../../d5/d65/classComplexParameter.xhtml#a34365e5cc73c633507eeabada8340dd1">val_</a>(value),<a class="code" href="../../d5/d65/classComplexParameter.xhtml#a4d7ea1c8e771ae2f5b37cf2fb59efbc5">min_</a>(0),<a class="code" href="../../d5/d65/classComplexParameter.xhtml#a6e6863770b43cd304500046be87c88ad">max_</a>(0),<a class="code" href="../../d5/d65/classComplexParameter.xhtml#a09d03270b9de1f0bd6b767588c2c73c5" title="Containers of parameter information.">err_</a>(error){
<a name="l00116"></a>00116      <a class="code" href="../../d5/d65/classComplexParameter.xhtml#aedc12d950086c0c6e7f428b0e4fe2db9" title="Are valid bounds defined for this parameter?">bounds_</a>= <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a3a4f2aa9e7641de68e9918db62b9ed43" title="Do you want to restrict your parameter?">usebounds_</a> = <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a28006c2bc7313d118dd3c627b69c4023" title="Do you want to keep parameter fixed?">fixed_</a> = <span class="keyword">false</span>;
<a name="l00117"></a>00117      <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a198010c032eccaa7157ac20c7ae25da7" title="Is an error defined for this parameter?">error_</a> = <span class="keyword">true</span>;
<a name="l00118"></a>00118      <span class="keywordflow">if</span> (<a class="code" href="../../d5/d65/classComplexParameter.xhtml#a9e17e8d6a632edee0601000bc2632570" title="A protected function to check if bounds are valid.">check_bounds</a>(min, max)){
<a name="l00119"></a>00119        <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a4d7ea1c8e771ae2f5b37cf2fb59efbc5">min_</a> = min;
<a name="l00120"></a>00120        <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a6e6863770b43cd304500046be87c88ad">max_</a> = max;
<a name="l00121"></a>00121        <a class="code" href="../../d5/d65/classComplexParameter.xhtml#aedc12d950086c0c6e7f428b0e4fe2db9" title="Are valid bounds defined for this parameter?">bounds_</a> = <span class="keyword">true</span>;
<a name="l00122"></a>00122      }
<a name="l00123"></a>00123      <a class="code" href="../../d5/d65/classComplexParameter.xhtml#af99cc8d55f96b1a61c36f3940193d533" title="A protected function which creates an output string for printing.">make_str</a>();
<a name="l00124"></a>00124    }
<a name="l00125"></a>00125 
<a name="l00127"></a>00127 
<a name="l00133"></a><a class="code" href="../../d5/d65/classComplexParameter.xhtml#a873a02e75a32a1b4642db97d84035270">00133</a>   <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a873a02e75a32a1b4642db97d84035270" title="Copy constructor using = operator.">ComplexParameter</a>(<span class="keyword">const</span> <a class="code" href="../../d5/d65/classComplexParameter.xhtml">ComplexParameter</a>&amp; in):<a class="code" href="../../d7/d6a/classAbsParameter.xhtml" title="Base class for internal parameter.">AbsParameter</a>(in.<a class="code" href="../../d7/d6a/classAbsParameter.xhtml#a1eaa1cd6f79b60be57c9b924eda0cad2" title="internal name of the parameter">name_</a>,<a class="code" href="../../d8/def/AbsParameter_8hpp.xhtml#a5c1a62d78971166ef74c26cf99527f8a">ParType</a>::<a class="code" href="../../d8/def/AbsParameter_8hpp.xhtml#a5c1a62d78971166ef74c26cf99527f8aa5374e1234e4d55af346d6ae6263ad573">COMPLEX</a>){
<a name="l00134"></a>00134      *<span class="keyword">this</span> = in;
<a name="l00135"></a>00135    }
<a name="l00136"></a>00136 
<a name="l00138"></a>00138 
<a name="l00141"></a><a class="code" href="../../d5/d65/classComplexParameter.xhtml#a4f431fbb7e36b2840c463b9b6241a1b0">00141</a>   <span class="keyword">virtual</span> <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a4f431fbb7e36b2840c463b9b6241a1b0" title="Empty Destructor.">~ComplexParameter</a>() { <span class="comment">/* nothing */</span>    }
<a name="l00142"></a>00142 
<a name="l00144"></a><a class="code" href="../../d5/d65/classComplexParameter.xhtml#a9fb346f2e7074d5a59822ba3f7e10ad5">00144</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a9fb346f2e7074d5a59822ba3f7e10ad5" title="Check if parameter has bounds.">HasBounds</a>()<span class="keyword"> const </span>{<span class="keywordflow">return</span> <a class="code" href="../../d5/d65/classComplexParameter.xhtml#aedc12d950086c0c6e7f428b0e4fe2db9" title="Are valid bounds defined for this parameter?">bounds_</a>;}
<a name="l00146"></a><a class="code" href="../../d5/d65/classComplexParameter.xhtml#a9072eca0acd412762f0fea7a7b1e9db8">00146</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a9072eca0acd412762f0fea7a7b1e9db8" title="Check if bounds should be used.">UseBounds</a>()<span class="keyword"> const </span>{<span class="keywordflow">if</span>(<a class="code" href="../../d5/d65/classComplexParameter.xhtml#aedc12d950086c0c6e7f428b0e4fe2db9" title="Are valid bounds defined for this parameter?">bounds_</a>)<span class="keywordflow">return</span> <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a3a4f2aa9e7641de68e9918db62b9ed43" title="Do you want to restrict your parameter?">usebounds_</a>; <span class="keywordflow">return</span> <span class="keyword">false</span>;}
<a name="l00148"></a><a class="code" href="../../d5/d65/classComplexParameter.xhtml#a0aa9e6ddd27d1e05a7be20ce5d5c93f8">00148</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a0aa9e6ddd27d1e05a7be20ce5d5c93f8" title="Check if parameter has an error.">HasError</a>()<span class="keyword"> const </span>{<span class="keywordflow">return</span> <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a198010c032eccaa7157ac20c7ae25da7" title="Is an error defined for this parameter?">error_</a>;}
<a name="l00150"></a><a class="code" href="../../d5/d65/classComplexParameter.xhtml#a8f59412be517f36aa06dcb6086e8ae0e">00150</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a8f59412be517f36aa06dcb6086e8ae0e" title="Check if parameter is fixed.">IsFixed</a>()<span class="keyword"> const </span>{<span class="keywordflow">return</span> <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a28006c2bc7313d118dd3c627b69c4023" title="Do you want to keep parameter fixed?">fixed_</a>;}
<a name="l00151"></a>00151 
<a name="l00153"></a><a class="code" href="../../d5/d65/classComplexParameter.xhtml#af6971f72ea88e75bf9f2a6c2139b2eac">00153</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keyword">inline</span> std::complex&lt;double&gt; <a class="code" href="../../d5/d65/classComplexParameter.xhtml#af6971f72ea88e75bf9f2a6c2139b2eac" title="Getter for value of parameter.">GetValue</a>()<span class="keyword"> const </span>{<span class="keywordflow">return</span> <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a34365e5cc73c633507eeabada8340dd1">val_</a>;}
<a name="l00155"></a><a class="code" href="../../d5/d65/classComplexParameter.xhtml#a20bd16cc9afe0f8647669109ba04d845">00155</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keyword">inline</span> std::complex&lt;double&gt; <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a20bd16cc9afe0f8647669109ba04d845" title="Getter for lower bound of parameter.">GetMinValue</a>()<span class="keyword"> const </span>{<span class="keywordflow">return</span> <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a4d7ea1c8e771ae2f5b37cf2fb59efbc5">min_</a>;}
<a name="l00157"></a><a class="code" href="../../d5/d65/classComplexParameter.xhtml#a4289cc9bb6421ba283156f96755e2fcf">00157</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keyword">inline</span> std::complex&lt;double&gt; <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a4289cc9bb6421ba283156f96755e2fcf" title="Getter for upper bound of parameter.">GetMaxValue</a>()<span class="keyword"> const </span>{<span class="keywordflow">return</span> <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a6e6863770b43cd304500046be87c88ad">max_</a>;}
<a name="l00159"></a><a class="code" href="../../d5/d65/classComplexParameter.xhtml#a67239611b0d6c43627ef008e69b38d44">00159</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keyword">inline</span> std::complex&lt;double&gt; <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a67239611b0d6c43627ef008e69b38d44" title="Getter for error of parameter.">GetError</a>()<span class="keyword"> const </span>{<span class="keywordflow">return</span> <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a09d03270b9de1f0bd6b767588c2c73c5" title="Containers of parameter information.">err_</a>;}
<a name="l00160"></a>00160 
<a name="l00162"></a>00162   <span class="comment">//virtual const std::complex&lt;double&gt; getNodeValue(){</span>
<a name="l00163"></a>00163   <span class="comment">//  return val_;</span>
<a name="l00164"></a>00164   <span class="comment">//}</span>
<a name="l00165"></a>00165 
<a name="l00167"></a><a class="code" href="../../d5/d65/classComplexParameter.xhtml#a7cb25edb17470742a55ab3adb75f38b8">00167</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a7cb25edb17470742a55ab3adb75f38b8" title="Getter for FunctionTree support.">SetValue</a>(<span class="keyword">const</span> std::complex&lt;double&gt; inVal) {
<a name="l00168"></a>00168     <span class="keywordflow">if</span>(<a class="code" href="../../d5/d65/classComplexParameter.xhtml#a28006c2bc7313d118dd3c627b69c4023" title="Do you want to keep parameter fixed?">fixed_</a>){
<a name="l00169"></a>00169         <span class="keywordflow">throw</span> <a class="code" href="../../db/d3f/classParameterFixed.xhtml" title="Parameter cannot be changed.">ParameterFixed</a>();
<a name="l00170"></a>00170         <span class="keywordflow">return</span>;
<a name="l00171"></a>00171     }
<a name="l00172"></a>00172     <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a34365e5cc73c633507eeabada8340dd1">val_</a> = inVal;
<a name="l00173"></a>00173     <a class="code" href="../../d5/d65/classComplexParameter.xhtml#af99cc8d55f96b1a61c36f3940193d533" title="A protected function which creates an output string for printing.">make_str</a>();
<a name="l00174"></a>00174     <a class="code" href="../../d7/d6a/classAbsParameter.xhtml#a9d8d907c87e67616f1fadf77475c650c" title="Notify all observing TreeNodes that parameter changed.">Notify</a>();
<a name="l00175"></a>00175   }
<a name="l00177"></a><a class="code" href="../../d5/d65/classComplexParameter.xhtml#a3fa27f43cbf2352e4f7f2cfbeb8db411">00177</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a3fa27f43cbf2352e4f7f2cfbeb8db411" title="Setter for error of parameter.">SetError</a>(<span class="keyword">const</span> std::complex&lt;double&gt; inErr) {<a class="code" href="../../d5/d65/classComplexParameter.xhtml#a09d03270b9de1f0bd6b767588c2c73c5" title="Containers of parameter information.">err_</a> = inErr; <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a198010c032eccaa7157ac20c7ae25da7" title="Is an error defined for this parameter?">error_</a> = <span class="keyword">true</span>; <a class="code" href="../../d5/d65/classComplexParameter.xhtml#af99cc8d55f96b1a61c36f3940193d533" title="A protected function which creates an output string for printing.">make_str</a>();}
<a name="l00179"></a><a class="code" href="../../d5/d65/classComplexParameter.xhtml#ad88ca11c646db03207eb551e5df9abf5">00179</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="../../d5/d65/classComplexParameter.xhtml#ad88ca11c646db03207eb551e5df9abf5" title="Setter for bounds of parameter.">SetMinMax</a>(<span class="keyword">const</span> std::complex&lt;double&gt; inMin, <span class="keyword">const</span> std::complex&lt;double&gt; inMax){
<a name="l00180"></a>00180     <span class="keywordtype">bool</span> valid = <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a9e17e8d6a632edee0601000bc2632570" title="A protected function to check if bounds are valid.">check_bounds</a>(inMin, inMax);
<a name="l00181"></a>00181     <span class="keywordflow">if</span>(valid){
<a name="l00182"></a>00182         <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a4d7ea1c8e771ae2f5b37cf2fb59efbc5">min_</a> = inMin;
<a name="l00183"></a>00183         <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a6e6863770b43cd304500046be87c88ad">max_</a> = inMax;
<a name="l00184"></a>00184         <a class="code" href="../../d5/d65/classComplexParameter.xhtml#aedc12d950086c0c6e7f428b0e4fe2db9" title="Are valid bounds defined for this parameter?">bounds_</a> = <span class="keyword">true</span>;
<a name="l00185"></a>00185         <a class="code" href="../../d5/d65/classComplexParameter.xhtml#af99cc8d55f96b1a61c36f3940193d533" title="A protected function which creates an output string for printing.">make_str</a>();
<a name="l00186"></a>00186     }
<a name="l00187"></a>00187     <span class="keywordflow">return</span> valid;
<a name="l00188"></a>00188   }
<a name="l00189"></a>00189 
<a name="l00191"></a>00191 
<a name="l00199"></a><a class="code" href="../../d5/d65/classComplexParameter.xhtml#a435296790a982814e21496e3baf4b35f">00199</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a435296790a982814e21496e3baf4b35f" title="Setter for lower bound.">SetMinValue</a>(<span class="keyword">const</span> std::complex&lt;double&gt; min) {
<a name="l00200"></a>00200     <span class="keywordtype">bool</span> valid = <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a9e17e8d6a632edee0601000bc2632570" title="A protected function to check if bounds are valid.">check_bounds</a>(min, <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a6e6863770b43cd304500046be87c88ad">max_</a>);
<a name="l00201"></a>00201     <span class="keywordflow">if</span>(valid){
<a name="l00202"></a>00202         <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a4d7ea1c8e771ae2f5b37cf2fb59efbc5">min_</a> = min;
<a name="l00203"></a>00203         <a class="code" href="../../d5/d65/classComplexParameter.xhtml#aedc12d950086c0c6e7f428b0e4fe2db9" title="Are valid bounds defined for this parameter?">bounds_</a> = <span class="keyword">true</span>;
<a name="l00204"></a>00204         <a class="code" href="../../d5/d65/classComplexParameter.xhtml#af99cc8d55f96b1a61c36f3940193d533" title="A protected function which creates an output string for printing.">make_str</a>();
<a name="l00205"></a>00205     }
<a name="l00206"></a>00206     <span class="keywordflow">return</span> valid;
<a name="l00207"></a>00207   }
<a name="l00208"></a>00208 
<a name="l00210"></a>00210 
<a name="l00218"></a><a class="code" href="../../d5/d65/classComplexParameter.xhtml#a8209293c34746d7a539a2dd7a4e3cc15">00218</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a8209293c34746d7a539a2dd7a4e3cc15" title="Setter for upper bound.">SetMaxValue</a>(<span class="keyword">const</span> std::complex&lt;double&gt; max) {
<a name="l00219"></a>00219     <span class="keywordtype">bool</span> valid = <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a9e17e8d6a632edee0601000bc2632570" title="A protected function to check if bounds are valid.">check_bounds</a>(<a class="code" href="../../d5/d65/classComplexParameter.xhtml#a4d7ea1c8e771ae2f5b37cf2fb59efbc5">min_</a>, max);
<a name="l00220"></a>00220     <span class="keywordflow">if</span>(valid){
<a name="l00221"></a>00221         <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a6e6863770b43cd304500046be87c88ad">max_</a> = max;
<a name="l00222"></a>00222         <a class="code" href="../../d5/d65/classComplexParameter.xhtml#aedc12d950086c0c6e7f428b0e4fe2db9" title="Are valid bounds defined for this parameter?">bounds_</a> = <span class="keyword">true</span>;
<a name="l00223"></a>00223         <a class="code" href="../../d5/d65/classComplexParameter.xhtml#af99cc8d55f96b1a61c36f3940193d533" title="A protected function which creates an output string for printing.">make_str</a>();
<a name="l00224"></a>00224     }
<a name="l00225"></a>00225     <span class="keywordflow">return</span> valid;
<a name="l00226"></a>00226   }
<a name="l00227"></a>00227 
<a name="l00229"></a><a class="code" href="../../d5/d65/classComplexParameter.xhtml#a5b4df8e3613ed1c367e2b2844c716729">00229</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a5b4df8e3613ed1c367e2b2844c716729" title="Set if bounds should be used.">UseBounds</a>(<span class="keyword">const</span> <span class="keywordtype">bool</span> use) {<a class="code" href="../../d5/d65/classComplexParameter.xhtml#a3a4f2aa9e7641de68e9918db62b9ed43" title="Do you want to restrict your parameter?">usebounds_</a>=use;}
<a name="l00231"></a><a class="code" href="../../d5/d65/classComplexParameter.xhtml#a9fac1762575c6ef2af9870ba1103aaee">00231</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a9fac1762575c6ef2af9870ba1103aaee" title="Call to fix parameter.">SetParameterFixed</a>() {<a class="code" href="../../d5/d65/classComplexParameter.xhtml#a28006c2bc7313d118dd3c627b69c4023" title="Do you want to keep parameter fixed?">fixed_</a>=<span class="keyword">true</span>;}
<a name="l00233"></a><a class="code" href="../../d5/d65/classComplexParameter.xhtml#a3997b8500986b41d8d3fec622fe04d11">00233</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a3997b8500986b41d8d3fec622fe04d11" title="Call to free parameter.">SetParameterFree</a>() {<a class="code" href="../../d5/d65/classComplexParameter.xhtml#a28006c2bc7313d118dd3c627b69c4023" title="Do you want to keep parameter fixed?">fixed_</a>=<span class="keyword">false</span>;}
<a name="l00235"></a><a class="code" href="../../d5/d65/classComplexParameter.xhtml#a2fef664590f17ef9c92d3388f2e72202">00235</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a2fef664590f17ef9c92d3388f2e72202" title="Set parameter free or fixed.">FixParameter</a>(<span class="keyword">const</span> <span class="keywordtype">bool</span> fixed) {<a class="code" href="../../d5/d65/classComplexParameter.xhtml#a28006c2bc7313d118dd3c627b69c4023" title="Do you want to keep parameter fixed?">fixed_</a>=fixed;}
<a name="l00236"></a>00236 
<a name="l00238"></a>00238 
<a name="l00243"></a><a class="code" href="../../d5/d65/classComplexParameter.xhtml#a53aaee0587bf6432126225e00deff91c">00243</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> std::string <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a53aaee0587bf6432126225e00deff91c" title="A public function returning a string naming its type.">TypeName</a>(){
<a name="l00244"></a>00244     <span class="keywordflow">return</span> <span class="stringliteral">&quot;complex double&quot;</span>;
<a name="l00245"></a>00245   }
<a name="l00246"></a>00246 
<a name="l00247"></a>00247 <span class="keyword">protected</span>:
<a name="l00248"></a><a class="code" href="../../d5/d65/classComplexParameter.xhtml#aedc12d950086c0c6e7f428b0e4fe2db9">00248</a>   <span class="keywordtype">bool</span> <a class="code" href="../../d5/d65/classComplexParameter.xhtml#aedc12d950086c0c6e7f428b0e4fe2db9" title="Are valid bounds defined for this parameter?">bounds_</a>; 
<a name="l00249"></a><a class="code" href="../../d5/d65/classComplexParameter.xhtml#a198010c032eccaa7157ac20c7ae25da7">00249</a>   <span class="keywordtype">bool</span> <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a198010c032eccaa7157ac20c7ae25da7" title="Is an error defined for this parameter?">error_</a>; 
<a name="l00250"></a><a class="code" href="../../d5/d65/classComplexParameter.xhtml#a3a4f2aa9e7641de68e9918db62b9ed43">00250</a>   <span class="keywordtype">bool</span> <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a3a4f2aa9e7641de68e9918db62b9ed43" title="Do you want to restrict your parameter?">usebounds_</a>; 
<a name="l00251"></a><a class="code" href="../../d5/d65/classComplexParameter.xhtml#a28006c2bc7313d118dd3c627b69c4023">00251</a>   <span class="keywordtype">bool</span> <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a28006c2bc7313d118dd3c627b69c4023" title="Do you want to keep parameter fixed?">fixed_</a>; 
<a name="l00252"></a><a class="code" href="../../d5/d65/classComplexParameter.xhtml#a34365e5cc73c633507eeabada8340dd1">00252</a>   std::complex&lt;double&gt; <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a34365e5cc73c633507eeabada8340dd1">val_</a>, <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a4d7ea1c8e771ae2f5b37cf2fb59efbc5">min_</a>, <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a6e6863770b43cd304500046be87c88ad">max_</a>, <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a09d03270b9de1f0bd6b767588c2c73c5" title="Containers of parameter information.">err_</a>; 
<a name="l00254"></a>00254 
<a name="l00255"></a>00255 
<a name="l00266"></a><a class="code" href="../../d5/d65/classComplexParameter.xhtml#a9e17e8d6a632edee0601000bc2632570">00266</a>   <span class="keywordtype">bool</span> <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a9e17e8d6a632edee0601000bc2632570" title="A protected function to check if bounds are valid.">check_bounds</a>(<span class="keyword">const</span> std::complex&lt;double&gt; min, <span class="keyword">const</span> std::complex&lt;double&gt; max){
<a name="l00267"></a>00267     <span class="keywordflow">if</span>( (max.real() &gt; min.real()) &amp;&amp; (max.real() &gt;= <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a34365e5cc73c633507eeabada8340dd1">val_</a>.real()) &amp;&amp; (min.real() &lt;= <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a34365e5cc73c633507eeabada8340dd1">val_</a>.real())
<a name="l00268"></a>00268         &amp;&amp; (max.imag() &gt; min.imag()) &amp;&amp; (max.imag() &gt;= <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a34365e5cc73c633507eeabada8340dd1">val_</a>.imag()) &amp;&amp; (min.imag() &lt;= <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a34365e5cc73c633507eeabada8340dd1">val_</a>.imag()))
<a name="l00269"></a>00269       <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00270"></a>00270     <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00271"></a>00271   }
<a name="l00272"></a>00272 
<a name="l00274"></a>00274 
<a name="l00279"></a><a class="code" href="../../d5/d65/classComplexParameter.xhtml#af99cc8d55f96b1a61c36f3940193d533">00279</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../d5/d65/classComplexParameter.xhtml#af99cc8d55f96b1a61c36f3940193d533" title="A protected function which creates an output string for printing.">make_str</a>() {
<a name="l00280"></a>00280     std::stringstream oss;
<a name="l00281"></a>00281     oss &lt;&lt; <a class="code" href="../../d7/d6a/classAbsParameter.xhtml#a1eaa1cd6f79b60be57c9b924eda0cad2" title="internal name of the parameter">name_</a>;
<a name="l00282"></a>00282     oss &lt;&lt; <span class="stringliteral">&quot;\t Val = &quot;</span> &lt;&lt; <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a34365e5cc73c633507eeabada8340dd1">val_</a>;
<a name="l00283"></a>00283     <span class="keywordflow">if</span>(<a class="code" href="../../d5/d65/classComplexParameter.xhtml#aedc12d950086c0c6e7f428b0e4fe2db9" title="Are valid bounds defined for this parameter?">bounds_</a>)
<a name="l00284"></a>00284       oss &lt;&lt; <span class="stringliteral">&quot;\t  Min-Max = &quot;</span> &lt;&lt; <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a4d7ea1c8e771ae2f5b37cf2fb59efbc5">min_</a> &lt;&lt; <span class="stringliteral">&quot; to &quot;</span> &lt;&lt; <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a6e6863770b43cd304500046be87c88ad">max_</a>;
<a name="l00285"></a>00285     <span class="keywordflow">if</span>(<a class="code" href="../../d5/d65/classComplexParameter.xhtml#a198010c032eccaa7157ac20c7ae25da7" title="Is an error defined for this parameter?">error_</a>)
<a name="l00286"></a>00286       oss &lt;&lt; <span class="stringliteral">&quot;\t  Err = &quot;</span> &lt;&lt; <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a09d03270b9de1f0bd6b767588c2c73c5" title="Containers of parameter information.">err_</a>;
<a name="l00287"></a>00287     oss &lt;&lt; <span class="stringliteral">&quot;\t Type = &quot;</span> &lt;&lt; <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a53aaee0587bf6432126225e00deff91c" title="A public function returning a string naming its type.">TypeName</a>();
<a name="l00288"></a>00288     <a class="code" href="../../d7/d6a/classAbsParameter.xhtml#a65c954387c0ad30e8daf73fddb4b27db" title="Output string to print information.">out_</a> = oss.str();
<a name="l00289"></a>00289 
<a name="l00290"></a>00290     std::stringstream ovs;
<a name="l00291"></a>00291     ovs &lt;&lt; <a class="code" href="../../d5/d65/classComplexParameter.xhtml#a34365e5cc73c633507eeabada8340dd1">val_</a>;
<a name="l00292"></a>00292     <a class="code" href="../../d7/d6a/classAbsParameter.xhtml#ac9bd4b866495c7770e34cad366ebd0e2" title="Output string to print only value.">outVal_</a> = ovs.str();
<a name="l00293"></a>00293   }
<a name="l00294"></a>00294 
<a name="l00295"></a>00295 };
<a name="l00296"></a>00296 
<a name="l00297"></a><a class="code" href="../../dd/d8d/classDoubleParameter.xhtml">00297</a> <span class="keyword">class </span><a class="code" href="../../dd/d8d/classDoubleParameter.xhtml" title="Implementations for internal parameter.">DoubleParameter</a> : <span class="keyword">public</span> <a class="code" href="../../d7/d6a/classAbsParameter.xhtml" title="Base class for internal parameter.">AbsParameter</a>
<a name="l00298"></a>00298 {
<a name="l00299"></a>00299 
<a name="l00300"></a>00300 <span class="keyword">public</span>:
<a name="l00301"></a>00301 
<a name="l00303"></a>00303 
<a name="l00309"></a><a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#ad98f7654b0162912c50698c8e75d540d">00309</a>   <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#ad98f7654b0162912c50698c8e75d540d" title="Standard constructor without information.">DoubleParameter</a>(std::string inName):<a class="code" href="../../d7/d6a/classAbsParameter.xhtml" title="Base class for internal parameter.">AbsParameter</a>(inName, <a class="code" href="../../d8/def/AbsParameter_8hpp.xhtml#a5c1a62d78971166ef74c26cf99527f8a">ParType</a>::<a class="code" href="../../d8/def/AbsParameter_8hpp.xhtml#a5c1a62d78971166ef74c26cf99527f8aa33465d1d419b1074fb259ef444609e92">DOUBLE</a>),<a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#aa20191bc91e3c739c530d2046c13f59a">val_</a>(0),<a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#afff186438bcde2cd4e370f8b9cc7b6d2">min_</a>(0),<a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#ae7a91745d7a5c2865eedb77496a8944c">max_</a>(0),<a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a02ff8b300a991588e85d010940767d03" title="Containers of parameter information.">err_</a>(0) {
<a name="l00310"></a>00310      <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a08c6fd32e356cec94d0cc57a95cd9d9e" title="Are valid bounds defined for this parameter?">bounds_</a>= <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#af07ddf0264eb60d46dfef6536850e748" title="Do you want to restrict your parameter?">usebounds_</a> = <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a6b1d5b9ac1f8f3bb992a69f1c3e06edd" title="Is an error defined for this parameter?">error_</a> = <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a579abb4fe62c4e9c7d3224241b4c9b67" title="Do you want to keep parameter fixed?">fixed_</a> = <span class="keyword">false</span>;
<a name="l00311"></a>00311      <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a2ae1b8adff069cad50f4586292d3e19d" title="A protected function which creates an output string for printing.">make_str</a>();
<a name="l00312"></a>00312    }
<a name="l00313"></a>00313 
<a name="l00315"></a>00315 
<a name="l00322"></a><a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a1d65ffdb2141798b3b1db44c74e55a19">00322</a>   <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a1d65ffdb2141798b3b1db44c74e55a19" title="Standard constructor with a value.">DoubleParameter</a>(std::string inName, <span class="keyword">const</span> <span class="keywordtype">double</span> value):<a class="code" href="../../d7/d6a/classAbsParameter.xhtml" title="Base class for internal parameter.">AbsParameter</a>(inName, <a class="code" href="../../d8/def/AbsParameter_8hpp.xhtml#a5c1a62d78971166ef74c26cf99527f8a">ParType</a>::<a class="code" href="../../d8/def/AbsParameter_8hpp.xhtml#a5c1a62d78971166ef74c26cf99527f8aa33465d1d419b1074fb259ef444609e92">DOUBLE</a>),<a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#aa20191bc91e3c739c530d2046c13f59a">val_</a>(value),<a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#afff186438bcde2cd4e370f8b9cc7b6d2">min_</a>(0),<a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#ae7a91745d7a5c2865eedb77496a8944c">max_</a>(0),<a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a02ff8b300a991588e85d010940767d03" title="Containers of parameter information.">err_</a>(0){
<a name="l00323"></a>00323      <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a08c6fd32e356cec94d0cc57a95cd9d9e" title="Are valid bounds defined for this parameter?">bounds_</a>= <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#af07ddf0264eb60d46dfef6536850e748" title="Do you want to restrict your parameter?">usebounds_</a> = <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a6b1d5b9ac1f8f3bb992a69f1c3e06edd" title="Is an error defined for this parameter?">error_</a> = <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a579abb4fe62c4e9c7d3224241b4c9b67" title="Do you want to keep parameter fixed?">fixed_</a> = <span class="keyword">false</span>;
<a name="l00324"></a>00324      <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a2ae1b8adff069cad50f4586292d3e19d" title="A protected function which creates an output string for printing.">make_str</a>();
<a name="l00325"></a>00325    }
<a name="l00326"></a>00326 
<a name="l00328"></a>00328 
<a name="l00336"></a><a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#afac041ec0d522c7e28ebd95b73439ae3">00336</a>   <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#ad98f7654b0162912c50698c8e75d540d" title="Standard constructor without information.">DoubleParameter</a>(std::string inName, <span class="keyword">const</span> <span class="keywordtype">double</span> value, <span class="keyword">const</span> <span class="keywordtype">double</span> error)
<a name="l00337"></a>00337    :<a class="code" href="../../d7/d6a/classAbsParameter.xhtml" title="Base class for internal parameter.">AbsParameter</a>(inName, <a class="code" href="../../d8/def/AbsParameter_8hpp.xhtml#a5c1a62d78971166ef74c26cf99527f8a">ParType</a>::<a class="code" href="../../d8/def/AbsParameter_8hpp.xhtml#a5c1a62d78971166ef74c26cf99527f8aa33465d1d419b1074fb259ef444609e92">DOUBLE</a>),<a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#aa20191bc91e3c739c530d2046c13f59a">val_</a>(value),<a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#afff186438bcde2cd4e370f8b9cc7b6d2">min_</a>(0),<a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#ae7a91745d7a5c2865eedb77496a8944c">max_</a>(0),<a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a02ff8b300a991588e85d010940767d03" title="Containers of parameter information.">err_</a>(error){
<a name="l00338"></a>00338      <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a08c6fd32e356cec94d0cc57a95cd9d9e" title="Are valid bounds defined for this parameter?">bounds_</a>= <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#af07ddf0264eb60d46dfef6536850e748" title="Do you want to restrict your parameter?">usebounds_</a> = <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a579abb4fe62c4e9c7d3224241b4c9b67" title="Do you want to keep parameter fixed?">fixed_</a> = <span class="keyword">false</span>;
<a name="l00339"></a>00339      <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a6b1d5b9ac1f8f3bb992a69f1c3e06edd" title="Is an error defined for this parameter?">error_</a> = <span class="keyword">true</span>;
<a name="l00340"></a>00340      <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a2ae1b8adff069cad50f4586292d3e19d" title="A protected function which creates an output string for printing.">make_str</a>();
<a name="l00341"></a>00341    }
<a name="l00342"></a>00342 
<a name="l00344"></a>00344 
<a name="l00354"></a><a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#abf8cf6200016dd6aaf2b9799ed89956d">00354</a>   <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#ad98f7654b0162912c50698c8e75d540d" title="Standard constructor without information.">DoubleParameter</a>(std::string inName, <span class="keyword">const</span> <span class="keywordtype">double</span> value, <span class="keyword">const</span> <span class="keywordtype">double</span> min, <span class="keyword">const</span> <span class="keywordtype">double</span> max)
<a name="l00355"></a>00355    :<a class="code" href="../../d7/d6a/classAbsParameter.xhtml" title="Base class for internal parameter.">AbsParameter</a>(inName, <a class="code" href="../../d8/def/AbsParameter_8hpp.xhtml#a5c1a62d78971166ef74c26cf99527f8a">ParType</a>::<a class="code" href="../../d8/def/AbsParameter_8hpp.xhtml#a5c1a62d78971166ef74c26cf99527f8aa33465d1d419b1074fb259ef444609e92">DOUBLE</a>),<a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#aa20191bc91e3c739c530d2046c13f59a">val_</a>(value),<a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#afff186438bcde2cd4e370f8b9cc7b6d2">min_</a>(0),<a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#ae7a91745d7a5c2865eedb77496a8944c">max_</a>(0),<a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a02ff8b300a991588e85d010940767d03" title="Containers of parameter information.">err_</a>(0){
<a name="l00356"></a>00356      <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a08c6fd32e356cec94d0cc57a95cd9d9e" title="Are valid bounds defined for this parameter?">bounds_</a>= <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#af07ddf0264eb60d46dfef6536850e748" title="Do you want to restrict your parameter?">usebounds_</a> = <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a6b1d5b9ac1f8f3bb992a69f1c3e06edd" title="Is an error defined for this parameter?">error_</a> = <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a579abb4fe62c4e9c7d3224241b4c9b67" title="Do you want to keep parameter fixed?">fixed_</a> = <span class="keyword">false</span>;
<a name="l00357"></a>00357      <span class="keywordflow">if</span> (<a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a342eae522e271c2a9f3ff28e3feb9bd7" title="A protected function to check if bounds are valid.">check_bounds</a>(min, max)){
<a name="l00358"></a>00358        <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#afff186438bcde2cd4e370f8b9cc7b6d2">min_</a> = min;
<a name="l00359"></a>00359        <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#ae7a91745d7a5c2865eedb77496a8944c">max_</a> = max;
<a name="l00360"></a>00360        <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a08c6fd32e356cec94d0cc57a95cd9d9e" title="Are valid bounds defined for this parameter?">bounds_</a> = <span class="keyword">true</span>;
<a name="l00361"></a>00361      }
<a name="l00362"></a>00362      <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a2ae1b8adff069cad50f4586292d3e19d" title="A protected function which creates an output string for printing.">make_str</a>();
<a name="l00363"></a>00363    }
<a name="l00364"></a>00364 
<a name="l00366"></a>00366 
<a name="l00377"></a><a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#ab440fcf47bdc60da473b5727d36d08f1">00377</a>   <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#ad98f7654b0162912c50698c8e75d540d" title="Standard constructor without information.">DoubleParameter</a>(std::string inName, <span class="keyword">const</span> <span class="keywordtype">double</span> value, <span class="keyword">const</span> <span class="keywordtype">double</span> min, <span class="keyword">const</span> <span class="keywordtype">double</span> max, <span class="keyword">const</span> <span class="keywordtype">double</span> error)
<a name="l00378"></a>00378    :<a class="code" href="../../d7/d6a/classAbsParameter.xhtml" title="Base class for internal parameter.">AbsParameter</a>(inName, <a class="code" href="../../d8/def/AbsParameter_8hpp.xhtml#a5c1a62d78971166ef74c26cf99527f8a">ParType</a>::<a class="code" href="../../d8/def/AbsParameter_8hpp.xhtml#a5c1a62d78971166ef74c26cf99527f8aa33465d1d419b1074fb259ef444609e92">DOUBLE</a>),<a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#aa20191bc91e3c739c530d2046c13f59a">val_</a>(value),<a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#afff186438bcde2cd4e370f8b9cc7b6d2">min_</a>(0),<a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#ae7a91745d7a5c2865eedb77496a8944c">max_</a>(0),<a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a02ff8b300a991588e85d010940767d03" title="Containers of parameter information.">err_</a>(error){
<a name="l00379"></a>00379      <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a08c6fd32e356cec94d0cc57a95cd9d9e" title="Are valid bounds defined for this parameter?">bounds_</a>= <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#af07ddf0264eb60d46dfef6536850e748" title="Do you want to restrict your parameter?">usebounds_</a> = <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a579abb4fe62c4e9c7d3224241b4c9b67" title="Do you want to keep parameter fixed?">fixed_</a> = <span class="keyword">false</span>;
<a name="l00380"></a>00380      <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a6b1d5b9ac1f8f3bb992a69f1c3e06edd" title="Is an error defined for this parameter?">error_</a> = <span class="keyword">true</span>;
<a name="l00381"></a>00381      <span class="keywordflow">if</span> (<a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a342eae522e271c2a9f3ff28e3feb9bd7" title="A protected function to check if bounds are valid.">check_bounds</a>(min, max)){
<a name="l00382"></a>00382        <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#afff186438bcde2cd4e370f8b9cc7b6d2">min_</a> = min;
<a name="l00383"></a>00383        <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#ae7a91745d7a5c2865eedb77496a8944c">max_</a> = max;
<a name="l00384"></a>00384        <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a08c6fd32e356cec94d0cc57a95cd9d9e" title="Are valid bounds defined for this parameter?">bounds_</a> = <span class="keyword">true</span>;
<a name="l00385"></a>00385      }
<a name="l00386"></a>00386      <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a2ae1b8adff069cad50f4586292d3e19d" title="A protected function which creates an output string for printing.">make_str</a>();
<a name="l00387"></a>00387    }
<a name="l00388"></a>00388 
<a name="l00390"></a>00390 
<a name="l00396"></a><a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a4e1e25b484a796605b16a094ea8cf4b3">00396</a>   <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a4e1e25b484a796605b16a094ea8cf4b3" title="Copy constructor using = operator.">DoubleParameter</a>(<span class="keyword">const</span> <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml" title="Implementations for internal parameter.">DoubleParameter</a>&amp; in):<a class="code" href="../../d7/d6a/classAbsParameter.xhtml" title="Base class for internal parameter.">AbsParameter</a>(in.<a class="code" href="../../d7/d6a/classAbsParameter.xhtml#a1eaa1cd6f79b60be57c9b924eda0cad2" title="internal name of the parameter">name_</a>, <a class="code" href="../../d8/def/AbsParameter_8hpp.xhtml#a5c1a62d78971166ef74c26cf99527f8a">ParType</a>::<a class="code" href="../../d8/def/AbsParameter_8hpp.xhtml#a5c1a62d78971166ef74c26cf99527f8aa33465d1d419b1074fb259ef444609e92">DOUBLE</a>){
<a name="l00397"></a>00397      *<span class="keyword">this</span> = in;
<a name="l00398"></a>00398    }
<a name="l00399"></a>00399 
<a name="l00401"></a>00401 
<a name="l00404"></a><a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#ac86e8a2dc149bc9465e88ded618e2e7f">00404</a>   <span class="keyword">virtual</span> <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#ac86e8a2dc149bc9465e88ded618e2e7f" title="Empty Destructor.">~DoubleParameter</a>() { <span class="comment">/* nothing */</span>    }
<a name="l00405"></a>00405 
<a name="l00407"></a><a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#ac7f7e9985fe1d3fad443fa11c1fbe39a">00407</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#ac7f7e9985fe1d3fad443fa11c1fbe39a" title="Check if parameter has bounds.">HasBounds</a>()<span class="keyword"> const </span>{<span class="keywordflow">return</span> <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a08c6fd32e356cec94d0cc57a95cd9d9e" title="Are valid bounds defined for this parameter?">bounds_</a>;}
<a name="l00409"></a><a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a270b26b7cbe645520028ad5bf0c2e316">00409</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a270b26b7cbe645520028ad5bf0c2e316" title="Check if bounds should be used.">UseBounds</a>()<span class="keyword"> const </span>{<span class="keywordflow">if</span>(<a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a08c6fd32e356cec94d0cc57a95cd9d9e" title="Are valid bounds defined for this parameter?">bounds_</a>)<span class="keywordflow">return</span> <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#af07ddf0264eb60d46dfef6536850e748" title="Do you want to restrict your parameter?">usebounds_</a>; <span class="keywordflow">return</span> <span class="keyword">false</span>;}
<a name="l00411"></a><a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#ab8787514bea257bb4f94bff05c3599ee">00411</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#ab8787514bea257bb4f94bff05c3599ee" title="Check if parameter has an error.">HasError</a>()<span class="keyword"> const </span>{<span class="keywordflow">return</span> <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a6b1d5b9ac1f8f3bb992a69f1c3e06edd" title="Is an error defined for this parameter?">error_</a>;}
<a name="l00413"></a><a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#afb30d7172e0f30563624720fec51108a">00413</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#afb30d7172e0f30563624720fec51108a" title="Check if parameter is fixed.">IsFixed</a>()<span class="keyword"> const </span>{<span class="keywordflow">return</span> <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a579abb4fe62c4e9c7d3224241b4c9b67" title="Do you want to keep parameter fixed?">fixed_</a>;}
<a name="l00414"></a>00414 
<a name="l00416"></a><a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a272fa0cbf8b99c4a9339bc5bf40a0d86">00416</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keyword">inline</span> <span class="keywordtype">double</span> <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a272fa0cbf8b99c4a9339bc5bf40a0d86" title="Getter for value of parameter.">GetValue</a>()<span class="keyword"> const </span>{<span class="keywordflow">return</span> <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#aa20191bc91e3c739c530d2046c13f59a">val_</a>;}
<a name="l00418"></a><a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a5c6dec6a2501e6d8fa0e1d64c5f73af2">00418</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keyword">inline</span> <span class="keywordtype">double</span> <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a5c6dec6a2501e6d8fa0e1d64c5f73af2" title="Getter for lower bound of parameter.">GetMinValue</a>()<span class="keyword"> const </span>{<span class="keywordflow">return</span> <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#afff186438bcde2cd4e370f8b9cc7b6d2">min_</a>;}
<a name="l00420"></a><a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a00c1fcc120e43f7acfad920833acad11">00420</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keyword">inline</span> <span class="keywordtype">double</span> <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a00c1fcc120e43f7acfad920833acad11" title="Getter for upper bound of parameter.">GetMaxValue</a>()<span class="keyword"> const </span>{<span class="keywordflow">return</span> <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#ae7a91745d7a5c2865eedb77496a8944c">max_</a>;}
<a name="l00422"></a><a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a67ea3e2cfa851f01f20e6b3479466325">00422</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keyword">inline</span> <span class="keywordtype">double</span> <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a67ea3e2cfa851f01f20e6b3479466325" title="Getter for error of parameter.">GetError</a>()<span class="keyword"> const </span>{<span class="keywordflow">return</span> <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a02ff8b300a991588e85d010940767d03" title="Containers of parameter information.">err_</a>;}
<a name="l00423"></a>00423 
<a name="l00425"></a><a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a363d03c014cb2857401e907609ab3d5f">00425</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> std::complex&lt;double&gt; <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a363d03c014cb2857401e907609ab3d5f" title="Getter for FunctionTree support.">getNodeValue</a>(){
<a name="l00426"></a>00426     <span class="keywordflow">return</span> std::complex&lt;double&gt;(<a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#aa20191bc91e3c739c530d2046c13f59a">val_</a>,0.);
<a name="l00427"></a>00427   }
<a name="l00428"></a>00428 
<a name="l00430"></a><a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#aee4bb00f8751676922b0f62f13d15317">00430</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#aee4bb00f8751676922b0f62f13d15317" title="Setter for value of parameter.">SetValue</a>(<span class="keyword">const</span> <span class="keywordtype">double</span> inVal) {
<a name="l00431"></a>00431     <span class="keywordflow">if</span>(<a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a579abb4fe62c4e9c7d3224241b4c9b67" title="Do you want to keep parameter fixed?">fixed_</a>){
<a name="l00432"></a>00432         <span class="keywordflow">throw</span> <a class="code" href="../../db/d3f/classParameterFixed.xhtml" title="Parameter cannot be changed.">ParameterFixed</a>();
<a name="l00433"></a>00433         <span class="keywordflow">return</span>;
<a name="l00434"></a>00434     }
<a name="l00435"></a>00435     <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#aa20191bc91e3c739c530d2046c13f59a">val_</a> = inVal;
<a name="l00436"></a>00436     <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a2ae1b8adff069cad50f4586292d3e19d" title="A protected function which creates an output string for printing.">make_str</a>();
<a name="l00437"></a>00437     <a class="code" href="../../d7/d6a/classAbsParameter.xhtml#a9d8d907c87e67616f1fadf77475c650c" title="Notify all observing TreeNodes that parameter changed.">Notify</a>();
<a name="l00438"></a>00438   }
<a name="l00440"></a><a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a11e0436e045f24facdc4ad990ea6bd01">00440</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a11e0436e045f24facdc4ad990ea6bd01" title="Setter for error of parameter.">SetError</a>(<span class="keyword">const</span> <span class="keywordtype">double</span> inErr) {<a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a02ff8b300a991588e85d010940767d03" title="Containers of parameter information.">err_</a> = inErr; <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a6b1d5b9ac1f8f3bb992a69f1c3e06edd" title="Is an error defined for this parameter?">error_</a> = <span class="keyword">true</span>; <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a2ae1b8adff069cad50f4586292d3e19d" title="A protected function which creates an output string for printing.">make_str</a>();}
<a name="l00442"></a><a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a73d2efdbb0b9e4acb58bd1d20199b20d">00442</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a73d2efdbb0b9e4acb58bd1d20199b20d" title="Setter for bounds of parameter.">SetMinMax</a>(<span class="keyword">const</span> <span class="keywordtype">double</span> inMin, <span class="keyword">const</span> <span class="keywordtype">double</span> inMax){
<a name="l00443"></a>00443     <span class="keywordtype">bool</span> valid = <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a342eae522e271c2a9f3ff28e3feb9bd7" title="A protected function to check if bounds are valid.">check_bounds</a>(inMin, inMax);
<a name="l00444"></a>00444     <span class="keywordflow">if</span>(valid){
<a name="l00445"></a>00445         <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#afff186438bcde2cd4e370f8b9cc7b6d2">min_</a> = inMin;
<a name="l00446"></a>00446         <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#ae7a91745d7a5c2865eedb77496a8944c">max_</a> = inMax;
<a name="l00447"></a>00447         <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a08c6fd32e356cec94d0cc57a95cd9d9e" title="Are valid bounds defined for this parameter?">bounds_</a> = <span class="keyword">true</span>;
<a name="l00448"></a>00448         <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a2ae1b8adff069cad50f4586292d3e19d" title="A protected function which creates an output string for printing.">make_str</a>();
<a name="l00449"></a>00449     }
<a name="l00450"></a>00450     <span class="keywordflow">return</span> valid;
<a name="l00451"></a>00451   }
<a name="l00452"></a>00452 
<a name="l00454"></a>00454 
<a name="l00462"></a><a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#afaf1cd16a7f078e31c61c36f71bebee9">00462</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#afaf1cd16a7f078e31c61c36f71bebee9" title="Setter for lower bound.">SetMinValue</a>(<span class="keyword">const</span> <span class="keywordtype">double</span> min) {
<a name="l00463"></a>00463     <span class="keywordtype">bool</span> valid = <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a342eae522e271c2a9f3ff28e3feb9bd7" title="A protected function to check if bounds are valid.">check_bounds</a>(min, <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#ae7a91745d7a5c2865eedb77496a8944c">max_</a>);
<a name="l00464"></a>00464     <span class="keywordflow">if</span>(valid){
<a name="l00465"></a>00465         <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#afff186438bcde2cd4e370f8b9cc7b6d2">min_</a> = min;
<a name="l00466"></a>00466         <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a08c6fd32e356cec94d0cc57a95cd9d9e" title="Are valid bounds defined for this parameter?">bounds_</a> = <span class="keyword">true</span>;
<a name="l00467"></a>00467         <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a2ae1b8adff069cad50f4586292d3e19d" title="A protected function which creates an output string for printing.">make_str</a>();
<a name="l00468"></a>00468     }
<a name="l00469"></a>00469     <span class="keywordflow">return</span> valid;
<a name="l00470"></a>00470   }
<a name="l00471"></a>00471 
<a name="l00473"></a>00473 
<a name="l00481"></a><a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#ac59ca32f4cd78231d86d837b8d097162">00481</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#ac59ca32f4cd78231d86d837b8d097162" title="Setter for upper bound.">SetMaxValue</a>(<span class="keyword">const</span> <span class="keywordtype">double</span> max) {
<a name="l00482"></a>00482     <span class="keywordtype">bool</span> valid = <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a342eae522e271c2a9f3ff28e3feb9bd7" title="A protected function to check if bounds are valid.">check_bounds</a>(<a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#afff186438bcde2cd4e370f8b9cc7b6d2">min_</a>, max);
<a name="l00483"></a>00483     <span class="keywordflow">if</span>(valid){
<a name="l00484"></a>00484         <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#ae7a91745d7a5c2865eedb77496a8944c">max_</a> = max;
<a name="l00485"></a>00485         <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a08c6fd32e356cec94d0cc57a95cd9d9e" title="Are valid bounds defined for this parameter?">bounds_</a> = <span class="keyword">true</span>;
<a name="l00486"></a>00486         <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a2ae1b8adff069cad50f4586292d3e19d" title="A protected function which creates an output string for printing.">make_str</a>();
<a name="l00487"></a>00487     }
<a name="l00488"></a>00488     <span class="keywordflow">return</span> valid;
<a name="l00489"></a>00489   }
<a name="l00490"></a>00490 
<a name="l00492"></a><a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#aa2ccfd3dff75080b249c2829b51c2aa4">00492</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#aa2ccfd3dff75080b249c2829b51c2aa4" title="Set if bounds should be used.">UseBounds</a>(<span class="keyword">const</span> <span class="keywordtype">bool</span> use) {<a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#af07ddf0264eb60d46dfef6536850e748" title="Do you want to restrict your parameter?">usebounds_</a>=use;}
<a name="l00494"></a><a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a04634fceaa8029c1d267bd6c28c788fe">00494</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a04634fceaa8029c1d267bd6c28c788fe" title="Call to fix parameter.">SetParameterFixed</a>() {<a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a579abb4fe62c4e9c7d3224241b4c9b67" title="Do you want to keep parameter fixed?">fixed_</a>=<span class="keyword">true</span>;}
<a name="l00496"></a><a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a7c56ce76351f848a0b02e82b7050679a">00496</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a7c56ce76351f848a0b02e82b7050679a" title="Call to free parameter.">SetParameterFree</a>() {<a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a579abb4fe62c4e9c7d3224241b4c9b67" title="Do you want to keep parameter fixed?">fixed_</a>=<span class="keyword">false</span>;}
<a name="l00498"></a><a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#acdc142eb9be5d49aae687b9e338124a1">00498</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#acdc142eb9be5d49aae687b9e338124a1" title="Set parameter free or fixed.">FixParameter</a>(<span class="keyword">const</span> <span class="keywordtype">bool</span> fixed) {<a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a579abb4fe62c4e9c7d3224241b4c9b67" title="Do you want to keep parameter fixed?">fixed_</a>=fixed;}
<a name="l00499"></a>00499 
<a name="l00501"></a>00501 
<a name="l00506"></a>00506    <span class="comment">//operator for convertion to double. Class can be used as a normal double variable in operations.</span>
<a name="l00507"></a><a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#ad3c3e06213e3c1bd6290a592b0c2c021">00507</a>   <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#abdcaa772fa6ab3a6c0c975a9a455c907" title="A public function returning a string naming its type.">operator double</a>()<span class="keyword"> const</span>{ <span class="keywordflow">return</span> <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#aa20191bc91e3c739c530d2046c13f59a">val_</a>;};
<a name="l00508"></a>00508 
<a name="l00509"></a>00509 <span class="keyword">protected</span>:
<a name="l00510"></a>00510   std::string <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#ad3c3e06213e3c1bd6290a592b0c2c021" title="Output string to print information.">out_</a>; 
<a name="l00511"></a><a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a602221f7ad87fa76c60d8cd8649ad5f0">00511</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> std::string <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a602221f7ad87fa76c60d8cd8649ad5f0" title="Getter for typename of object, to be defined by the actual implementation.">TypeName</a>(){
<a name="l00512"></a>00512     <span class="keywordflow">return</span> <span class="stringliteral">&quot;double&quot;</span>;
<a name="l00513"></a>00513   }
<a name="l00514"></a>00514 
<a name="l00515"></a>00515 <span class="keyword">protected</span>:
<a name="l00516"></a>00516   <span class="comment">//std::string out_; /*!&lt; Output string to print information */</span>
<a name="l00517"></a><a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a08c6fd32e356cec94d0cc57a95cd9d9e">00517</a>   <span class="keywordtype">bool</span> <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a08c6fd32e356cec94d0cc57a95cd9d9e" title="Are valid bounds defined for this parameter?">bounds_</a>; 
<a name="l00518"></a><a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a6b1d5b9ac1f8f3bb992a69f1c3e06edd">00518</a>   <span class="keywordtype">bool</span> <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a6b1d5b9ac1f8f3bb992a69f1c3e06edd" title="Is an error defined for this parameter?">error_</a>; 
<a name="l00519"></a><a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#af07ddf0264eb60d46dfef6536850e748">00519</a>   <span class="keywordtype">bool</span> <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#af07ddf0264eb60d46dfef6536850e748" title="Do you want to restrict your parameter?">usebounds_</a>; 
<a name="l00520"></a><a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a579abb4fe62c4e9c7d3224241b4c9b67">00520</a>   <span class="keywordtype">bool</span> <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a579abb4fe62c4e9c7d3224241b4c9b67" title="Do you want to keep parameter fixed?">fixed_</a>; 
<a name="l00521"></a><a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#aa20191bc91e3c739c530d2046c13f59a">00521</a>   <span class="keywordtype">double</span> <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#aa20191bc91e3c739c530d2046c13f59a">val_</a>, <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#afff186438bcde2cd4e370f8b9cc7b6d2">min_</a>, <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#ae7a91745d7a5c2865eedb77496a8944c">max_</a>, <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a02ff8b300a991588e85d010940767d03" title="Containers of parameter information.">err_</a>; 
<a name="l00523"></a>00523 
<a name="l00524"></a>00524 
<a name="l00535"></a><a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a342eae522e271c2a9f3ff28e3feb9bd7">00535</a>   <span class="keywordtype">bool</span> <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a342eae522e271c2a9f3ff28e3feb9bd7" title="A protected function to check if bounds are valid.">check_bounds</a>(<span class="keyword">const</span> <span class="keywordtype">double</span> min, <span class="keyword">const</span> <span class="keywordtype">double</span> max){
<a name="l00536"></a>00536     <span class="keywordflow">if</span>( (max &gt; min) &amp;&amp; (max &gt;= <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#aa20191bc91e3c739c530d2046c13f59a">val_</a>) &amp;&amp; (min &lt;= <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#aa20191bc91e3c739c530d2046c13f59a">val_</a>))
<a name="l00537"></a>00537       <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00538"></a>00538     <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00539"></a>00539   }
<a name="l00540"></a>00540 
<a name="l00542"></a>00542 
<a name="l00547"></a><a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a2ae1b8adff069cad50f4586292d3e19d">00547</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a2ae1b8adff069cad50f4586292d3e19d" title="A protected function which creates an output string for printing.">make_str</a>() {
<a name="l00548"></a>00548     std::stringstream oss;
<a name="l00549"></a>00549     oss &lt;&lt; <a class="code" href="../../d7/d6a/classAbsParameter.xhtml#a1eaa1cd6f79b60be57c9b924eda0cad2" title="internal name of the parameter">name_</a>;
<a name="l00550"></a>00550     oss &lt;&lt; <span class="stringliteral">&quot;\t Val = &quot;</span> &lt;&lt; <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#aa20191bc91e3c739c530d2046c13f59a">val_</a>;
<a name="l00551"></a>00551     <span class="keywordflow">if</span>(<a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a08c6fd32e356cec94d0cc57a95cd9d9e" title="Are valid bounds defined for this parameter?">bounds_</a>)
<a name="l00552"></a>00552       oss &lt;&lt; <span class="stringliteral">&quot;\t  Min-Max = &quot;</span> &lt;&lt; <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#afff186438bcde2cd4e370f8b9cc7b6d2">min_</a> &lt;&lt; <span class="stringliteral">&quot; to &quot;</span> &lt;&lt; <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#ae7a91745d7a5c2865eedb77496a8944c">max_</a>;
<a name="l00553"></a>00553     <span class="keywordflow">if</span>(<a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a6b1d5b9ac1f8f3bb992a69f1c3e06edd" title="Is an error defined for this parameter?">error_</a>)
<a name="l00554"></a>00554       oss &lt;&lt; <span class="stringliteral">&quot;\t  Err = &quot;</span> &lt;&lt; <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a02ff8b300a991588e85d010940767d03" title="Containers of parameter information.">err_</a>;
<a name="l00555"></a>00555     oss &lt;&lt; <span class="stringliteral">&quot;\t Type = &quot;</span> &lt;&lt; <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#a602221f7ad87fa76c60d8cd8649ad5f0" title="Getter for typename of object, to be defined by the actual implementation.">TypeName</a>();
<a name="l00556"></a>00556     <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#ad3c3e06213e3c1bd6290a592b0c2c021" title="Output string to print information.">out_</a> = oss.str();
<a name="l00557"></a>00557 
<a name="l00558"></a>00558     std::stringstream ovs;
<a name="l00559"></a>00559     ovs &lt;&lt; <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml#aa20191bc91e3c739c530d2046c13f59a">val_</a>;
<a name="l00560"></a>00560     <a class="code" href="../../d7/d6a/classAbsParameter.xhtml#ac9bd4b866495c7770e34cad366ebd0e2" title="Output string to print only value.">outVal_</a> = ovs.str();
<a name="l00561"></a>00561   }
<a name="l00562"></a>00562 
<a name="l00563"></a>00563 };
<a name="l00564"></a>00564 
<a name="l00565"></a><a class="code" href="../../dc/da0/classIntegerParameter.xhtml">00565</a> <span class="keyword">class </span><a class="code" href="../../dc/da0/classIntegerParameter.xhtml">IntegerParameter</a> : <span class="keyword">public</span> <a class="code" href="../../d7/d6a/classAbsParameter.xhtml" title="Base class for internal parameter.">AbsParameter</a>
<a name="l00566"></a>00566 {
<a name="l00567"></a>00567 
<a name="l00568"></a>00568 <span class="keyword">public</span>:
<a name="l00569"></a>00569 
<a name="l00571"></a>00571 
<a name="l00577"></a><a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a587473ffb172a103bc67141f858162d3">00577</a>   <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a587473ffb172a103bc67141f858162d3" title="Standard constructor without information.">IntegerParameter</a>(std::string inName):<a class="code" href="../../d7/d6a/classAbsParameter.xhtml" title="Base class for internal parameter.">AbsParameter</a>(inName, <a class="code" href="../../d8/def/AbsParameter_8hpp.xhtml#a5c1a62d78971166ef74c26cf99527f8a">ParType</a>::<a class="code" href="../../d8/def/AbsParameter_8hpp.xhtml#a5c1a62d78971166ef74c26cf99527f8aa5a063e265d2ac903b6808e9f6e73ec46">INTEGER</a>),<a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a2e91e7ac1f8e3881928738e0354bffea">val_</a>(0),<a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a7d37150cc66baebfd0a7cb0679dd8705">min_</a>(0),<a class="code" href="../../dc/da0/classIntegerParameter.xhtml#af4d3eab97deb4577e316d210e51ebd7c">max_</a>(0),<a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a713ac37a8c8d820e212881178719ae91" title="Containers of parameter information.">err_</a>(0) {
<a name="l00578"></a>00578      <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a6f95c4b841a3d669d15c46e787f73153" title="Are valid bounds defined for this parameter?">bounds_</a>= <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#ab68632ed3d270b082ebfb16de643e3df" title="Do you want to restrict your parameter?">usebounds_</a> = <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a611862af84b9db773cf8690fb0f888fb" title="Is an error defined for this parameter?">error_</a> = <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a7a3f5d9413ccb5fd1814a7db9e77dcfc" title="Do you want to keep parameter fixed?">fixed_</a> = <span class="keyword">false</span>;
<a name="l00579"></a>00579      <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a0432071f33c3d53b730dbe888ff90f46" title="A protected function which creates an output string for printing.">make_str</a>();
<a name="l00580"></a>00580    }
<a name="l00581"></a>00581 
<a name="l00583"></a>00583 
<a name="l00590"></a><a class="code" href="../../dc/da0/classIntegerParameter.xhtml#adb7bfb1c25796d0097528ea955deb4bf">00590</a>   <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#adb7bfb1c25796d0097528ea955deb4bf" title="Standard constructor with a value.">IntegerParameter</a>(std::string inName, <span class="keyword">const</span> <span class="keywordtype">int</span> value):<a class="code" href="../../d7/d6a/classAbsParameter.xhtml" title="Base class for internal parameter.">AbsParameter</a>(inName, <a class="code" href="../../d8/def/AbsParameter_8hpp.xhtml#a5c1a62d78971166ef74c26cf99527f8a">ParType</a>::<a class="code" href="../../d8/def/AbsParameter_8hpp.xhtml#a5c1a62d78971166ef74c26cf99527f8aa5a063e265d2ac903b6808e9f6e73ec46">INTEGER</a>),<a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a2e91e7ac1f8e3881928738e0354bffea">val_</a>(value),<a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a7d37150cc66baebfd0a7cb0679dd8705">min_</a>(0),<a class="code" href="../../dc/da0/classIntegerParameter.xhtml#af4d3eab97deb4577e316d210e51ebd7c">max_</a>(0),<a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a713ac37a8c8d820e212881178719ae91" title="Containers of parameter information.">err_</a>(0){
<a name="l00591"></a>00591      <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a6f95c4b841a3d669d15c46e787f73153" title="Are valid bounds defined for this parameter?">bounds_</a>= <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#ab68632ed3d270b082ebfb16de643e3df" title="Do you want to restrict your parameter?">usebounds_</a> = <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a611862af84b9db773cf8690fb0f888fb" title="Is an error defined for this parameter?">error_</a> = <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a7a3f5d9413ccb5fd1814a7db9e77dcfc" title="Do you want to keep parameter fixed?">fixed_</a> = <span class="keyword">false</span>;
<a name="l00592"></a>00592      <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a0432071f33c3d53b730dbe888ff90f46" title="A protected function which creates an output string for printing.">make_str</a>();
<a name="l00593"></a>00593    }
<a name="l00594"></a>00594 
<a name="l00596"></a>00596 
<a name="l00604"></a><a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a75af89f3fc45fc8834b3324de8556a84">00604</a>   <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a587473ffb172a103bc67141f858162d3" title="Standard constructor without information.">IntegerParameter</a>(std::string inName, <span class="keyword">const</span> <span class="keywordtype">int</span> value, <span class="keyword">const</span> <span class="keywordtype">int</span> error)
<a name="l00605"></a>00605    :<a class="code" href="../../d7/d6a/classAbsParameter.xhtml" title="Base class for internal parameter.">AbsParameter</a>(inName, <a class="code" href="../../d8/def/AbsParameter_8hpp.xhtml#a5c1a62d78971166ef74c26cf99527f8a">ParType</a>::<a class="code" href="../../d8/def/AbsParameter_8hpp.xhtml#a5c1a62d78971166ef74c26cf99527f8aa5a063e265d2ac903b6808e9f6e73ec46">INTEGER</a>),<a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a2e91e7ac1f8e3881928738e0354bffea">val_</a>(value),<a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a7d37150cc66baebfd0a7cb0679dd8705">min_</a>(0),<a class="code" href="../../dc/da0/classIntegerParameter.xhtml#af4d3eab97deb4577e316d210e51ebd7c">max_</a>(0),<a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a713ac37a8c8d820e212881178719ae91" title="Containers of parameter information.">err_</a>(error){
<a name="l00606"></a>00606      <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a6f95c4b841a3d669d15c46e787f73153" title="Are valid bounds defined for this parameter?">bounds_</a>= <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#ab68632ed3d270b082ebfb16de643e3df" title="Do you want to restrict your parameter?">usebounds_</a> = <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a7a3f5d9413ccb5fd1814a7db9e77dcfc" title="Do you want to keep parameter fixed?">fixed_</a> = <span class="keyword">false</span>;
<a name="l00607"></a>00607      <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a611862af84b9db773cf8690fb0f888fb" title="Is an error defined for this parameter?">error_</a> = <span class="keyword">true</span>;
<a name="l00608"></a>00608      <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a0432071f33c3d53b730dbe888ff90f46" title="A protected function which creates an output string for printing.">make_str</a>();
<a name="l00609"></a>00609    }
<a name="l00610"></a>00610 
<a name="l00612"></a>00612 
<a name="l00622"></a><a class="code" href="../../dc/da0/classIntegerParameter.xhtml#af37a97facd82fbb466f3dc5f98cef972">00622</a>   <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a587473ffb172a103bc67141f858162d3" title="Standard constructor without information.">IntegerParameter</a>(std::string inName, <span class="keyword">const</span> <span class="keywordtype">int</span> value, <span class="keyword">const</span> <span class="keywordtype">int</span> min, <span class="keyword">const</span> <span class="keywordtype">int</span> max)
<a name="l00623"></a>00623    :<a class="code" href="../../d7/d6a/classAbsParameter.xhtml" title="Base class for internal parameter.">AbsParameter</a>(inName, <a class="code" href="../../d8/def/AbsParameter_8hpp.xhtml#a5c1a62d78971166ef74c26cf99527f8a">ParType</a>::<a class="code" href="../../d8/def/AbsParameter_8hpp.xhtml#a5c1a62d78971166ef74c26cf99527f8aa5a063e265d2ac903b6808e9f6e73ec46">INTEGER</a>),<a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a2e91e7ac1f8e3881928738e0354bffea">val_</a>(value),<a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a7d37150cc66baebfd0a7cb0679dd8705">min_</a>(0),<a class="code" href="../../dc/da0/classIntegerParameter.xhtml#af4d3eab97deb4577e316d210e51ebd7c">max_</a>(0),<a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a713ac37a8c8d820e212881178719ae91" title="Containers of parameter information.">err_</a>(0){
<a name="l00624"></a>00624      <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a6f95c4b841a3d669d15c46e787f73153" title="Are valid bounds defined for this parameter?">bounds_</a>= <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#ab68632ed3d270b082ebfb16de643e3df" title="Do you want to restrict your parameter?">usebounds_</a> = <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a611862af84b9db773cf8690fb0f888fb" title="Is an error defined for this parameter?">error_</a> = <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a7a3f5d9413ccb5fd1814a7db9e77dcfc" title="Do you want to keep parameter fixed?">fixed_</a> = <span class="keyword">false</span>;
<a name="l00625"></a>00625      <span class="keywordflow">if</span> (<a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a0d33cf98f71bd2c2e3106989398a271b" title="A protected function to check if bounds are valid.">check_bounds</a>(min, max)){
<a name="l00626"></a>00626        <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a7d37150cc66baebfd0a7cb0679dd8705">min_</a> = min;
<a name="l00627"></a>00627        <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#af4d3eab97deb4577e316d210e51ebd7c">max_</a> = max;
<a name="l00628"></a>00628        <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a6f95c4b841a3d669d15c46e787f73153" title="Are valid bounds defined for this parameter?">bounds_</a> = <span class="keyword">true</span>;
<a name="l00629"></a>00629      }
<a name="l00630"></a>00630      <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a0432071f33c3d53b730dbe888ff90f46" title="A protected function which creates an output string for printing.">make_str</a>();
<a name="l00631"></a>00631    }
<a name="l00632"></a>00632 
<a name="l00634"></a>00634 
<a name="l00645"></a><a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a5c1585a5ed9801a18ac02f284c6c84ae">00645</a>   <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a587473ffb172a103bc67141f858162d3" title="Standard constructor without information.">IntegerParameter</a>(std::string inName, <span class="keyword">const</span> <span class="keywordtype">int</span> value, <span class="keyword">const</span> <span class="keywordtype">int</span> min, <span class="keyword">const</span> <span class="keywordtype">int</span> max, <span class="keyword">const</span> <span class="keywordtype">int</span> error)
<a name="l00646"></a>00646    :<a class="code" href="../../d7/d6a/classAbsParameter.xhtml" title="Base class for internal parameter.">AbsParameter</a>(inName, <a class="code" href="../../d8/def/AbsParameter_8hpp.xhtml#a5c1a62d78971166ef74c26cf99527f8a">ParType</a>::<a class="code" href="../../d8/def/AbsParameter_8hpp.xhtml#a5c1a62d78971166ef74c26cf99527f8aa5a063e265d2ac903b6808e9f6e73ec46">INTEGER</a>),<a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a2e91e7ac1f8e3881928738e0354bffea">val_</a>(value),<a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a7d37150cc66baebfd0a7cb0679dd8705">min_</a>(0),<a class="code" href="../../dc/da0/classIntegerParameter.xhtml#af4d3eab97deb4577e316d210e51ebd7c">max_</a>(0),<a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a713ac37a8c8d820e212881178719ae91" title="Containers of parameter information.">err_</a>(error){
<a name="l00647"></a>00647      <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a6f95c4b841a3d669d15c46e787f73153" title="Are valid bounds defined for this parameter?">bounds_</a>= <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#ab68632ed3d270b082ebfb16de643e3df" title="Do you want to restrict your parameter?">usebounds_</a> = <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a7a3f5d9413ccb5fd1814a7db9e77dcfc" title="Do you want to keep parameter fixed?">fixed_</a> = <span class="keyword">false</span>;
<a name="l00648"></a>00648      <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a611862af84b9db773cf8690fb0f888fb" title="Is an error defined for this parameter?">error_</a> = <span class="keyword">true</span>;
<a name="l00649"></a>00649      <span class="keywordflow">if</span> (<a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a0d33cf98f71bd2c2e3106989398a271b" title="A protected function to check if bounds are valid.">check_bounds</a>(min, max)){
<a name="l00650"></a>00650        <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a7d37150cc66baebfd0a7cb0679dd8705">min_</a> = min;
<a name="l00651"></a>00651        <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#af4d3eab97deb4577e316d210e51ebd7c">max_</a> = max;
<a name="l00652"></a>00652        <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a6f95c4b841a3d669d15c46e787f73153" title="Are valid bounds defined for this parameter?">bounds_</a> = <span class="keyword">true</span>;
<a name="l00653"></a>00653      }
<a name="l00654"></a>00654      <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a0432071f33c3d53b730dbe888ff90f46" title="A protected function which creates an output string for printing.">make_str</a>();
<a name="l00655"></a>00655    }
<a name="l00656"></a>00656 
<a name="l00658"></a>00658 
<a name="l00664"></a><a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a4601b4b1d68bac1e0a599324e3c5b1fb">00664</a>   <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a4601b4b1d68bac1e0a599324e3c5b1fb" title="Copy constructor using = operator.">IntegerParameter</a>(<span class="keyword">const</span> <a class="code" href="../../dc/da0/classIntegerParameter.xhtml">IntegerParameter</a>&amp; in):<a class="code" href="../../d7/d6a/classAbsParameter.xhtml" title="Base class for internal parameter.">AbsParameter</a>(in.<a class="code" href="../../d7/d6a/classAbsParameter.xhtml#a1eaa1cd6f79b60be57c9b924eda0cad2" title="internal name of the parameter">name_</a>, <a class="code" href="../../d8/def/AbsParameter_8hpp.xhtml#a5c1a62d78971166ef74c26cf99527f8a">ParType</a>::<a class="code" href="../../d8/def/AbsParameter_8hpp.xhtml#a5c1a62d78971166ef74c26cf99527f8aa5a063e265d2ac903b6808e9f6e73ec46">INTEGER</a>){
<a name="l00665"></a>00665      *<span class="keyword">this</span> = in;
<a name="l00666"></a>00666    }
<a name="l00667"></a>00667 
<a name="l00669"></a>00669 
<a name="l00672"></a><a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a66cbb6a345278f86c5af0fdb2961aa95">00672</a>   <span class="keyword">virtual</span> <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a66cbb6a345278f86c5af0fdb2961aa95" title="Empty Destructor.">~IntegerParameter</a>() { <span class="comment">/* nothing */</span>    }
<a name="l00673"></a>00673 
<a name="l00675"></a><a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a321225fbd82f3d272af0b0785c293014">00675</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a321225fbd82f3d272af0b0785c293014" title="Check if parameter has bounds.">HasBounds</a>()<span class="keyword"> const </span>{<span class="keywordflow">return</span> <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a6f95c4b841a3d669d15c46e787f73153" title="Are valid bounds defined for this parameter?">bounds_</a>;}
<a name="l00677"></a><a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a2fa6e3a0cb1c288b8dd3d37860b6dea1">00677</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a2fa6e3a0cb1c288b8dd3d37860b6dea1" title="Check if bounds should be used.">UseBounds</a>()<span class="keyword"> const </span>{<span class="keywordflow">if</span>(<a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a6f95c4b841a3d669d15c46e787f73153" title="Are valid bounds defined for this parameter?">bounds_</a>)<span class="keywordflow">return</span> <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#ab68632ed3d270b082ebfb16de643e3df" title="Do you want to restrict your parameter?">usebounds_</a>; <span class="keywordflow">return</span> <span class="keyword">false</span>;}
<a name="l00679"></a><a class="code" href="../../dc/da0/classIntegerParameter.xhtml#abbd590feb425e997ff3bd635c2708ef8">00679</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#abbd590feb425e997ff3bd635c2708ef8" title="Check if parameter has an error.">HasError</a>()<span class="keyword"> const </span>{<span class="keywordflow">return</span> <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a611862af84b9db773cf8690fb0f888fb" title="Is an error defined for this parameter?">error_</a>;}
<a name="l00681"></a><a class="code" href="../../dc/da0/classIntegerParameter.xhtml#ae5779fb4971fce0b087b2b601ba1d6ea">00681</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#ae5779fb4971fce0b087b2b601ba1d6ea" title="Check if parameter is fixed.">IsFixed</a>()<span class="keyword"> const </span>{<span class="keywordflow">return</span> <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a7a3f5d9413ccb5fd1814a7db9e77dcfc" title="Do you want to keep parameter fixed?">fixed_</a>;}
<a name="l00682"></a>00682 
<a name="l00684"></a><a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a26592ec6fde9f8991306037826be90ca">00684</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a26592ec6fde9f8991306037826be90ca" title="Getter for value of parameter.">GetValue</a>()<span class="keyword"> const </span>{<span class="keywordflow">return</span> <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a2e91e7ac1f8e3881928738e0354bffea">val_</a>;}
<a name="l00686"></a><a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a266385f52f2c760732c25adcc1419e8b">00686</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a266385f52f2c760732c25adcc1419e8b" title="Getter for lower bound of parameter.">GetMinValue</a>()<span class="keyword"> const </span>{<span class="keywordflow">return</span> <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a7d37150cc66baebfd0a7cb0679dd8705">min_</a>;}
<a name="l00688"></a><a class="code" href="../../dc/da0/classIntegerParameter.xhtml#ab70d708a642c3b78b8f72991e140c77c">00688</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#ab70d708a642c3b78b8f72991e140c77c" title="Getter for upper bound of parameter.">GetMaxValue</a>()<span class="keyword"> const </span>{<span class="keywordflow">return</span> <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#af4d3eab97deb4577e316d210e51ebd7c">max_</a>;}
<a name="l00690"></a><a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a544118e88bfe32f43606adeee1ff9985">00690</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a544118e88bfe32f43606adeee1ff9985" title="Getter for error of parameter.">GetError</a>()<span class="keyword"> const </span>{<span class="keywordflow">return</span> <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a713ac37a8c8d820e212881178719ae91" title="Containers of parameter information.">err_</a>;}
<a name="l00691"></a>00691 
<a name="l00693"></a><a class="code" href="../../dc/da0/classIntegerParameter.xhtml#ad3f0d2916c6712a7e26142669a7ea94d">00693</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> std::complex&lt;double&gt; <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#ad3f0d2916c6712a7e26142669a7ea94d" title="Getter for FunctionTree support.">getNodeValue</a>(){
<a name="l00694"></a>00694     <span class="keywordflow">return</span> std::complex&lt;double&gt;((double)<a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a2e91e7ac1f8e3881928738e0354bffea">val_</a>,0.);
<a name="l00695"></a>00695   }
<a name="l00696"></a>00696 
<a name="l00698"></a><a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a681cf09d9d150835450446cd7b8b2cfb">00698</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a681cf09d9d150835450446cd7b8b2cfb" title="Setter for value of parameter.">SetValue</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> inVal) {
<a name="l00699"></a>00699     <span class="keywordflow">if</span>(<a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a7a3f5d9413ccb5fd1814a7db9e77dcfc" title="Do you want to keep parameter fixed?">fixed_</a>){
<a name="l00700"></a>00700         <span class="keywordflow">throw</span> <a class="code" href="../../db/d3f/classParameterFixed.xhtml" title="Parameter cannot be changed.">ParameterFixed</a>();
<a name="l00701"></a>00701         <span class="keywordflow">return</span>;
<a name="l00702"></a>00702     }
<a name="l00703"></a>00703     <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a2e91e7ac1f8e3881928738e0354bffea">val_</a> = inVal;
<a name="l00704"></a>00704     <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a0432071f33c3d53b730dbe888ff90f46" title="A protected function which creates an output string for printing.">make_str</a>();
<a name="l00705"></a>00705     <a class="code" href="../../d7/d6a/classAbsParameter.xhtml#a9d8d907c87e67616f1fadf77475c650c" title="Notify all observing TreeNodes that parameter changed.">Notify</a>();
<a name="l00706"></a>00706   }
<a name="l00708"></a><a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a91d73f38cbbf3a344a9355c459a34145">00708</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a91d73f38cbbf3a344a9355c459a34145" title="Setter for error of parameter.">SetError</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> inErr) {<a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a713ac37a8c8d820e212881178719ae91" title="Containers of parameter information.">err_</a> = inErr; <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a611862af84b9db773cf8690fb0f888fb" title="Is an error defined for this parameter?">error_</a> = <span class="keyword">true</span>; <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a0432071f33c3d53b730dbe888ff90f46" title="A protected function which creates an output string for printing.">make_str</a>();}
<a name="l00710"></a><a class="code" href="../../dc/da0/classIntegerParameter.xhtml#ace6b35a334076dafd65124709c096098">00710</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#ace6b35a334076dafd65124709c096098" title="Setter for bounds of parameter.">SetMinMax</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> inMin, <span class="keyword">const</span> <span class="keywordtype">int</span> inMax){
<a name="l00711"></a>00711     <span class="keywordtype">bool</span> valid = <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a0d33cf98f71bd2c2e3106989398a271b" title="A protected function to check if bounds are valid.">check_bounds</a>(inMin, inMax);
<a name="l00712"></a>00712     <span class="keywordflow">if</span>(valid){
<a name="l00713"></a>00713         <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a7d37150cc66baebfd0a7cb0679dd8705">min_</a> = inMin;
<a name="l00714"></a>00714         <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#af4d3eab97deb4577e316d210e51ebd7c">max_</a> = inMax;
<a name="l00715"></a>00715         <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a6f95c4b841a3d669d15c46e787f73153" title="Are valid bounds defined for this parameter?">bounds_</a> = <span class="keyword">true</span>;
<a name="l00716"></a>00716         <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a0432071f33c3d53b730dbe888ff90f46" title="A protected function which creates an output string for printing.">make_str</a>();
<a name="l00717"></a>00717     }
<a name="l00718"></a>00718     <span class="keywordflow">return</span> valid;
<a name="l00719"></a>00719   }
<a name="l00720"></a>00720 
<a name="l00722"></a>00722 
<a name="l00730"></a><a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a8a9aa6481a17e2f9c81c72c758050b95">00730</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a8a9aa6481a17e2f9c81c72c758050b95" title="Setter for lower bound.">SetMinValue</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> min) {
<a name="l00731"></a>00731     <span class="keywordtype">bool</span> valid = <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a0d33cf98f71bd2c2e3106989398a271b" title="A protected function to check if bounds are valid.">check_bounds</a>(min, <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#af4d3eab97deb4577e316d210e51ebd7c">max_</a>);
<a name="l00732"></a>00732     <span class="keywordflow">if</span>(valid){
<a name="l00733"></a>00733         <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a7d37150cc66baebfd0a7cb0679dd8705">min_</a> = min;
<a name="l00734"></a>00734         <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a6f95c4b841a3d669d15c46e787f73153" title="Are valid bounds defined for this parameter?">bounds_</a> = <span class="keyword">true</span>;
<a name="l00735"></a>00735         <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a0432071f33c3d53b730dbe888ff90f46" title="A protected function which creates an output string for printing.">make_str</a>();
<a name="l00736"></a>00736     }
<a name="l00737"></a>00737     <span class="keywordflow">return</span> valid;
<a name="l00738"></a>00738   }
<a name="l00739"></a>00739 
<a name="l00741"></a>00741 
<a name="l00749"></a><a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a25e9abebc74581a887aadbd6c60e431f">00749</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a25e9abebc74581a887aadbd6c60e431f" title="Setter for upper bound.">SetMaxValue</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> max) {
<a name="l00750"></a>00750     <span class="keywordtype">bool</span> valid = <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a0d33cf98f71bd2c2e3106989398a271b" title="A protected function to check if bounds are valid.">check_bounds</a>(<a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a7d37150cc66baebfd0a7cb0679dd8705">min_</a>, max);
<a name="l00751"></a>00751     <span class="keywordflow">if</span>(valid){
<a name="l00752"></a>00752         <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#af4d3eab97deb4577e316d210e51ebd7c">max_</a> = max;
<a name="l00753"></a>00753         <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a6f95c4b841a3d669d15c46e787f73153" title="Are valid bounds defined for this parameter?">bounds_</a> = <span class="keyword">true</span>;
<a name="l00754"></a>00754         <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a0432071f33c3d53b730dbe888ff90f46" title="A protected function which creates an output string for printing.">make_str</a>();
<a name="l00755"></a>00755     }
<a name="l00756"></a>00756     <span class="keywordflow">return</span> valid;
<a name="l00757"></a>00757   }
<a name="l00758"></a>00758 
<a name="l00760"></a><a class="code" href="../../dc/da0/classIntegerParameter.xhtml#aed709aa9573ad1ebd0e6bdd0923847cc">00760</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#aed709aa9573ad1ebd0e6bdd0923847cc" title="Set if bounds should be used.">UseBounds</a>(<span class="keyword">const</span> <span class="keywordtype">bool</span> use) {<a class="code" href="../../dc/da0/classIntegerParameter.xhtml#ab68632ed3d270b082ebfb16de643e3df" title="Do you want to restrict your parameter?">usebounds_</a>=use;}
<a name="l00762"></a><a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a0b2857e6e04aa72260601eb1d8d04822">00762</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a0b2857e6e04aa72260601eb1d8d04822" title="Call to fix parameter.">SetParameterFixed</a>() {<a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a7a3f5d9413ccb5fd1814a7db9e77dcfc" title="Do you want to keep parameter fixed?">fixed_</a>=<span class="keyword">true</span>;}
<a name="l00764"></a><a class="code" href="../../dc/da0/classIntegerParameter.xhtml#aaf5d8de1cad5e36a8390a4f1c6a1e4e1">00764</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#aaf5d8de1cad5e36a8390a4f1c6a1e4e1" title="Call to free parameter.">SetParameterFree</a>() {<a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a7a3f5d9413ccb5fd1814a7db9e77dcfc" title="Do you want to keep parameter fixed?">fixed_</a>=<span class="keyword">false</span>;}
<a name="l00766"></a><a class="code" href="../../dc/da0/classIntegerParameter.xhtml#addaf4594889140804622055648cb4205">00766</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#addaf4594889140804622055648cb4205" title="Set parameter free or fixed.">FixParameter</a>(<span class="keyword">const</span> <span class="keywordtype">bool</span> fixed) {<a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a7a3f5d9413ccb5fd1814a7db9e77dcfc" title="Do you want to keep parameter fixed?">fixed_</a>=fixed;}
<a name="l00767"></a>00767 
<a name="l00769"></a>00769 
<a name="l00774"></a><a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a4d4097e57daf46dfb5131ede39acc578">00774</a>   <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a4d4097e57daf46dfb5131ede39acc578" title="A public function returning a string naming its type.">operator int</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a2e91e7ac1f8e3881928738e0354bffea">val_</a>; };
<a name="l00775"></a>00775 
<a name="l00776"></a><a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a4fa223c2f21a5c0c71a09d2e0e9848e3">00776</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> std::string <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a4fa223c2f21a5c0c71a09d2e0e9848e3" title="Getter for typename of object, to be defined by the actual implementation.">TypeName</a>(){
<a name="l00777"></a>00777     <span class="keywordflow">return</span> <span class="stringliteral">&quot;integer&quot;</span>;
<a name="l00778"></a>00778   }
<a name="l00779"></a>00779 
<a name="l00780"></a>00780 <span class="keyword">protected</span>:
<a name="l00781"></a>00781   <span class="comment">//std::string out_; /*!&lt; Output string to print information */</span>
<a name="l00782"></a><a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a6f95c4b841a3d669d15c46e787f73153">00782</a>   <span class="keywordtype">bool</span> <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a6f95c4b841a3d669d15c46e787f73153" title="Are valid bounds defined for this parameter?">bounds_</a>; 
<a name="l00783"></a><a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a611862af84b9db773cf8690fb0f888fb">00783</a>   <span class="keywordtype">bool</span> <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a611862af84b9db773cf8690fb0f888fb" title="Is an error defined for this parameter?">error_</a>; 
<a name="l00784"></a><a class="code" href="../../dc/da0/classIntegerParameter.xhtml#ab68632ed3d270b082ebfb16de643e3df">00784</a>   <span class="keywordtype">bool</span> <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#ab68632ed3d270b082ebfb16de643e3df" title="Do you want to restrict your parameter?">usebounds_</a>; 
<a name="l00785"></a><a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a7a3f5d9413ccb5fd1814a7db9e77dcfc">00785</a>   <span class="keywordtype">bool</span> <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a7a3f5d9413ccb5fd1814a7db9e77dcfc" title="Do you want to keep parameter fixed?">fixed_</a>; 
<a name="l00786"></a><a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a2e91e7ac1f8e3881928738e0354bffea">00786</a>   <span class="keywordtype">int</span> <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a2e91e7ac1f8e3881928738e0354bffea">val_</a>, <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a7d37150cc66baebfd0a7cb0679dd8705">min_</a>, <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#af4d3eab97deb4577e316d210e51ebd7c">max_</a>, <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a713ac37a8c8d820e212881178719ae91" title="Containers of parameter information.">err_</a>; 
<a name="l00788"></a>00788 
<a name="l00789"></a>00789 
<a name="l00800"></a><a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a0d33cf98f71bd2c2e3106989398a271b">00800</a>   <span class="keywordtype">bool</span> <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a0d33cf98f71bd2c2e3106989398a271b" title="A protected function to check if bounds are valid.">check_bounds</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> min, <span class="keyword">const</span> <span class="keywordtype">int</span> max){
<a name="l00801"></a>00801     <span class="keywordflow">if</span>( (max &gt; min) &amp;&amp; (max &gt;= <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a2e91e7ac1f8e3881928738e0354bffea">val_</a>) &amp;&amp; (min &lt;= <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a2e91e7ac1f8e3881928738e0354bffea">val_</a>))
<a name="l00802"></a>00802       <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00803"></a>00803     <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00804"></a>00804   }
<a name="l00805"></a>00805 
<a name="l00807"></a>00807 
<a name="l00812"></a><a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a0432071f33c3d53b730dbe888ff90f46">00812</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a0432071f33c3d53b730dbe888ff90f46" title="A protected function which creates an output string for printing.">make_str</a>() {
<a name="l00813"></a>00813     std::stringstream oss;
<a name="l00814"></a>00814     oss &lt;&lt; <a class="code" href="../../d7/d6a/classAbsParameter.xhtml#a1eaa1cd6f79b60be57c9b924eda0cad2" title="internal name of the parameter">name_</a>;
<a name="l00815"></a>00815     oss &lt;&lt; <span class="stringliteral">&quot;\t Val = &quot;</span> &lt;&lt; <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a2e91e7ac1f8e3881928738e0354bffea">val_</a>;
<a name="l00816"></a>00816     <span class="keywordflow">if</span>(<a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a6f95c4b841a3d669d15c46e787f73153" title="Are valid bounds defined for this parameter?">bounds_</a>)
<a name="l00817"></a>00817       oss &lt;&lt; <span class="stringliteral">&quot;\t  Min-Max = &quot;</span> &lt;&lt; <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a7d37150cc66baebfd0a7cb0679dd8705">min_</a> &lt;&lt; <span class="stringliteral">&quot; to &quot;</span> &lt;&lt; <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#af4d3eab97deb4577e316d210e51ebd7c">max_</a>;
<a name="l00818"></a>00818     <span class="keywordflow">if</span>(<a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a611862af84b9db773cf8690fb0f888fb" title="Is an error defined for this parameter?">error_</a>)
<a name="l00819"></a>00819       oss &lt;&lt; <span class="stringliteral">&quot;\t  Err = &quot;</span> &lt;&lt; <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a713ac37a8c8d820e212881178719ae91" title="Containers of parameter information.">err_</a>;
<a name="l00820"></a>00820     oss &lt;&lt; <span class="stringliteral">&quot;\t Type = &quot;</span> &lt;&lt; <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a4fa223c2f21a5c0c71a09d2e0e9848e3" title="Getter for typename of object, to be defined by the actual implementation.">TypeName</a>();
<a name="l00821"></a>00821     <a class="code" href="../../d7/d6a/classAbsParameter.xhtml#a65c954387c0ad30e8daf73fddb4b27db" title="Output string to print information.">out_</a> = oss.str();
<a name="l00822"></a>00822 
<a name="l00823"></a>00823     std::stringstream ovs;
<a name="l00824"></a>00824     ovs &lt;&lt; <a class="code" href="../../dc/da0/classIntegerParameter.xhtml#a2e91e7ac1f8e3881928738e0354bffea">val_</a>;
<a name="l00825"></a>00825     <a class="code" href="../../d7/d6a/classAbsParameter.xhtml#ac9bd4b866495c7770e34cad366ebd0e2" title="Output string to print only value.">outVal_</a> = ovs.str();
<a name="l00826"></a>00826   }
<a name="l00827"></a>00827 
<a name="l00828"></a>00828 };
<a name="l00829"></a>00829 
<a name="l00830"></a><a class="code" href="../../df/d1c/classBoolParameter.xhtml">00830</a> <span class="keyword">class </span><a class="code" href="../../df/d1c/classBoolParameter.xhtml">BoolParameter</a> : <span class="keyword">public</span> <a class="code" href="../../d7/d6a/classAbsParameter.xhtml" title="Base class for internal parameter.">AbsParameter</a>
<a name="l00831"></a>00831 {
<a name="l00832"></a>00832 
<a name="l00833"></a>00833 <span class="keyword">public</span>:
<a name="l00834"></a>00834 
<a name="l00836"></a>00836 
<a name="l00842"></a><a class="code" href="../../df/d1c/classBoolParameter.xhtml#a587ab36c001d173b06919d457a1d45e4">00842</a>   <a class="code" href="../../df/d1c/classBoolParameter.xhtml#a587ab36c001d173b06919d457a1d45e4" title="Standard constructor without information.">BoolParameter</a>(std::string inName):<a class="code" href="../../d7/d6a/classAbsParameter.xhtml" title="Base class for internal parameter.">AbsParameter</a>(inName,<a class="code" href="../../d8/def/AbsParameter_8hpp.xhtml#a5c1a62d78971166ef74c26cf99527f8a">ParType</a>::<a class="code" href="../../d8/def/AbsParameter_8hpp.xhtml#a5c1a62d78971166ef74c26cf99527f8aae663dbb8f8244e122acb5bd6b2c216e1">BOOL</a>),<a class="code" href="../../df/d1c/classBoolParameter.xhtml#a5ac86e1f505fad22eeea171bcc8748c9">val_</a>(0),<a class="code" href="../../df/d1c/classBoolParameter.xhtml#a21d7587dbe2a95be0329ef9933ff041d" title="Containers of parameter information.">err_</a>(0) {
<a name="l00843"></a>00843      <a class="code" href="../../df/d1c/classBoolParameter.xhtml#a9c192361dd600e72bbf06eee33fa0899" title="Is an error defined for this parameter?">error_</a> = <a class="code" href="../../df/d1c/classBoolParameter.xhtml#acaa36aae968e133f21b2cebb6216dee9" title="Do you want to keep parameter fixed?">fixed_</a> = <span class="keyword">false</span>;
<a name="l00844"></a>00844      <a class="code" href="../../df/d1c/classBoolParameter.xhtml#ad385b85691363fa3a304455f110cb1eb" title="A protected function which creates an output string for printing.">make_str</a>();
<a name="l00845"></a>00845    }
<a name="l00846"></a>00846 
<a name="l00848"></a>00848 
<a name="l00855"></a><a class="code" href="../../df/d1c/classBoolParameter.xhtml#a805b944ffb78c670cdbad9159ea37dc2">00855</a>   <a class="code" href="../../df/d1c/classBoolParameter.xhtml#a805b944ffb78c670cdbad9159ea37dc2" title="Standard constructor with a value.">BoolParameter</a>(std::string inName, <span class="keyword">const</span> <span class="keywordtype">bool</span> value):<a class="code" href="../../d7/d6a/classAbsParameter.xhtml" title="Base class for internal parameter.">AbsParameter</a>(inName,<a class="code" href="../../d8/def/AbsParameter_8hpp.xhtml#a5c1a62d78971166ef74c26cf99527f8a">ParType</a>::<a class="code" href="../../d8/def/AbsParameter_8hpp.xhtml#a5c1a62d78971166ef74c26cf99527f8aae663dbb8f8244e122acb5bd6b2c216e1">BOOL</a>),<a class="code" href="../../df/d1c/classBoolParameter.xhtml#a5ac86e1f505fad22eeea171bcc8748c9">val_</a>(value),<a class="code" href="../../df/d1c/classBoolParameter.xhtml#a21d7587dbe2a95be0329ef9933ff041d" title="Containers of parameter information.">err_</a>(0){
<a name="l00856"></a>00856      <a class="code" href="../../df/d1c/classBoolParameter.xhtml#a9c192361dd600e72bbf06eee33fa0899" title="Is an error defined for this parameter?">error_</a> = <a class="code" href="../../df/d1c/classBoolParameter.xhtml#acaa36aae968e133f21b2cebb6216dee9" title="Do you want to keep parameter fixed?">fixed_</a> = <span class="keyword">false</span>;
<a name="l00857"></a>00857      <a class="code" href="../../df/d1c/classBoolParameter.xhtml#ad385b85691363fa3a304455f110cb1eb" title="A protected function which creates an output string for printing.">make_str</a>();
<a name="l00858"></a>00858    }
<a name="l00859"></a>00859 
<a name="l00861"></a>00861 
<a name="l00869"></a><a class="code" href="../../df/d1c/classBoolParameter.xhtml#a0827acbe810ae6375a598b7218b5ef29">00869</a>   <a class="code" href="../../df/d1c/classBoolParameter.xhtml#a587ab36c001d173b06919d457a1d45e4" title="Standard constructor without information.">BoolParameter</a>(std::string inName, <span class="keyword">const</span> <span class="keywordtype">bool</span> value, <span class="keyword">const</span> <span class="keywordtype">bool</span> error)
<a name="l00870"></a>00870    :<a class="code" href="../../d7/d6a/classAbsParameter.xhtml" title="Base class for internal parameter.">AbsParameter</a>(inName,<a class="code" href="../../d8/def/AbsParameter_8hpp.xhtml#a5c1a62d78971166ef74c26cf99527f8a">ParType</a>::<a class="code" href="../../d8/def/AbsParameter_8hpp.xhtml#a5c1a62d78971166ef74c26cf99527f8aae663dbb8f8244e122acb5bd6b2c216e1">BOOL</a>),<a class="code" href="../../df/d1c/classBoolParameter.xhtml#a5ac86e1f505fad22eeea171bcc8748c9">val_</a>(value),<a class="code" href="../../df/d1c/classBoolParameter.xhtml#a21d7587dbe2a95be0329ef9933ff041d" title="Containers of parameter information.">err_</a>(error){
<a name="l00871"></a>00871      <a class="code" href="../../df/d1c/classBoolParameter.xhtml#acaa36aae968e133f21b2cebb6216dee9" title="Do you want to keep parameter fixed?">fixed_</a> = <span class="keyword">false</span>;
<a name="l00872"></a>00872      <a class="code" href="../../df/d1c/classBoolParameter.xhtml#a9c192361dd600e72bbf06eee33fa0899" title="Is an error defined for this parameter?">error_</a> = <span class="keyword">true</span>;
<a name="l00873"></a>00873      <a class="code" href="../../df/d1c/classBoolParameter.xhtml#ad385b85691363fa3a304455f110cb1eb" title="A protected function which creates an output string for printing.">make_str</a>();
<a name="l00874"></a>00874    }
<a name="l00875"></a>00875 
<a name="l00877"></a>00877 
<a name="l00883"></a><a class="code" href="../../df/d1c/classBoolParameter.xhtml#a60cddb7b3fc1270cb79a238759744259">00883</a>   <a class="code" href="../../df/d1c/classBoolParameter.xhtml#a60cddb7b3fc1270cb79a238759744259" title="Copy constructor using = operator.">BoolParameter</a>(<span class="keyword">const</span> <a class="code" href="../../df/d1c/classBoolParameter.xhtml">BoolParameter</a>&amp; in):<a class="code" href="../../d7/d6a/classAbsParameter.xhtml" title="Base class for internal parameter.">AbsParameter</a>(in.<a class="code" href="../../d7/d6a/classAbsParameter.xhtml#a1eaa1cd6f79b60be57c9b924eda0cad2" title="internal name of the parameter">name_</a>, <a class="code" href="../../d8/def/AbsParameter_8hpp.xhtml#a5c1a62d78971166ef74c26cf99527f8a">ParType</a>::<a class="code" href="../../d8/def/AbsParameter_8hpp.xhtml#a5c1a62d78971166ef74c26cf99527f8aae663dbb8f8244e122acb5bd6b2c216e1">BOOL</a>){
<a name="l00884"></a>00884      *<span class="keyword">this</span> = in;
<a name="l00885"></a>00885    }
<a name="l00886"></a>00886 
<a name="l00888"></a>00888 
<a name="l00891"></a><a class="code" href="../../df/d1c/classBoolParameter.xhtml#a385490fd59b6d27a9fb1ef63c2ff43bc">00891</a>   <span class="keyword">virtual</span> <a class="code" href="../../df/d1c/classBoolParameter.xhtml#a385490fd59b6d27a9fb1ef63c2ff43bc" title="Empty Destructor.">~BoolParameter</a>() { <span class="comment">/* nothing */</span>    }
<a name="l00892"></a>00892 
<a name="l00894"></a><a class="code" href="../../df/d1c/classBoolParameter.xhtml#a25b8a4587ad9e01e3dcfc1ba9067f795">00894</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../df/d1c/classBoolParameter.xhtml#a25b8a4587ad9e01e3dcfc1ba9067f795" title="Check if parameter has an error.">HasError</a>()<span class="keyword"> const </span>{<span class="keywordflow">return</span> <a class="code" href="../../df/d1c/classBoolParameter.xhtml#a9c192361dd600e72bbf06eee33fa0899" title="Is an error defined for this parameter?">error_</a>;}
<a name="l00896"></a><a class="code" href="../../df/d1c/classBoolParameter.xhtml#a280c5f86138bcc626ebb65829b579ff6">00896</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../df/d1c/classBoolParameter.xhtml#a280c5f86138bcc626ebb65829b579ff6" title="Check if parameter is fixed.">IsFixed</a>()<span class="keyword"> const </span>{<span class="keywordflow">return</span> <a class="code" href="../../df/d1c/classBoolParameter.xhtml#acaa36aae968e133f21b2cebb6216dee9" title="Do you want to keep parameter fixed?">fixed_</a>;}
<a name="l00897"></a>00897 
<a name="l00899"></a><a class="code" href="../../df/d1c/classBoolParameter.xhtml#a90c52946f9a9a137828cecc9caa28bc3">00899</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../df/d1c/classBoolParameter.xhtml#a90c52946f9a9a137828cecc9caa28bc3" title="Getter for value of parameter.">GetValue</a>()<span class="keyword"> const </span>{<span class="keywordflow">return</span> <a class="code" href="../../df/d1c/classBoolParameter.xhtml#a5ac86e1f505fad22eeea171bcc8748c9">val_</a>;}
<a name="l00901"></a><a class="code" href="../../df/d1c/classBoolParameter.xhtml#a3a5271d52e3a04f8528690ab3dddb0d0">00901</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../df/d1c/classBoolParameter.xhtml#a3a5271d52e3a04f8528690ab3dddb0d0" title="Getter for error of parameter.">GetError</a>()<span class="keyword"> const </span>{<span class="keywordflow">return</span> <a class="code" href="../../df/d1c/classBoolParameter.xhtml#a21d7587dbe2a95be0329ef9933ff041d" title="Containers of parameter information.">err_</a>;}
<a name="l00902"></a>00902 
<a name="l00904"></a><a class="code" href="../../df/d1c/classBoolParameter.xhtml#a2a524808981d19503d8b9ba87170c3f2">00904</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> std::complex&lt;double&gt; <a class="code" href="../../df/d1c/classBoolParameter.xhtml#a2a524808981d19503d8b9ba87170c3f2" title="Getter for FunctionTree support.">getNodeValue</a>(){
<a name="l00905"></a>00905     <span class="keywordflow">return</span> std::complex&lt;double&gt;((double)<a class="code" href="../../df/d1c/classBoolParameter.xhtml#a5ac86e1f505fad22eeea171bcc8748c9">val_</a>,0.);
<a name="l00906"></a>00906   }
<a name="l00907"></a>00907 
<a name="l00909"></a><a class="code" href="../../df/d1c/classBoolParameter.xhtml#a6073659d93c392cd6a3f8a603166d693">00909</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../df/d1c/classBoolParameter.xhtml#a6073659d93c392cd6a3f8a603166d693" title="Setter for value of parameter.">SetValue</a>(<span class="keyword">const</span> <span class="keywordtype">bool</span> inVal) {
<a name="l00910"></a>00910     <span class="keywordflow">if</span>(<a class="code" href="../../df/d1c/classBoolParameter.xhtml#acaa36aae968e133f21b2cebb6216dee9" title="Do you want to keep parameter fixed?">fixed_</a>){
<a name="l00911"></a>00911         <span class="keywordflow">throw</span> <a class="code" href="../../db/d3f/classParameterFixed.xhtml" title="Parameter cannot be changed.">ParameterFixed</a>();
<a name="l00912"></a>00912         <span class="keywordflow">return</span>;
<a name="l00913"></a>00913     }
<a name="l00914"></a>00914     <a class="code" href="../../df/d1c/classBoolParameter.xhtml#a5ac86e1f505fad22eeea171bcc8748c9">val_</a> = inVal;
<a name="l00915"></a>00915     <a class="code" href="../../df/d1c/classBoolParameter.xhtml#ad385b85691363fa3a304455f110cb1eb" title="A protected function which creates an output string for printing.">make_str</a>();
<a name="l00916"></a>00916     <a class="code" href="../../d7/d6a/classAbsParameter.xhtml#a9d8d907c87e67616f1fadf77475c650c" title="Notify all observing TreeNodes that parameter changed.">Notify</a>();
<a name="l00917"></a>00917   }
<a name="l00919"></a><a class="code" href="../../df/d1c/classBoolParameter.xhtml#a61be0c3c228bc957602a3811ea68e6cc">00919</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../df/d1c/classBoolParameter.xhtml#a61be0c3c228bc957602a3811ea68e6cc" title="Setter for error of parameter.">SetError</a>(<span class="keyword">const</span> <span class="keywordtype">bool</span> inErr) {<a class="code" href="../../df/d1c/classBoolParameter.xhtml#a21d7587dbe2a95be0329ef9933ff041d" title="Containers of parameter information.">err_</a> = inErr; <a class="code" href="../../df/d1c/classBoolParameter.xhtml#a9c192361dd600e72bbf06eee33fa0899" title="Is an error defined for this parameter?">error_</a> = <span class="keyword">true</span>; <a class="code" href="../../df/d1c/classBoolParameter.xhtml#ad385b85691363fa3a304455f110cb1eb" title="A protected function which creates an output string for printing.">make_str</a>();}
<a name="l00920"></a>00920 
<a name="l00922"></a><a class="code" href="../../df/d1c/classBoolParameter.xhtml#a651a5ed8154eed589c31b6c93e8538fc">00922</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../df/d1c/classBoolParameter.xhtml#a651a5ed8154eed589c31b6c93e8538fc" title="Call to fix parameter.">SetParameterFixed</a>() {<a class="code" href="../../df/d1c/classBoolParameter.xhtml#acaa36aae968e133f21b2cebb6216dee9" title="Do you want to keep parameter fixed?">fixed_</a>=<span class="keyword">true</span>;}
<a name="l00924"></a><a class="code" href="../../df/d1c/classBoolParameter.xhtml#a048483a4a765ad5b100a19b8d5f1ed49">00924</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../df/d1c/classBoolParameter.xhtml#a048483a4a765ad5b100a19b8d5f1ed49" title="Call to free parameter.">SetParameterFree</a>() {<a class="code" href="../../df/d1c/classBoolParameter.xhtml#acaa36aae968e133f21b2cebb6216dee9" title="Do you want to keep parameter fixed?">fixed_</a>=<span class="keyword">false</span>;}
<a name="l00926"></a><a class="code" href="../../df/d1c/classBoolParameter.xhtml#a827373e73426bc1df9e0504fd05452b6">00926</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../df/d1c/classBoolParameter.xhtml#a827373e73426bc1df9e0504fd05452b6" title="Set parameter free or fixed.">FixParameter</a>(<span class="keyword">const</span> <span class="keywordtype">bool</span> fixed) {<a class="code" href="../../df/d1c/classBoolParameter.xhtml#acaa36aae968e133f21b2cebb6216dee9" title="Do you want to keep parameter fixed?">fixed_</a>=fixed;}
<a name="l00927"></a>00927 
<a name="l00929"></a>00929 
<a name="l00934"></a><a class="code" href="../../df/d1c/classBoolParameter.xhtml#a54eac639b164144358026effa2aa37d6">00934</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> std::string <a class="code" href="../../df/d1c/classBoolParameter.xhtml#a54eac639b164144358026effa2aa37d6" title="A public function returning a string naming its type.">TypeName</a>(){
<a name="l00935"></a>00935     <span class="keywordflow">return</span> <span class="stringliteral">&quot;boolean&quot;</span>;
<a name="l00936"></a>00936   }
<a name="l00937"></a>00937 
<a name="l00938"></a>00938 <span class="keyword">protected</span>:
<a name="l00939"></a>00939   <span class="comment">//std::string out_; /*!&lt; Output string to print information */</span>
<a name="l00940"></a><a class="code" href="../../df/d1c/classBoolParameter.xhtml#a9c192361dd600e72bbf06eee33fa0899">00940</a>   <span class="keywordtype">bool</span> <a class="code" href="../../df/d1c/classBoolParameter.xhtml#a9c192361dd600e72bbf06eee33fa0899" title="Is an error defined for this parameter?">error_</a>; 
<a name="l00941"></a><a class="code" href="../../df/d1c/classBoolParameter.xhtml#a16c8c857c4c9cd45714e7858b41f55f2">00941</a>   <span class="keywordtype">bool</span> <a class="code" href="../../df/d1c/classBoolParameter.xhtml#a16c8c857c4c9cd45714e7858b41f55f2" title="Do you want to restrict your parameter?">usebounds_</a>; 
<a name="l00942"></a><a class="code" href="../../df/d1c/classBoolParameter.xhtml#acaa36aae968e133f21b2cebb6216dee9">00942</a>   <span class="keywordtype">bool</span> <a class="code" href="../../df/d1c/classBoolParameter.xhtml#acaa36aae968e133f21b2cebb6216dee9" title="Do you want to keep parameter fixed?">fixed_</a>; 
<a name="l00943"></a><a class="code" href="../../df/d1c/classBoolParameter.xhtml#a5ac86e1f505fad22eeea171bcc8748c9">00943</a>   <span class="keywordtype">int</span> <a class="code" href="../../df/d1c/classBoolParameter.xhtml#a5ac86e1f505fad22eeea171bcc8748c9">val_</a>, <a class="code" href="../../df/d1c/classBoolParameter.xhtml#a21d7587dbe2a95be0329ef9933ff041d" title="Containers of parameter information.">err_</a>; 
<a name="l00945"></a>00945 
<a name="l00946"></a>00946 
<a name="l00951"></a><a class="code" href="../../df/d1c/classBoolParameter.xhtml#ad385b85691363fa3a304455f110cb1eb">00951</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../df/d1c/classBoolParameter.xhtml#ad385b85691363fa3a304455f110cb1eb" title="A protected function which creates an output string for printing.">make_str</a>() {
<a name="l00952"></a>00952     std::stringstream oss;
<a name="l00953"></a>00953     oss &lt;&lt; <a class="code" href="../../d7/d6a/classAbsParameter.xhtml#a1eaa1cd6f79b60be57c9b924eda0cad2" title="internal name of the parameter">name_</a>;
<a name="l00954"></a>00954     oss &lt;&lt; <span class="stringliteral">&quot;\t Val = &quot;</span> &lt;&lt; <a class="code" href="../../df/d1c/classBoolParameter.xhtml#a5ac86e1f505fad22eeea171bcc8748c9">val_</a>;
<a name="l00955"></a>00955     <span class="keywordflow">if</span>(<a class="code" href="../../df/d1c/classBoolParameter.xhtml#a9c192361dd600e72bbf06eee33fa0899" title="Is an error defined for this parameter?">error_</a>)
<a name="l00956"></a>00956       oss &lt;&lt; <span class="stringliteral">&quot;\t  Err = &quot;</span> &lt;&lt; <a class="code" href="../../df/d1c/classBoolParameter.xhtml#a21d7587dbe2a95be0329ef9933ff041d" title="Containers of parameter information.">err_</a>;
<a name="l00957"></a>00957     oss &lt;&lt; <span class="stringliteral">&quot;\t Type = &quot;</span> &lt;&lt; <a class="code" href="../../df/d1c/classBoolParameter.xhtml#a54eac639b164144358026effa2aa37d6" title="A public function returning a string naming its type.">TypeName</a>();
<a name="l00958"></a>00958     <a class="code" href="../../d7/d6a/classAbsParameter.xhtml#a65c954387c0ad30e8daf73fddb4b27db" title="Output string to print information.">out_</a> = oss.str();
<a name="l00959"></a>00959 
<a name="l00960"></a>00960     std::stringstream ovs;
<a name="l00961"></a>00961     ovs &lt;&lt; <a class="code" href="../../df/d1c/classBoolParameter.xhtml#a5ac86e1f505fad22eeea171bcc8748c9">val_</a>;
<a name="l00962"></a>00962     <a class="code" href="../../d7/d6a/classAbsParameter.xhtml#ac9bd4b866495c7770e34cad366ebd0e2" title="Output string to print only value.">outVal_</a> = ovs.str();
<a name="l00963"></a>00963   }
<a name="l00964"></a>00964 
<a name="l00965"></a>00965 };
<a name="l00966"></a>00966 
<a name="l00967"></a>00967 <span class="preprocessor">#endif</span>
</pre></div></div>
</div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<hr class="footer"/><address class="footer"><small>Generated on Mon Dec 16 2013 for ComPWA by&#160;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.7.4 </small></address>
</body>
</html>
