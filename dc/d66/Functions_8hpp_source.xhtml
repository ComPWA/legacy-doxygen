<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>ComPWA: Core/Functions.hpp Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body onload='searchBox.OnSelectItem(0);'>
<!-- Generated by Doxygen 1.7.4 -->
<script type="text/javascript"><!--
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
--></script>
<div id="top">
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">ComPWA</div>
   <div id="projectbrief">Common Partial-Wave-Analysis Framework</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="../../index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="../../namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="../../annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="../../files.xhtml"><span>Files</span></a></li>
      <li id="searchli">
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="../../search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="../../search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="../../files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="../../globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<div class="header">
  <div class="headertitle">
<div class="title">Core/Functions.hpp</div>  </div>
</div>
<div class="contents">
<a href="../../dc/d66/Functions_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">//-------------------------------------------------------------------------------</span>
<a name="l00002"></a>00002 <span class="comment">// Copyright (c) 2013 Mathias Michel.</span>
<a name="l00003"></a>00003 <span class="comment">//</span>
<a name="l00004"></a>00004 <span class="comment">// This file is part of ComPWA, check license.txt for details</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">// All rights reserved. This program and the accompanying materials</span>
<a name="l00007"></a>00007 <span class="comment">// are made available under the terms of the GNU Public License v3.0</span>
<a name="l00008"></a>00008 <span class="comment">// which accompanies this distribution, and is available at</span>
<a name="l00009"></a>00009 <span class="comment">// http://www.gnu.org/licenses/gpl.html</span>
<a name="l00010"></a>00010 <span class="comment">//</span>
<a name="l00011"></a>00011 <span class="comment">// Contributors:</span>
<a name="l00012"></a>00012 <span class="comment">//     Mathias Michel - initial API and implementation</span>
<a name="l00013"></a>00013 <span class="comment">//-------------------------------------------------------------------------------</span>
<a name="l00015"></a>00015 <span class="comment"></span>
<a name="l00026"></a>00026 <span class="preprocessor">#ifndef _FUNCTIONS_HPP_</span>
<a name="l00027"></a>00027 <span class="preprocessor"></span><span class="preprocessor">#define _FUNCTIONS_HPP_</span>
<a name="l00028"></a>00028 <span class="preprocessor"></span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;math.h&gt;</span>
<a name="l00031"></a>00031 
<a name="l00032"></a>00032 <span class="preprocessor">#include &quot;<a class="code" href="../../d2/de9/Exceptions_8hpp.xhtml" title="This class defines the ComPWA exception base-class and provides a set of standard exceptions...">Core/Exceptions.hpp</a>&quot;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &quot;<a class="code" href="../../df/d9f/ParameterList_8hpp.xhtml" title="This class provides a list of fit parameters which can have different types.">Core/ParameterList.hpp</a>&quot;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &quot;<a class="code" href="../../db/dce/Parameter_8hpp.xhtml" title="This class implements some internal container of parameters.">Core/Parameter.hpp</a>&quot;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &quot;<a class="code" href="../../d8/def/AbsParameter_8hpp.xhtml" title="This class defines the internal container of a parameter.">Core/AbsParameter.hpp</a>&quot;</span>
<a name="l00036"></a>00036 
<a name="l00037"></a><a class="code" href="../../d2/df2/classStrategy.xhtml">00037</a> <span class="keyword">class </span><a class="code" href="../../d2/df2/classStrategy.xhtml" title="Functions to be used in FuntionTree.">Strategy</a>
<a name="l00038"></a>00038 {
<a name="l00039"></a>00039 <span class="keyword">public</span>:
<a name="l00041"></a><a class="code" href="../../d2/df2/classStrategy.xhtml#a2021a15bbc4f0d13f7b92f8933db2235">00041</a>   <a class="code" href="../../d2/df2/classStrategy.xhtml#a2021a15bbc4f0d13f7b92f8933db2235" title="Constructor.">Strategy</a>(){
<a name="l00042"></a>00042   };
<a name="l00043"></a>00043 
<a name="l00045"></a>00045 
<a name="l00050"></a><a class="code" href="../../d2/df2/classStrategy.xhtml#a560d202f1b87ce8e46fab44d9320f2ba">00050</a>   <span class="keyword">friend</span> std::ostream&amp; operator&lt;&lt;( std::ostream&amp; out, std::shared_ptr&lt;Strategy&gt; b ){
<a name="l00051"></a>00051     <span class="keywordflow">return</span> out &lt;&lt; b-&gt;to_str();
<a name="l00052"></a>00052   }
<a name="l00053"></a>00053 
<a name="l00055"></a>00055 
<a name="l00060"></a><a class="code" href="../../d2/df2/classStrategy.xhtml#afc4f637bf8c2a2e2f038ea925c8609a0">00060</a>   <span class="keyword">friend</span> std::ostream&amp; <a class="code" href="../../d2/df2/classStrategy.xhtml#afc4f637bf8c2a2e2f038ea925c8609a0" title="friend function to stream parameter information to output">operator&lt;&lt;</a>( std::ostream&amp; out, <span class="keyword">const</span> <a class="code" href="../../d2/df2/classStrategy.xhtml" title="Functions to be used in FuntionTree.">Strategy</a>&amp; b ){
<a name="l00061"></a>00061     <span class="keywordflow">return</span> out &lt;&lt; b.<a class="code" href="../../d2/df2/classStrategy.xhtml#a76fc8e8159e9c60afc4556bc106311a2" title="Pure Virtual interface for streaming info about the strategy.">to_str</a>();
<a name="l00062"></a>00062   }
<a name="l00063"></a>00063 
<a name="l00065"></a>00065   <span class="keyword">virtual</span> <span class="keyword">const</span> std::string <a class="code" href="../../d2/df2/classStrategy.xhtml#a76fc8e8159e9c60afc4556bc106311a2" title="Pure Virtual interface for streaming info about the strategy.">to_str</a>() <span class="keyword">const</span> =0;
<a name="l00066"></a>00066 
<a name="l00068"></a>00068   <span class="keyword">virtual</span> std::shared_ptr&lt;AbsParameter&gt; <a class="code" href="../../d2/df2/classStrategy.xhtml#a7cd96afdcb5825742cdf3a383473fc8f" title="Pure Virtual interface for executing a function.">execute</a>(<span class="keyword">const</span> <a class="code" href="../../d1/d9d/classParameterList.xhtml" title="Internal container representing a parameter list.">ParameterList</a>&amp; paras) = 0;
<a name="l00069"></a>00069 };
<a name="l00070"></a>00070 
<a name="l00071"></a><a class="code" href="../../d9/db9/classAddAll.xhtml">00071</a> <span class="keyword">class </span><a class="code" href="../../d9/db9/classAddAll.xhtml">AddAll</a> : <span class="keyword">public</span> <a class="code" href="../../d2/df2/classStrategy.xhtml" title="Functions to be used in FuntionTree.">Strategy</a>
<a name="l00072"></a>00072 {
<a name="l00073"></a>00073 <span class="keyword">public</span>:
<a name="l00074"></a><a class="code" href="../../d9/db9/classAddAll.xhtml#aa158301f03f2458325f2c1dea63fe6b4">00074</a>   <a class="code" href="../../d9/db9/classAddAll.xhtml#aa158301f03f2458325f2c1dea63fe6b4">AddAll</a>(){
<a name="l00075"></a>00075   };
<a name="l00076"></a>00076 
<a name="l00077"></a><a class="code" href="../../d9/db9/classAddAll.xhtml#aedaf73092eb9697e2d4f1ed9c50fd82b">00077</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> std::string <a class="code" href="../../d9/db9/classAddAll.xhtml#aedaf73092eb9697e2d4f1ed9c50fd82b" title="Pure Virtual interface for streaming info about the strategy.">to_str</a>()<span class="keyword"> const</span>{
<a name="l00078"></a>00078     <span class="keywordflow">return</span> <span class="stringliteral">&quot;+&quot;</span>;
<a name="l00079"></a>00079   }
<a name="l00080"></a>00080 
<a name="l00081"></a><a class="code" href="../../d9/db9/classAddAll.xhtml#aa77125907f161a742c20d37894b52ae1">00081</a>   <span class="keyword">virtual</span> std::shared_ptr&lt;AbsParameter&gt; <a class="code" href="../../d9/db9/classAddAll.xhtml#aa77125907f161a742c20d37894b52ae1" title="Pure Virtual interface for executing a function.">execute</a>(<span class="keyword">const</span> <a class="code" href="../../d1/d9d/classParameterList.xhtml" title="Internal container representing a parameter list.">ParameterList</a>&amp; paras){
<a name="l00082"></a>00082     <span class="keywordtype">double</span> result = 0;
<a name="l00083"></a>00083     <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i=0; i&lt;paras.<a class="code" href="../../d1/d9d/classParameterList.xhtml#aa626799b903b16e7f6f29f918c626f9e" title="Getter for number of double parameter.">GetNDouble</a>(); i++)
<a name="l00084"></a>00084       result+=paras.<a class="code" href="../../d1/d9d/classParameterList.xhtml#a99c664620aa97bc31d1defcf7ab4c927" title="Getter for parameter value.">GetParameterValue</a>(i);
<a name="l00085"></a>00085 
<a name="l00086"></a>00086     <span class="comment">//ParameterList out;</span>
<a name="l00087"></a>00087     <span class="comment">// out.AddParameter(DoubleParameter(&quot;AddAllResult&quot;,result));</span>
<a name="l00088"></a>00088     <span class="keywordflow">return</span> std::shared_ptr&lt;AbsParameter&gt;(<span class="keyword">new</span> <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml" title="Implementations for internal parameter.">DoubleParameter</a>(<span class="stringliteral">&quot;AddAllResult&quot;</span>,result));
<a name="l00089"></a>00089   };
<a name="l00090"></a>00090 };
<a name="l00091"></a>00091 
<a name="l00092"></a><a class="code" href="../../dc/dfa/classMultAll.xhtml">00092</a> <span class="keyword">class </span><a class="code" href="../../dc/dfa/classMultAll.xhtml">MultAll</a> : <span class="keyword">public</span> <a class="code" href="../../d2/df2/classStrategy.xhtml" title="Functions to be used in FuntionTree.">Strategy</a>
<a name="l00093"></a>00093 {
<a name="l00094"></a>00094 <span class="keyword">public</span>:
<a name="l00095"></a><a class="code" href="../../dc/dfa/classMultAll.xhtml#a93b5e1a55449c2c426c6247fb2f98842">00095</a>   <a class="code" href="../../dc/dfa/classMultAll.xhtml#a93b5e1a55449c2c426c6247fb2f98842">MultAll</a>(){
<a name="l00096"></a>00096   };
<a name="l00097"></a>00097 
<a name="l00098"></a><a class="code" href="../../dc/dfa/classMultAll.xhtml#aa2c9e70e7b9e788b9d71cd1b82a7e268">00098</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> std::string <a class="code" href="../../dc/dfa/classMultAll.xhtml#aa2c9e70e7b9e788b9d71cd1b82a7e268" title="Pure Virtual interface for streaming info about the strategy.">to_str</a>()<span class="keyword"> const</span>{
<a name="l00099"></a>00099     <span class="keywordflow">return</span> <span class="stringliteral">&quot;*&quot;</span>;
<a name="l00100"></a>00100   }
<a name="l00101"></a>00101 
<a name="l00102"></a><a class="code" href="../../dc/dfa/classMultAll.xhtml#a557d00631d62310b1e79fadff7e9ec4c">00102</a>   <span class="keyword">virtual</span> std::shared_ptr&lt;AbsParameter&gt; <a class="code" href="../../dc/dfa/classMultAll.xhtml#a557d00631d62310b1e79fadff7e9ec4c" title="Pure Virtual interface for executing a function.">execute</a>(<span class="keyword">const</span> <a class="code" href="../../d1/d9d/classParameterList.xhtml" title="Internal container representing a parameter list.">ParameterList</a>&amp; paras){
<a name="l00103"></a>00103     <span class="keywordtype">double</span> result = 1.;
<a name="l00104"></a>00104     <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i=0; i&lt;paras.<a class="code" href="../../d1/d9d/classParameterList.xhtml#aa626799b903b16e7f6f29f918c626f9e" title="Getter for number of double parameter.">GetNDouble</a>(); i++)
<a name="l00105"></a>00105       result*=paras.<a class="code" href="../../d1/d9d/classParameterList.xhtml#a99c664620aa97bc31d1defcf7ab4c927" title="Getter for parameter value.">GetParameterValue</a>(i);
<a name="l00106"></a>00106 
<a name="l00107"></a>00107     <span class="comment">//ParameterList out;</span>
<a name="l00108"></a>00108     <span class="comment">//out.AddParameter(DoubleParameter(&quot;MultAllResult&quot;,result));</span>
<a name="l00109"></a>00109     <span class="keywordflow">return</span> std::shared_ptr&lt;AbsParameter&gt;(<span class="keyword">new</span> <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml" title="Implementations for internal parameter.">DoubleParameter</a>(<span class="stringliteral">&quot;MultAllResult&quot;</span>,result));
<a name="l00110"></a>00110   };
<a name="l00111"></a>00111 };
<a name="l00112"></a>00112 
<a name="l00113"></a><a class="code" href="../../da/d64/classPowerTwo.xhtml">00113</a> <span class="keyword">class </span><a class="code" href="../../da/d64/classPowerTwo.xhtml">PowerTwo</a> : <span class="keyword">public</span> <a class="code" href="../../d2/df2/classStrategy.xhtml" title="Functions to be used in FuntionTree.">Strategy</a>
<a name="l00114"></a>00114 {
<a name="l00115"></a>00115 <span class="keyword">public</span>:
<a name="l00116"></a><a class="code" href="../../da/d64/classPowerTwo.xhtml#afd7c712bc49bb978d71baada0dcf1f9b">00116</a>   <a class="code" href="../../da/d64/classPowerTwo.xhtml#afd7c712bc49bb978d71baada0dcf1f9b">PowerTwo</a>(){
<a name="l00117"></a>00117   };
<a name="l00118"></a>00118 
<a name="l00119"></a><a class="code" href="../../da/d64/classPowerTwo.xhtml#a15896e9f73ddf331028bb6258d47065b">00119</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> std::string <a class="code" href="../../da/d64/classPowerTwo.xhtml#a15896e9f73ddf331028bb6258d47065b" title="Pure Virtual interface for streaming info about the strategy.">to_str</a>()<span class="keyword"> const</span>{
<a name="l00120"></a>00120     <span class="keywordflow">return</span> <span class="stringliteral">&quot;^&quot;</span>;
<a name="l00121"></a>00121   }
<a name="l00122"></a>00122 
<a name="l00123"></a><a class="code" href="../../da/d64/classPowerTwo.xhtml#aef2d2067032bdaca5783df14cb3741a1">00123</a>   <span class="keyword">virtual</span> std::shared_ptr&lt;AbsParameter&gt; <a class="code" href="../../da/d64/classPowerTwo.xhtml#aef2d2067032bdaca5783df14cb3741a1" title="Pure Virtual interface for executing a function.">execute</a>(<span class="keyword">const</span> <a class="code" href="../../d1/d9d/classParameterList.xhtml" title="Internal container representing a parameter list.">ParameterList</a>&amp; paras){
<a name="l00124"></a>00124     <span class="keywordflow">if</span>(paras.<a class="code" href="../../d1/d9d/classParameterList.xhtml#aa626799b903b16e7f6f29f918c626f9e" title="Getter for number of double parameter.">GetNDouble</a>()!=2){
<a name="l00125"></a>00125         <span class="keywordflow">throw</span> <a class="code" href="../../d8/db1/classBadIndex.xhtml" title="Index out of range.">BadIndex</a>(<span class="stringliteral">&quot;need exact two parameters&quot;</span>);
<a name="l00126"></a>00126         <span class="keywordflow">return</span> std::shared_ptr&lt;AbsParameter&gt;();
<a name="l00127"></a>00127     }
<a name="l00128"></a>00128     <span class="comment">//return pow(paras[0],paras[1]);</span>
<a name="l00129"></a>00129     <span class="comment">//ParameterList out;</span>
<a name="l00130"></a>00130     <span class="comment">//out.AddParameter(DoubleParameter(&quot;PowerTwoResult&quot;,pow(paras.GetParameterValue(0),paras.GetParameterValue(1))));</span>
<a name="l00131"></a>00131     <span class="keywordflow">return</span> std::shared_ptr&lt;AbsParameter&gt;(<span class="keyword">new</span> <a class="code" href="../../dd/d8d/classDoubleParameter.xhtml" title="Implementations for internal parameter.">DoubleParameter</a>(<span class="stringliteral">&quot;PowerTwoResult&quot;</span>,pow(paras.<a class="code" href="../../d1/d9d/classParameterList.xhtml#a99c664620aa97bc31d1defcf7ab4c927" title="Getter for parameter value.">GetParameterValue</a>(0),paras.<a class="code" href="../../d1/d9d/classParameterList.xhtml#a99c664620aa97bc31d1defcf7ab4c927" title="Getter for parameter value.">GetParameterValue</a>(1))));
<a name="l00132"></a>00132   };
<a name="l00133"></a>00133 };
<a name="l00134"></a>00134 
<a name="l00135"></a>00135 <span class="preprocessor">#endif</span>
</pre></div></div>
</div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<hr class="footer"/><address class="footer"><small>Generated on Mon Dec 16 2013 for ComPWA by&#160;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.7.4 </small></address>
</body>
</html>
