<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>ComPWA: DoubleParameter Class Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body onload='searchBox.OnSelectItem(0);'>
<!-- Generated by Doxygen 1.7.4 -->
<script type="text/javascript"><!--
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
--></script>
<div id="top">
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">ComPWA</div>
   <div id="projectbrief">Common Partial-Wave-Analysis Framework</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="../../index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="../../namespaces.xhtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="../../annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="../../files.xhtml"><span>Files</span></a></li>
      <li id="searchli">
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="../../search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="../../search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="../../annotated.xhtml"><span>Class&#160;List</span></a></li>
      <li><a href="../../classes.xhtml"><span>Class&#160;Index</span></a></li>
      <li><a href="../../inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="../../functions.xhtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#pro-attribs">Protected Attributes</a> &#124;
<a href="#friends">Friends</a>  </div>
  <div class="headertitle">
<div class="title">DoubleParameter Class Reference</div>  </div>
</div>
<div class="contents">
<!-- doxytag: class="DoubleParameter" --><!-- doxytag: inherits="AbsParameter" -->
<p>Implementations for internal parameter.  
 <a href="../../dd/d8d/classDoubleParameter.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../db/dce/Parameter_8hpp_source.xhtml">Parameter.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for DoubleParameter:</div>
<div class="dyncontent">
<div class="center"><iframe src="../../d0/d9f/classDoubleParameter__inherit__graph.svg" width="166" height="1046" frameborder="0" scrolling="no"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
<center><span class="legend">[<a href="../../graph_legend.xhtml">legend</a>]</span></center></div>
<div class="dynheader">
Collaboration diagram for DoubleParameter:</div>
<div class="dyncontent">
<div class="center"><iframe src="../../dd/d26/classDoubleParameter__coll__graph.svg" width="448" height="1371" frameborder="0" scrolling="no"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
<center><span class="legend">[<a href="../../graph_legend.xhtml">legend</a>]</span></center></div>

<p><a href="../../da/d7e/classDoubleParameter-members.xhtml">List of all members.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d8d/classDoubleParameter.xhtml#ad98f7654b0162912c50698c8e75d540d">DoubleParameter</a> (std::string inName)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Standard constructor without information.  <a href="#ad98f7654b0162912c50698c8e75d540d"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d8d/classDoubleParameter.xhtml#a1d65ffdb2141798b3b1db44c74e55a19">DoubleParameter</a> (std::string inName, const double value)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Standard constructor with a value.  <a href="#a1d65ffdb2141798b3b1db44c74e55a19"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d8d/classDoubleParameter.xhtml#afac041ec0d522c7e28ebd95b73439ae3">DoubleParameter</a> (std::string inName, const double value, const double error)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Standard constructor with value and error.  <a href="#afac041ec0d522c7e28ebd95b73439ae3"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d8d/classDoubleParameter.xhtml#abf8cf6200016dd6aaf2b9799ed89956d">DoubleParameter</a> (std::string inName, const double value, const double min, const double max)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Standard constructor with value and bounds.  <a href="#abf8cf6200016dd6aaf2b9799ed89956d"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d8d/classDoubleParameter.xhtml#ab440fcf47bdc60da473b5727d36d08f1">DoubleParameter</a> (std::string inName, const double value, const double min, const double max, const double error)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Standard constructor with value, bounds and error.  <a href="#ab440fcf47bdc60da473b5727d36d08f1"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d8d/classDoubleParameter.xhtml#a4e1e25b484a796605b16a094ea8cf4b3">DoubleParameter</a> (const <a class="el" href="../../dd/d8d/classDoubleParameter.xhtml">DoubleParameter</a> &amp;in)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy constructor using = operator.  <a href="#a4e1e25b484a796605b16a094ea8cf4b3"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d8d/classDoubleParameter.xhtml#ac86e8a2dc149bc9465e88ded618e2e7f">~DoubleParameter</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Empty Destructor.  <a href="#ac86e8a2dc149bc9465e88ded618e2e7f"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d8d/classDoubleParameter.xhtml#ac7f7e9985fe1d3fad443fa11c1fbe39a">HasBounds</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if parameter has bounds.  <a href="#ac7f7e9985fe1d3fad443fa11c1fbe39a"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d8d/classDoubleParameter.xhtml#a270b26b7cbe645520028ad5bf0c2e316">UseBounds</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if bounds should be used.  <a href="#a270b26b7cbe645520028ad5bf0c2e316"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d8d/classDoubleParameter.xhtml#ab8787514bea257bb4f94bff05c3599ee">HasError</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if parameter has an error.  <a href="#ab8787514bea257bb4f94bff05c3599ee"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d8d/classDoubleParameter.xhtml#afb30d7172e0f30563624720fec51108a">IsFixed</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if parameter is fixed.  <a href="#afb30d7172e0f30563624720fec51108a"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d8d/classDoubleParameter.xhtml#a272fa0cbf8b99c4a9339bc5bf40a0d86">GetValue</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Getter for value of parameter.  <a href="#a272fa0cbf8b99c4a9339bc5bf40a0d86"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d8d/classDoubleParameter.xhtml#a5c6dec6a2501e6d8fa0e1d64c5f73af2">GetMinValue</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Getter for lower bound of parameter.  <a href="#a5c6dec6a2501e6d8fa0e1d64c5f73af2"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d8d/classDoubleParameter.xhtml#a00c1fcc120e43f7acfad920833acad11">GetMaxValue</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Getter for upper bound of parameter.  <a href="#a00c1fcc120e43f7acfad920833acad11"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d8d/classDoubleParameter.xhtml#a67ea3e2cfa851f01f20e6b3479466325">GetError</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Getter for error of parameter.  <a href="#a67ea3e2cfa851f01f20e6b3479466325"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const std::complex<br class="typebreak"/>
&lt; double &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d8d/classDoubleParameter.xhtml#a363d03c014cb2857401e907609ab3d5f">getNodeValue</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Getter for <a class="el" href="../../db/d4e/classFunctionTree.xhtml" title="FunctionTree for the actual Optimization.">FunctionTree</a> support.  <a href="#a363d03c014cb2857401e907609ab3d5f"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d8d/classDoubleParameter.xhtml#aee4bb00f8751676922b0f62f13d15317">SetValue</a> (const double inVal)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Setter for value of parameter.  <a href="#aee4bb00f8751676922b0f62f13d15317"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d8d/classDoubleParameter.xhtml#a11e0436e045f24facdc4ad990ea6bd01">SetError</a> (const double inErr)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Setter for error of parameter.  <a href="#a11e0436e045f24facdc4ad990ea6bd01"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d8d/classDoubleParameter.xhtml#a73d2efdbb0b9e4acb58bd1d20199b20d">SetMinMax</a> (const double inMin, const double inMax)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Setter for bounds of parameter.  <a href="#a73d2efdbb0b9e4acb58bd1d20199b20d"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d8d/classDoubleParameter.xhtml#afaf1cd16a7f078e31c61c36f71bebee9">SetMinValue</a> (const double min)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Setter for lower bound.  <a href="#afaf1cd16a7f078e31c61c36f71bebee9"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d8d/classDoubleParameter.xhtml#ac59ca32f4cd78231d86d837b8d097162">SetMaxValue</a> (const double max)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Setter for upper bound.  <a href="#ac59ca32f4cd78231d86d837b8d097162"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d8d/classDoubleParameter.xhtml#aa2ccfd3dff75080b249c2829b51c2aa4">UseBounds</a> (const bool use)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Set if bounds should be used.  <a href="#aa2ccfd3dff75080b249c2829b51c2aa4"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d8d/classDoubleParameter.xhtml#a04634fceaa8029c1d267bd6c28c788fe">SetParameterFixed</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Call to fix parameter.  <a href="#a04634fceaa8029c1d267bd6c28c788fe"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d8d/classDoubleParameter.xhtml#a7c56ce76351f848a0b02e82b7050679a">SetParameterFree</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Call to free parameter.  <a href="#a7c56ce76351f848a0b02e82b7050679a"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d8d/classDoubleParameter.xhtml#acdc142eb9be5d49aae687b9e338124a1">FixParameter</a> (const bool fixed)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Set parameter free or fixed.  <a href="#acdc142eb9be5d49aae687b9e338124a1"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d8d/classDoubleParameter.xhtml#a602221f7ad87fa76c60d8cd8649ad5f0">TypeName</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">A public function returning a string naming its type.  <a href="#a602221f7ad87fa76c60d8cd8649ad5f0"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const std::string &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/d6a/classAbsParameter.xhtml#a881d731fe387c785a76b6aad22445400">GetName</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Getter for name of object.  <a href="#a881d731fe387c785a76b6aad22445400"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const <a class="el" href="../../d8/def/AbsParameter_8hpp.xhtml#a5c1a62d78971166ef74c26cf99527f8a">ParType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/d6a/classAbsParameter.xhtml#a126b949117c9428eca256fb279e34a06">type</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Getter for type of object.  <a href="#a126b949117c9428eca256fb279e34a06"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/d6a/classAbsParameter.xhtml#ae811fcec3165b341f11817196eba837f">Attach</a> (std::shared_ptr&lt; <a class="el" href="../../df/d75/classParObserver.xhtml">ParObserver</a> &gt; newObserver)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Attaches a new <a class="el" href="../../da/d83/classTreeNode.xhtml" title="TreeNode is the interface for elements of the FunctionTree.">TreeNode</a> as Observer.  <a href="#ae811fcec3165b341f11817196eba837f"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/d6a/classAbsParameter.xhtml#a701f1791c5e45a5d20414836d5468826">Detach</a> (std::shared_ptr&lt; <a class="el" href="../../df/d75/classParObserver.xhtml">ParObserver</a> &gt; obsoleteObserver)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes TreeNodes not needed as Observer anymore.  <a href="#a701f1791c5e45a5d20414836d5468826"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/d6a/classAbsParameter.xhtml#a9d8d907c87e67616f1fadf77475c650c">Notify</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Notify all observing TreeNodes that parameter changed.  <a href="#a9d8d907c87e67616f1fadf77475c650c"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual std::string const &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/d6a/classAbsParameter.xhtml#a155e74bf1c96ce8321ab65c6a003f868">to_str</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">A public function returning a string with parameter information.  <a href="#a155e74bf1c96ce8321ab65c6a003f868"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual std::string const &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/d6a/classAbsParameter.xhtml#a68d85baeb9b1963a03795e4abf37db7a">val_to_str</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">A public function returning a string with parameter value.  <a href="#a68d85baeb9b1963a03795e4abf37db7a"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d8d/classDoubleParameter.xhtml#a342eae522e271c2a9f3ff28e3feb9bd7">check_bounds</a> (const double min, const double max)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">A protected function to check if bounds are valid.  <a href="#a342eae522e271c2a9f3ff28e3feb9bd7"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d8d/classDoubleParameter.xhtml#a2ae1b8adff069cad50f4586292d3e19d">make_str</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">A protected function which creates an output string for printing.  <a href="#a2ae1b8adff069cad50f4586292d3e19d"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d8d/classDoubleParameter.xhtml#a08c6fd32e356cec94d0cc57a95cd9d9e">bounds_</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Are valid bounds defined for this parameter?  <a href="#a08c6fd32e356cec94d0cc57a95cd9d9e"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d8d/classDoubleParameter.xhtml#a6b1d5b9ac1f8f3bb992a69f1c3e06edd">error_</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Is an error defined for this parameter?  <a href="#a6b1d5b9ac1f8f3bb992a69f1c3e06edd"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d8d/classDoubleParameter.xhtml#af07ddf0264eb60d46dfef6536850e748">usebounds_</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Do you want to restrict your parameter?  <a href="#af07ddf0264eb60d46dfef6536850e748"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d8d/classDoubleParameter.xhtml#a579abb4fe62c4e9c7d3224241b4c9b67">fixed_</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Do you want to keep parameter fixed?  <a href="#a579abb4fe62c4e9c7d3224241b4c9b67"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d8d/classDoubleParameter.xhtml#aa20191bc91e3c739c530d2046c13f59a">val_</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d8d/classDoubleParameter.xhtml#afff186438bcde2cd4e370f8b9cc7b6d2">min_</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d8d/classDoubleParameter.xhtml#ae7a91745d7a5c2865eedb77496a8944c">max_</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d8d/classDoubleParameter.xhtml#a02ff8b300a991588e85d010940767d03">err_</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Containers of parameter information.  <a href="#a02ff8b300a991588e85d010940767d03"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/d6a/classAbsParameter.xhtml#a65c954387c0ad30e8daf73fddb4b27db">out_</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Output string to print information.  <a href="#a65c954387c0ad30e8daf73fddb4b27db"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/d6a/classAbsParameter.xhtml#ac9bd4b866495c7770e34cad366ebd0e2">outVal_</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Output string to print only value.  <a href="#ac9bd4b866495c7770e34cad366ebd0e2"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/d6a/classAbsParameter.xhtml#a1eaa1cd6f79b60be57c9b924eda0cad2">name_</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">internal name of the parameter  <a href="#a1eaa1cd6f79b60be57c9b924eda0cad2"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d8/def/AbsParameter_8hpp.xhtml#a5c1a62d78971166ef74c26cf99527f8a">ParType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/d6a/classAbsParameter.xhtml#a05225b008e34a284d5ffd65d0e479027">type_</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">ParType enum for type of parameter.  <a href="#a05225b008e34a284d5ffd65d0e479027"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::vector&lt; std::shared_ptr<br class="typebreak"/>
&lt; <a class="el" href="../../df/d75/classParObserver.xhtml">ParObserver</a> &gt; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/d6a/classAbsParameter.xhtml#abd724fca707acabfdf91b20739ce1e12">oberservingNodes</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">list of observers, e.g.  <a href="#abd724fca707acabfdf91b20739ce1e12"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="friends"></a>
Friends</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/d6a/classAbsParameter.xhtml#a3b45a8d9bd0b00a09238f40ca421543a">operator&lt;&lt;</a> (std::ostream &amp;out, std::shared_ptr&lt; <a class="el" href="../../d7/d6a/classAbsParameter.xhtml">AbsParameter</a> &gt; b)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Return shared_pointer pointing to this Parameter.  <a href="#a3b45a8d9bd0b00a09238f40ca421543a"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/d6a/classAbsParameter.xhtml#a4f06c9d592310ad3b31b4fc8f13e0faf">operator&lt;&lt;</a> (std::ostream &amp;out, const <a class="el" href="../../d7/d6a/classAbsParameter.xhtml">AbsParameter</a> &amp;b)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">friend function to stream parameter information to output  <a href="#a4f06c9d592310ad3b31b4fc8f13e0faf"></a><br/></td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>Implementations for internal parameter. </p>
</div><hr/><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="ad98f7654b0162912c50698c8e75d540d"></a><!-- doxytag: member="DoubleParameter::DoubleParameter" ref="ad98f7654b0162912c50698c8e75d540d" args="(std::string inName)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DoubleParameter::DoubleParameter </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>inName</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Standard constructor without information. </p>
<p>Standard constructor with no information provided. Creates parameter with value 0 but without bounds or an error. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">inName</td><td>internal string identifier of this parameter </td></tr>
  </table>
  </dd>
</dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="../../dd/d8d/classDoubleParameter.xhtml#a2ae1b8adff069cad50f4586292d3e19d" title="A protected function which creates an output string for printing.">make_str()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a1d65ffdb2141798b3b1db44c74e55a19"></a><!-- doxytag: member="DoubleParameter::DoubleParameter" ref="a1d65ffdb2141798b3b1db44c74e55a19" args="(std::string inName, const double value)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DoubleParameter::DoubleParameter </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>inName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Standard constructor with a value. </p>
<p>Standard constructor with just a value provided. Creates parameter with given value but without bounds or an error. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">inName</td><td>internal string identifier of this parameter </td></tr>
    <tr><td class="paramname">value</td><td>input value of the parameter </td></tr>
  </table>
  </dd>
</dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="../../dd/d8d/classDoubleParameter.xhtml#a2ae1b8adff069cad50f4586292d3e19d" title="A protected function which creates an output string for printing.">make_str()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="afac041ec0d522c7e28ebd95b73439ae3"></a><!-- doxytag: member="DoubleParameter::DoubleParameter" ref="afac041ec0d522c7e28ebd95b73439ae3" args="(std::string inName, const double value, const double error)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DoubleParameter::DoubleParameter </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>inName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>error</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Standard constructor with value and error. </p>
<p>Standard constructor with value and error provided. Creates parameter with given value and error but without bounds. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">inName</td><td>internal string identifier of this parameter </td></tr>
    <tr><td class="paramname">value</td><td>input value of the parameter </td></tr>
    <tr><td class="paramname">error</td><td>input error of the parameter </td></tr>
  </table>
  </dd>
</dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="../../dd/d8d/classDoubleParameter.xhtml#a2ae1b8adff069cad50f4586292d3e19d" title="A protected function which creates an output string for printing.">make_str()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="abf8cf6200016dd6aaf2b9799ed89956d"></a><!-- doxytag: member="DoubleParameter::DoubleParameter" ref="abf8cf6200016dd6aaf2b9799ed89956d" args="(std::string inName, const double value, const double min, const double max)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DoubleParameter::DoubleParameter </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>inName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>min</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>max</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Standard constructor with value and bounds. </p>
<p>Standard constructor with value and bounds provided. Creates parameter with given value and bounds but without error. If a check for valid bounds fails, just the value is used. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">inName</td><td>internal string identifier of this parameter </td></tr>
    <tr><td class="paramname">value</td><td>input value of the parameter </td></tr>
    <tr><td class="paramname">min</td><td>input lower bound </td></tr>
    <tr><td class="paramname">max</td><td>input upper bound </td></tr>
  </table>
  </dd>
</dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="../../dd/d8d/classDoubleParameter.xhtml#a2ae1b8adff069cad50f4586292d3e19d" title="A protected function which creates an output string for printing.">make_str()</a>, <a class="el" href="../../dd/d8d/classDoubleParameter.xhtml#a342eae522e271c2a9f3ff28e3feb9bd7" title="A protected function to check if bounds are valid.">check_bounds()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ab440fcf47bdc60da473b5727d36d08f1"></a><!-- doxytag: member="DoubleParameter::DoubleParameter" ref="ab440fcf47bdc60da473b5727d36d08f1" args="(std::string inName, const double value, const double min, const double max, const double error)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DoubleParameter::DoubleParameter </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>inName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>min</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>max</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>error</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Standard constructor with value, bounds and error. </p>
<p>Standard constructor with value, bounds and error provided. Creates parameter with the given information. If a check for valid bounds fails, just value and error are used. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">inName</td><td>internal string identifier of this parameter </td></tr>
    <tr><td class="paramname">value</td><td>input value of the parameter </td></tr>
    <tr><td class="paramname">min</td><td>input lower bound </td></tr>
    <tr><td class="paramname">max</td><td>input upper bound </td></tr>
    <tr><td class="paramname">error</td><td>input error of the parameter </td></tr>
  </table>
  </dd>
</dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="../../dd/d8d/classDoubleParameter.xhtml#a2ae1b8adff069cad50f4586292d3e19d" title="A protected function which creates an output string for printing.">make_str()</a>, <a class="el" href="../../dd/d8d/classDoubleParameter.xhtml#a342eae522e271c2a9f3ff28e3feb9bd7" title="A protected function to check if bounds are valid.">check_bounds()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a4e1e25b484a796605b16a094ea8cf4b3"></a><!-- doxytag: member="DoubleParameter::DoubleParameter" ref="a4e1e25b484a796605b16a094ea8cf4b3" args="(const DoubleParameter &amp;in)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DoubleParameter::DoubleParameter </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../dd/d8d/classDoubleParameter.xhtml">DoubleParameter</a> &amp;&#160;</td>
          <td class="paramname"><em>in</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Copy constructor using = operator. </p>
<p>Simple copy constructor using the = operator. As this operator is not overloaded in this class, c++ will copy every member variable. As this is a container class, this should be fine. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">in</td><td>input PWAParameter which variables will be copied </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ac86e8a2dc149bc9465e88ded618e2e7f"></a><!-- doxytag: member="DoubleParameter::~DoubleParameter" ref="ac86e8a2dc149bc9465e88ded618e2e7f" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual DoubleParameter::~DoubleParameter </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Empty Destructor. </p>
<p>There is nothing to destroy :( </p>

</div>
</div>
<hr/><h2>Member Function Documentation</h2>
<a class="anchor" id="ae811fcec3165b341f11817196eba837f"></a><!-- doxytag: member="DoubleParameter::Attach" ref="ae811fcec3165b341f11817196eba837f" args="(std::shared_ptr&lt; ParObserver &gt; newObserver)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void AbsParameter::Attach </td>
          <td>(</td>
          <td class="paramtype">std::shared_ptr&lt; <a class="el" href="../../df/d75/classParObserver.xhtml">ParObserver</a> &gt;&#160;</td>
          <td class="paramname"><em>newObserver</em></td><td>)</td>
          <td><code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Attaches a new <a class="el" href="../../da/d83/classTreeNode.xhtml" title="TreeNode is the interface for elements of the FunctionTree.">TreeNode</a> as Observer. </p>

</div>
</div>
<a class="anchor" id="a342eae522e271c2a9f3ff28e3feb9bd7"></a><!-- doxytag: member="DoubleParameter::check_bounds" ref="a342eae522e271c2a9f3ff28e3feb9bd7" args="(const double min, const double max)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool DoubleParameter::check_bounds </td>
          <td>(</td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>min</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>max</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline, protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>A protected function to check if bounds are valid. </p>
<p>This function checks if the bounds of the parameter are valid: Upper bound should be larger then lower bound and the value should be inside of the bounds. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">max</td><td>upper bound to check </td></tr>
    <tr><td class="paramname">min</td><td>lower bound to check </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>bool if bounds are valid </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd>Parameter(const double value, const double min, const double max) </dd>
<dd>
Parameter(const double value, const double min, const double max, const double error) </dd>
<dd>
<a class="el" href="../../dd/d8d/classDoubleParameter.xhtml#a73d2efdbb0b9e4acb58bd1d20199b20d" title="Setter for bounds of parameter.">SetMinMax()</a>, <a class="el" href="../../dd/d8d/classDoubleParameter.xhtml#afaf1cd16a7f078e31c61c36f71bebee9" title="Setter for lower bound.">SetMinValue()</a>, <a class="el" href="../../dd/d8d/classDoubleParameter.xhtml#ac59ca32f4cd78231d86d837b8d097162" title="Setter for upper bound.">SetMaxValue()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a701f1791c5e45a5d20414836d5468826"></a><!-- doxytag: member="DoubleParameter::Detach" ref="a701f1791c5e45a5d20414836d5468826" args="(std::shared_ptr&lt; ParObserver &gt; obsoleteObserver)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void AbsParameter::Detach </td>
          <td>(</td>
          <td class="paramtype">std::shared_ptr&lt; <a class="el" href="../../df/d75/classParObserver.xhtml">ParObserver</a> &gt;&#160;</td>
          <td class="paramname"><em>obsoleteObserver</em></td><td>)</td>
          <td><code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Removes TreeNodes not needed as Observer anymore. </p>

</div>
</div>
<a class="anchor" id="acdc142eb9be5d49aae687b9e338124a1"></a><!-- doxytag: member="DoubleParameter::FixParameter" ref="acdc142eb9be5d49aae687b9e338124a1" args="(const bool fixed)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const void DoubleParameter::FixParameter </td>
          <td>(</td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>fixed</em></td><td>)</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set parameter free or fixed. </p>

</div>
</div>
<a class="anchor" id="a67ea3e2cfa851f01f20e6b3479466325"></a><!-- doxytag: member="DoubleParameter::GetError" ref="a67ea3e2cfa851f01f20e6b3479466325" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const double DoubleParameter::GetError </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Getter for error of parameter. </p>

</div>
</div>
<a class="anchor" id="a00c1fcc120e43f7acfad920833acad11"></a><!-- doxytag: member="DoubleParameter::GetMaxValue" ref="a00c1fcc120e43f7acfad920833acad11" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const double DoubleParameter::GetMaxValue </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Getter for upper bound of parameter. </p>

</div>
</div>
<a class="anchor" id="a5c6dec6a2501e6d8fa0e1d64c5f73af2"></a><!-- doxytag: member="DoubleParameter::GetMinValue" ref="a5c6dec6a2501e6d8fa0e1d64c5f73af2" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const double DoubleParameter::GetMinValue </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Getter for lower bound of parameter. </p>

</div>
</div>
<a class="anchor" id="a881d731fe387c785a76b6aad22445400"></a><!-- doxytag: member="DoubleParameter::GetName" ref="a881d731fe387c785a76b6aad22445400" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const std::string&amp; AbsParameter::GetName </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline, virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Getter for name of object. </p>

</div>
</div>
<a class="anchor" id="a363d03c014cb2857401e907609ab3d5f"></a><!-- doxytag: member="DoubleParameter::getNodeValue" ref="a363d03c014cb2857401e907609ab3d5f" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const std::complex&lt;double&gt; DoubleParameter::getNodeValue </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Getter for <a class="el" href="../../db/d4e/classFunctionTree.xhtml" title="FunctionTree for the actual Optimization.">FunctionTree</a> support. </p>

</div>
</div>
<a class="anchor" id="a272fa0cbf8b99c4a9339bc5bf40a0d86"></a><!-- doxytag: member="DoubleParameter::GetValue" ref="a272fa0cbf8b99c4a9339bc5bf40a0d86" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const double DoubleParameter::GetValue </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Getter for value of parameter. </p>

</div>
</div>
<a class="anchor" id="ac7f7e9985fe1d3fad443fa11c1fbe39a"></a><!-- doxytag: member="DoubleParameter::HasBounds" ref="ac7f7e9985fe1d3fad443fa11c1fbe39a" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const bool DoubleParameter::HasBounds </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Check if parameter has bounds. </p>

</div>
</div>
<a class="anchor" id="ab8787514bea257bb4f94bff05c3599ee"></a><!-- doxytag: member="DoubleParameter::HasError" ref="ab8787514bea257bb4f94bff05c3599ee" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const bool DoubleParameter::HasError </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Check if parameter has an error. </p>

</div>
</div>
<a class="anchor" id="afb30d7172e0f30563624720fec51108a"></a><!-- doxytag: member="DoubleParameter::IsFixed" ref="afb30d7172e0f30563624720fec51108a" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const bool DoubleParameter::IsFixed </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Check if parameter is fixed. </p>

</div>
</div>
<a class="anchor" id="a2ae1b8adff069cad50f4586292d3e19d"></a><!-- doxytag: member="DoubleParameter::make_str" ref="a2ae1b8adff069cad50f4586292d3e19d" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual void DoubleParameter::make_str </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline, protected, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>A protected function which creates an output string for printing. </p>
<p>This function uses all available information about the parameter to create a string which will be streamed via the stream operator &lt;&lt;. </p>
<dl class="see"><dt><b>See also:</b></dt><dd>operator&lt;&lt;, <a class="el" href="../../d7/d6a/classAbsParameter.xhtml#a155e74bf1c96ce8321ab65c6a003f868" title="A public function returning a string with parameter information.">to_str()</a>, <a class="el" href="../../d7/d6a/classAbsParameter.xhtml#a126b949117c9428eca256fb279e34a06" title="Getter for type of object.">type()</a> </dd></dl>

<p>Implements <a class="el" href="../../d7/d6a/classAbsParameter.xhtml#a0c98ee88d1ccfbb6db5e7b02c96b2934">AbsParameter</a>.</p>

</div>
</div>
<a class="anchor" id="a9d8d907c87e67616f1fadf77475c650c"></a><!-- doxytag: member="DoubleParameter::Notify" ref="a9d8d907c87e67616f1fadf77475c650c" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void AbsParameter::Notify </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Notify all observing TreeNodes that parameter changed. </p>

</div>
</div>
<a class="anchor" id="a11e0436e045f24facdc4ad990ea6bd01"></a><!-- doxytag: member="DoubleParameter::SetError" ref="a11e0436e045f24facdc4ad990ea6bd01" args="(const double inErr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual void DoubleParameter::SetError </td>
          <td>(</td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>inErr</em></td><td>)</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Setter for error of parameter. </p>

</div>
</div>
<a class="anchor" id="ac59ca32f4cd78231d86d837b8d097162"></a><!-- doxytag: member="DoubleParameter::SetMaxValue" ref="ac59ca32f4cd78231d86d837b8d097162" args="(const double max)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const bool DoubleParameter::SetMaxValue </td>
          <td>(</td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>max</em></td><td>)</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Setter for upper bound. </p>
<p>Setter for upper bound of the parameter. If a check for valid bounds fails, it returns false and nothing changes. This means if the upper bound is invalid the parameter maintains its old bounds if it had some. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">max</td><td>input upper bound </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>bool if successful (re)set upper bound </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="../../dd/d8d/classDoubleParameter.xhtml#a342eae522e271c2a9f3ff28e3feb9bd7" title="A protected function to check if bounds are valid.">check_bounds()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a73d2efdbb0b9e4acb58bd1d20199b20d"></a><!-- doxytag: member="DoubleParameter::SetMinMax" ref="a73d2efdbb0b9e4acb58bd1d20199b20d" args="(const double inMin, const double inMax)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const bool DoubleParameter::SetMinMax </td>
          <td>(</td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>inMin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>inMax</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Setter for bounds of parameter. </p>

</div>
</div>
<a class="anchor" id="afaf1cd16a7f078e31c61c36f71bebee9"></a><!-- doxytag: member="DoubleParameter::SetMinValue" ref="afaf1cd16a7f078e31c61c36f71bebee9" args="(const double min)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const bool DoubleParameter::SetMinValue </td>
          <td>(</td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>min</em></td><td>)</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Setter for lower bound. </p>
<p>Setter for lower bound of the parameter. If a check for valid bounds fails, it returns false and nothing changes. This means if the lower bound is invalid the parameter maintains its old bounds if it had some. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">min</td><td>input lower bound </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>bool if successful (re)set lower bound </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="../../dd/d8d/classDoubleParameter.xhtml#a342eae522e271c2a9f3ff28e3feb9bd7" title="A protected function to check if bounds are valid.">check_bounds()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a04634fceaa8029c1d267bd6c28c788fe"></a><!-- doxytag: member="DoubleParameter::SetParameterFixed" ref="a04634fceaa8029c1d267bd6c28c788fe" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const void DoubleParameter::SetParameterFixed </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Call to fix parameter. </p>

</div>
</div>
<a class="anchor" id="a7c56ce76351f848a0b02e82b7050679a"></a><!-- doxytag: member="DoubleParameter::SetParameterFree" ref="a7c56ce76351f848a0b02e82b7050679a" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const void DoubleParameter::SetParameterFree </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Call to free parameter. </p>

</div>
</div>
<a class="anchor" id="aee4bb00f8751676922b0f62f13d15317"></a><!-- doxytag: member="DoubleParameter::SetValue" ref="aee4bb00f8751676922b0f62f13d15317" args="(const double inVal)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual void DoubleParameter::SetValue </td>
          <td>(</td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>inVal</em></td><td>)</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Setter for value of parameter. </p>

</div>
</div>
<a class="anchor" id="a155e74bf1c96ce8321ab65c6a003f868"></a><!-- doxytag: member="DoubleParameter::to_str" ref="a155e74bf1c96ce8321ab65c6a003f868" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual std::string const&amp; AbsParameter::to_str </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline, virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>A public function returning a string with parameter information. </p>
<p>This function simply returns the member string out_, which contains all parameter information. The string gets rebuild with every change of the parameter. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>string with parameter information </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd>operator&lt;&lt;, <a class="el" href="../../d7/d6a/classAbsParameter.xhtml#a0c98ee88d1ccfbb6db5e7b02c96b2934" title="Interface to fill output string, to be implemented by parameter implementations.">make_str()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a126b949117c9428eca256fb279e34a06"></a><!-- doxytag: member="DoubleParameter::type" ref="a126b949117c9428eca256fb279e34a06" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const <a class="el" href="../../d8/def/AbsParameter_8hpp.xhtml#a5c1a62d78971166ef74c26cf99527f8a">ParType</a> AbsParameter::type </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline, virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Getter for type of object. </p>

</div>
</div>
<a class="anchor" id="a602221f7ad87fa76c60d8cd8649ad5f0"></a><!-- doxytag: member="DoubleParameter::TypeName" ref="a602221f7ad87fa76c60d8cd8649ad5f0" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const std::string DoubleParameter::TypeName </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>A public function returning a string naming its type. </p>
<p>This function is used to get the type of the implementation of this general parameter interface. </p>
<dl class="see"><dt><b>See also:</b></dt><dd>operator&lt;&lt;, <a class="el" href="../../d7/d6a/classAbsParameter.xhtml#a155e74bf1c96ce8321ab65c6a003f868" title="A public function returning a string with parameter information.">to_str()</a>, <a class="el" href="../../dd/d8d/classDoubleParameter.xhtml#a2ae1b8adff069cad50f4586292d3e19d" title="A protected function which creates an output string for printing.">make_str()</a> </dd></dl>

<p>Implements <a class="el" href="../../d7/d6a/classAbsParameter.xhtml#a6798bb427c8fb456c4caae1b1b132ab7">AbsParameter</a>.</p>

</div>
</div>
<a class="anchor" id="a270b26b7cbe645520028ad5bf0c2e316"></a><!-- doxytag: member="DoubleParameter::UseBounds" ref="a270b26b7cbe645520028ad5bf0c2e316" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const bool DoubleParameter::UseBounds </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Check if bounds should be used. </p>

</div>
</div>
<a class="anchor" id="aa2ccfd3dff75080b249c2829b51c2aa4"></a><!-- doxytag: member="DoubleParameter::UseBounds" ref="aa2ccfd3dff75080b249c2829b51c2aa4" args="(const bool use)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const void DoubleParameter::UseBounds </td>
          <td>(</td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>use</em></td><td>)</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set if bounds should be used. </p>

</div>
</div>
<a class="anchor" id="a68d85baeb9b1963a03795e4abf37db7a"></a><!-- doxytag: member="DoubleParameter::val_to_str" ref="a68d85baeb9b1963a03795e4abf37db7a" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual std::string const&amp; AbsParameter::val_to_str </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline, virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>A public function returning a string with parameter value. </p>
<p>This function simply returns the member string outVal_, which contains the parameter value. The string gets rebuild with every change of the parameter. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>string with parameter information </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="../../d7/d6a/classAbsParameter.xhtml#a0c98ee88d1ccfbb6db5e7b02c96b2934" title="Interface to fill output string, to be implemented by parameter implementations.">make_str()</a> </dd></dl>

</div>
</div>
<hr/><h2>Friends And Related Function Documentation</h2>
<a class="anchor" id="a3b45a8d9bd0b00a09238f40ca421543a"></a><!-- doxytag: member="DoubleParameter::operator&lt;&lt;" ref="a3b45a8d9bd0b00a09238f40ca421543a" args="(std::ostream &amp;out, std::shared_ptr&lt; AbsParameter &gt; b)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::ostream&amp; operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::shared_ptr&lt; <a class="el" href="../../d7/d6a/classAbsParameter.xhtml">AbsParameter</a> &gt;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Return shared_pointer pointing to this Parameter. </p>
<p>friend function to stream parameter information to output</p>
<p>Declaring the stream-operator &lt;&lt; as friend allows to stream parameter information to the output as easily as a generic type. </p>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="../../d7/d6a/classAbsParameter.xhtml#a0c98ee88d1ccfbb6db5e7b02c96b2934" title="Interface to fill output string, to be implemented by parameter implementations.">make_str()</a>, <a class="el" href="../../d7/d6a/classAbsParameter.xhtml#a155e74bf1c96ce8321ab65c6a003f868" title="A public function returning a string with parameter information.">to_str()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a4f06c9d592310ad3b31b4fc8f13e0faf"></a><!-- doxytag: member="DoubleParameter::operator&lt;&lt;" ref="a4f06c9d592310ad3b31b4fc8f13e0faf" args="(std::ostream &amp;out, const AbsParameter &amp;b)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::ostream&amp; operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../d7/d6a/classAbsParameter.xhtml">AbsParameter</a> &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>friend function to stream parameter information to output </p>
<p>Declaring the stream-operator &lt;&lt; as friend allows to stream parameter information to the output as easily as a generic type. </p>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="../../d7/d6a/classAbsParameter.xhtml#a0c98ee88d1ccfbb6db5e7b02c96b2934" title="Interface to fill output string, to be implemented by parameter implementations.">make_str()</a>, <a class="el" href="../../d7/d6a/classAbsParameter.xhtml#a155e74bf1c96ce8321ab65c6a003f868" title="A public function returning a string with parameter information.">to_str()</a> </dd></dl>

</div>
</div>
<hr/><h2>Member Data Documentation</h2>
<a class="anchor" id="a08c6fd32e356cec94d0cc57a95cd9d9e"></a><!-- doxytag: member="DoubleParameter::bounds_" ref="a08c6fd32e356cec94d0cc57a95cd9d9e" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="../../dd/d8d/classDoubleParameter.xhtml#a08c6fd32e356cec94d0cc57a95cd9d9e">DoubleParameter::bounds_</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Are valid bounds defined for this parameter? </p>

</div>
</div>
<a class="anchor" id="a02ff8b300a991588e85d010940767d03"></a><!-- doxytag: member="DoubleParameter::err_" ref="a02ff8b300a991588e85d010940767d03" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double <a class="el" href="../../dd/d8d/classDoubleParameter.xhtml#a02ff8b300a991588e85d010940767d03">DoubleParameter::err_</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Containers of parameter information. </p>

</div>
</div>
<a class="anchor" id="a6b1d5b9ac1f8f3bb992a69f1c3e06edd"></a><!-- doxytag: member="DoubleParameter::error_" ref="a6b1d5b9ac1f8f3bb992a69f1c3e06edd" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="../../dd/d8d/classDoubleParameter.xhtml#a6b1d5b9ac1f8f3bb992a69f1c3e06edd">DoubleParameter::error_</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Is an error defined for this parameter? </p>

</div>
</div>
<a class="anchor" id="a579abb4fe62c4e9c7d3224241b4c9b67"></a><!-- doxytag: member="DoubleParameter::fixed_" ref="a579abb4fe62c4e9c7d3224241b4c9b67" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="../../dd/d8d/classDoubleParameter.xhtml#a579abb4fe62c4e9c7d3224241b4c9b67">DoubleParameter::fixed_</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Do you want to keep parameter fixed? </p>

</div>
</div>
<a class="anchor" id="ae7a91745d7a5c2865eedb77496a8944c"></a><!-- doxytag: member="DoubleParameter::max_" ref="ae7a91745d7a5c2865eedb77496a8944c" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double <a class="el" href="../../dd/d8d/classDoubleParameter.xhtml#ae7a91745d7a5c2865eedb77496a8944c">DoubleParameter::max_</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="afff186438bcde2cd4e370f8b9cc7b6d2"></a><!-- doxytag: member="DoubleParameter::min_" ref="afff186438bcde2cd4e370f8b9cc7b6d2" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double <a class="el" href="../../dd/d8d/classDoubleParameter.xhtml#afff186438bcde2cd4e370f8b9cc7b6d2">DoubleParameter::min_</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a1eaa1cd6f79b60be57c9b924eda0cad2"></a><!-- doxytag: member="DoubleParameter::name_" ref="a1eaa1cd6f79b60be57c9b924eda0cad2" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string <a class="el" href="../../d7/d6a/classAbsParameter.xhtml#a1eaa1cd6f79b60be57c9b924eda0cad2">AbsParameter::name_</a><code> [protected, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>internal name of the parameter </p>

</div>
</div>
<a class="anchor" id="abd724fca707acabfdf91b20739ce1e12"></a><!-- doxytag: member="DoubleParameter::oberservingNodes" ref="abd724fca707acabfdf91b20739ce1e12" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;std::shared_ptr&lt;<a class="el" href="../../df/d75/classParObserver.xhtml">ParObserver</a>&gt; &gt; <a class="el" href="../../d7/d6a/classAbsParameter.xhtml#abd724fca707acabfdf91b20739ce1e12">AbsParameter::oberservingNodes</a><code> [protected, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>list of observers, e.g. </p>
<p>TreeNodes </p>

</div>
</div>
<a class="anchor" id="a65c954387c0ad30e8daf73fddb4b27db"></a><!-- doxytag: member="DoubleParameter::out_" ref="a65c954387c0ad30e8daf73fddb4b27db" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string <a class="el" href="../../d7/d6a/classAbsParameter.xhtml#a65c954387c0ad30e8daf73fddb4b27db">AbsParameter::out_</a><code> [protected, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Output string to print information. </p>

</div>
</div>
<a class="anchor" id="ac9bd4b866495c7770e34cad366ebd0e2"></a><!-- doxytag: member="DoubleParameter::outVal_" ref="ac9bd4b866495c7770e34cad366ebd0e2" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string <a class="el" href="../../d7/d6a/classAbsParameter.xhtml#ac9bd4b866495c7770e34cad366ebd0e2">AbsParameter::outVal_</a><code> [protected, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Output string to print only value. </p>

</div>
</div>
<a class="anchor" id="a05225b008e34a284d5ffd65d0e479027"></a><!-- doxytag: member="DoubleParameter::type_" ref="a05225b008e34a284d5ffd65d0e479027" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d8/def/AbsParameter_8hpp.xhtml#a5c1a62d78971166ef74c26cf99527f8a">ParType</a> <a class="el" href="../../d7/d6a/classAbsParameter.xhtml#a05225b008e34a284d5ffd65d0e479027">AbsParameter::type_</a><code> [protected, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>ParType enum for type of parameter. </p>

</div>
</div>
<a class="anchor" id="af07ddf0264eb60d46dfef6536850e748"></a><!-- doxytag: member="DoubleParameter::usebounds_" ref="af07ddf0264eb60d46dfef6536850e748" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="../../dd/d8d/classDoubleParameter.xhtml#af07ddf0264eb60d46dfef6536850e748">DoubleParameter::usebounds_</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Do you want to restrict your parameter? </p>

</div>
</div>
<a class="anchor" id="aa20191bc91e3c739c530d2046c13f59a"></a><!-- doxytag: member="DoubleParameter::val_" ref="aa20191bc91e3c739c530d2046c13f59a" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double <a class="el" href="../../dd/d8d/classDoubleParameter.xhtml#aa20191bc91e3c739c530d2046c13f59a">DoubleParameter::val_</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>Core/<a class="el" href="../../db/dce/Parameter_8hpp_source.xhtml">Parameter.hpp</a></li>
</ul>
</div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<hr class="footer"/><address class="footer"><small>Generated on Thu Oct 24 2013 for ComPWA by&#160;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.7.4 </small></address>
</body>
</html>
