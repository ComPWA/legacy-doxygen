<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>ComPWA: Core/ParameterList.hpp Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body onload='searchBox.OnSelectItem(0);'>
<!-- Generated by Doxygen 1.7.4 -->
<script type="text/javascript"><!--
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
--></script>
<div id="top">
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">ComPWA</div>
   <div id="projectbrief">Common Partial-Wave-Analysis Framework</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="../../index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="../../namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="../../annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="../../files.xhtml"><span>Files</span></a></li>
      <li id="searchli">
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="../../search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="../../search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="../../files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="../../globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<div class="header">
  <div class="headertitle">
<div class="title">Core/ParameterList.hpp</div>  </div>
</div>
<div class="contents">
<a href="../../df/d9f/ParameterList_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">//-------------------------------------------------------------------------------</span>
<a name="l00002"></a>00002 <span class="comment">// Copyright (c) 2013 Mathias Michel.</span>
<a name="l00003"></a>00003 <span class="comment">//</span>
<a name="l00004"></a>00004 <span class="comment">// This file is part of ComPWA, check license.txt for details</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">// All rights reserved. This program and the accompanying materials</span>
<a name="l00007"></a>00007 <span class="comment">// are made available under the terms of the GNU Public License v3.0</span>
<a name="l00008"></a>00008 <span class="comment">// which accompanies this distribution, and is available at</span>
<a name="l00009"></a>00009 <span class="comment">// http://www.gnu.org/licenses/gpl.html</span>
<a name="l00010"></a>00010 <span class="comment">//</span>
<a name="l00011"></a>00011 <span class="comment">// Contributors:</span>
<a name="l00012"></a>00012 <span class="comment">//     Mathias Michel - initial API and implementation</span>
<a name="l00013"></a>00013 <span class="comment">//-------------------------------------------------------------------------------</span>
<a name="l00015"></a>00015 <span class="comment"></span>
<a name="l00021"></a>00021 <span class="preprocessor">#ifndef _PARAMETERLIST_HPP_</span>
<a name="l00022"></a>00022 <span class="preprocessor"></span><span class="preprocessor">#define _PARAMETERLIST_HPP_</span>
<a name="l00023"></a>00023 <span class="preprocessor"></span>
<a name="l00024"></a>00024 <span class="preprocessor">#include &lt;iostream&gt;</span>
<a name="l00025"></a>00025 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &lt;memory&gt;</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &lt;sstream&gt;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;map&gt;</span>
<a name="l00030"></a>00030 
<a name="l00031"></a>00031 <span class="preprocessor">#include &quot;<a class="code" href="../../d8/def/AbsParameter_8hpp.xhtml" title="This class defines the internal container of a parameter.">Core/AbsParameter.hpp</a>&quot;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &quot;<a class="code" href="../../db/dce/Parameter_8hpp.xhtml" title="This class implements some internal container of parameters.">Core/Parameter.hpp</a>&quot;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &quot;<a class="code" href="../../d2/de9/Exceptions_8hpp.xhtml" title="This class defines the ComPWA exception base-class and provides a set of standard exceptions...">Core/Exceptions.hpp</a>&quot;</span>
<a name="l00034"></a>00034 
<a name="l00035"></a><a class="code" href="../../d1/d9d/classParameterList.xhtml">00035</a> <span class="keyword">class </span><a class="code" href="../../d1/d9d/classParameterList.xhtml" title="Internal container representing a parameter list.">ParameterList</a>
<a name="l00036"></a>00036 {
<a name="l00037"></a>00037 
<a name="l00038"></a>00038 <span class="keyword">public</span>:
<a name="l00039"></a>00039 
<a name="l00041"></a>00041 
<a name="l00044"></a>00044   <a class="code" href="../../d1/d9d/classParameterList.xhtml#a81cb788ca476171256c82f0416b584c6" title="Standard constructor with empty parameter vector.">ParameterList</a>();
<a name="l00045"></a>00045 
<a name="l00047"></a>00047 
<a name="l00055"></a>00055   <a class="code" href="../../d1/d9d/classParameterList.xhtml#a81cb788ca476171256c82f0416b584c6" title="Standard constructor with empty parameter vector.">ParameterList</a>(<span class="keyword">const</span> std::vector&lt;std::shared_ptr&lt;DoubleParameter&gt; &gt;&amp; inVec);
<a name="l00056"></a>00056 
<a name="l00058"></a>00058 
<a name="l00066"></a>00066   <a class="code" href="../../d1/d9d/classParameterList.xhtml#a81cb788ca476171256c82f0416b584c6" title="Standard constructor with empty parameter vector.">ParameterList</a>(<span class="keyword">const</span> std::vector&lt;std::shared_ptr&lt;IntegerParameter&gt; &gt;&amp; inVec);
<a name="l00067"></a>00067 
<a name="l00069"></a>00069 
<a name="l00077"></a>00077   <a class="code" href="../../d1/d9d/classParameterList.xhtml#a81cb788ca476171256c82f0416b584c6" title="Standard constructor with empty parameter vector.">ParameterList</a>(<span class="keyword">const</span> std::vector&lt;std::shared_ptr&lt;BoolParameter&gt; &gt;&amp; inVec);
<a name="l00078"></a>00078 
<a name="l00080"></a>00080 
<a name="l00089"></a>00089   <a class="code" href="../../d1/d9d/classParameterList.xhtml#a81cb788ca476171256c82f0416b584c6" title="Standard constructor with empty parameter vector.">ParameterList</a>(<span class="keyword">const</span> std::vector&lt;std::shared_ptr&lt;DoubleParameter&gt; &gt;&amp; inD,
<a name="l00090"></a>00090       <span class="keyword">const</span> std::vector&lt;std::shared_ptr&lt;IntegerParameter&gt; &gt;&amp; inI,
<a name="l00091"></a>00091       <span class="keyword">const</span> std::vector&lt;std::shared_ptr&lt;BoolParameter&gt; &gt;&amp; inB);
<a name="l00092"></a>00092 
<a name="l00094"></a>00094 
<a name="l00100"></a>00100   <a class="code" href="../../d1/d9d/classParameterList.xhtml#a81cb788ca476171256c82f0416b584c6" title="Standard constructor with empty parameter vector.">ParameterList</a>(<span class="keyword">const</span> <a class="code" href="../../d1/d9d/classParameterList.xhtml" title="Internal container representing a parameter list.">ParameterList</a>&amp; in);
<a name="l00101"></a>00101 
<a name="l00103"></a>00103 
<a name="l00106"></a>00106   <span class="keyword">virtual</span> <a class="code" href="../../d1/d9d/classParameterList.xhtml#ad3184442bd4735ef5afbb8f7cd7b8726" title="Empty Destructor.">~ParameterList</a>();
<a name="l00107"></a>00107 
<a name="l00109"></a>00109 
<a name="l00114"></a>00114   <span class="keyword">virtual</span> std::shared_ptr&lt;AbsParameter&gt; <a class="code" href="../../d1/d9d/classParameterList.xhtml#a132062ac381312aba2b5d96708b0686b" title="Getter for abstract parameter.">GetParameter</a>(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i) ;
<a name="l00115"></a>00115 
<a name="l00117"></a>00117 
<a name="l00122"></a>00122   <span class="keyword">virtual</span> std::shared_ptr&lt;AbsParameter&gt; <a class="code" href="../../d1/d9d/classParameterList.xhtml#a132062ac381312aba2b5d96708b0686b" title="Getter for abstract parameter.">GetParameter</a>(<span class="keyword">const</span> std::string parname) ;
<a name="l00123"></a>00123 
<a name="l00124"></a>00124 
<a name="l00126"></a><a class="code" href="../../d1/d9d/classParameterList.xhtml#a3f27ba4154586dfb2d4c4c30d576219c">00126</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="../../d1/d9d/classParameterList.xhtml#a3f27ba4154586dfb2d4c4c30d576219c" title="Getter for number of parameter.">GetNParameter</a>()<span class="keyword"> const </span>{<span class="keywordflow">return</span> (<a class="code" href="../../d1/d9d/classParameterList.xhtml#ad6c4e63c2c71893dd9c732cb738be79d" title="Vector of floating point parameters.">vDoublePar_</a>.size()+<a class="code" href="../../d1/d9d/classParameterList.xhtml#a8773149b60a7f4fccd21183f59ea3f9f" title="Vector of integer parameters.">vIntPar_</a>.size()+<a class="code" href="../../d1/d9d/classParameterList.xhtml#a34c649412e92056ae41ac5c3e3e111e9" title="Vector of boolean parameters.">vBoolPar_</a>.size());}
<a name="l00128"></a><a class="code" href="../../d1/d9d/classParameterList.xhtml#aa626799b903b16e7f6f29f918c626f9e">00128</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="../../d1/d9d/classParameterList.xhtml#aa626799b903b16e7f6f29f918c626f9e" title="Getter for number of double parameter.">GetNDouble</a>()<span class="keyword"> const </span>{<span class="keywordflow">return</span> <a class="code" href="../../d1/d9d/classParameterList.xhtml#ad6c4e63c2c71893dd9c732cb738be79d" title="Vector of floating point parameters.">vDoublePar_</a>.size();}
<a name="l00130"></a><a class="code" href="../../d1/d9d/classParameterList.xhtml#a8f9f2b28594a1055ea5f8e920ebcbff7">00130</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="../../d1/d9d/classParameterList.xhtml#a8f9f2b28594a1055ea5f8e920ebcbff7" title="Getter for number of integer parameter.">GetNInteger</a>()<span class="keyword"> const </span>{<span class="keywordflow">return</span> <a class="code" href="../../d1/d9d/classParameterList.xhtml#a8773149b60a7f4fccd21183f59ea3f9f" title="Vector of integer parameters.">vIntPar_</a>.size();}
<a name="l00132"></a><a class="code" href="../../d1/d9d/classParameterList.xhtml#a5c21a1598d5c0bf2f864f4bb10484313">00132</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="../../d1/d9d/classParameterList.xhtml#a5c21a1598d5c0bf2f864f4bb10484313" title="Getter for number of boolean parameter.">GetNBool</a>()<span class="keyword"> const </span>{<span class="keywordflow">return</span> <a class="code" href="../../d1/d9d/classParameterList.xhtml#a34c649412e92056ae41ac5c3e3e111e9" title="Vector of boolean parameters.">vBoolPar_</a>.size();}
<a name="l00133"></a>00133 
<a name="l00135"></a>00135 
<a name="l00140"></a>00140   <span class="keyword">virtual</span> std::shared_ptr&lt;DoubleParameter&gt; <a class="code" href="../../d1/d9d/classParameterList.xhtml#a60d49f17af8b63f4f153f9d420c3bcbb" title="Getter for floating point parameter.">GetDoubleParameter</a>(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i) ;
<a name="l00141"></a>00141 
<a name="l00143"></a>00143 
<a name="l00148"></a>00148   <span class="keyword">virtual</span> std::shared_ptr&lt;IntegerParameter&gt; <a class="code" href="../../d1/d9d/classParameterList.xhtml#a387e0fab0472050570f79035968f6f2b" title="Getter for integer parameter.">GetIntegerParameter</a>(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i) ;
<a name="l00149"></a>00149 
<a name="l00151"></a>00151 
<a name="l00156"></a>00156   <span class="keyword">virtual</span> std::shared_ptr&lt;BoolParameter&gt; <a class="code" href="../../d1/d9d/classParameterList.xhtml#af09490e1ac8a4bbddd4452ac1c60f658" title="Getter for boolean parameter.">GetBoolParameter</a>(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i) ;
<a name="l00157"></a>00157 
<a name="l00159"></a>00159 
<a name="l00164"></a>00164   <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">double</span> <a class="code" href="../../d1/d9d/classParameterList.xhtml#a99c664620aa97bc31d1defcf7ab4c927" title="Getter for parameter value.">GetParameterValue</a>(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i) <span class="keyword">const</span> ;
<a name="l00165"></a>00165 
<a name="l00167"></a>00167 
<a name="l00172"></a>00172   <span class="keyword">virtual</span> std::shared_ptr&lt;DoubleParameter&gt; <a class="code" href="../../d1/d9d/classParameterList.xhtml#a60d49f17af8b63f4f153f9d420c3bcbb" title="Getter for floating point parameter.">GetDoubleParameter</a>(<span class="keyword">const</span> std::string parname) ;
<a name="l00173"></a>00173 
<a name="l00175"></a>00175 
<a name="l00180"></a>00180   <span class="keyword">virtual</span> std::shared_ptr&lt;IntegerParameter&gt; <a class="code" href="../../d1/d9d/classParameterList.xhtml#a387e0fab0472050570f79035968f6f2b" title="Getter for integer parameter.">GetIntegerParameter</a>(<span class="keyword">const</span> std::string parname) ;
<a name="l00181"></a>00181 
<a name="l00183"></a>00183 
<a name="l00188"></a>00188   <span class="keyword">virtual</span> std::shared_ptr&lt;BoolParameter&gt; <a class="code" href="../../d1/d9d/classParameterList.xhtml#af09490e1ac8a4bbddd4452ac1c60f658" title="Getter for boolean parameter.">GetBoolParameter</a>(<span class="keyword">const</span> std::string parname) ;
<a name="l00189"></a>00189 
<a name="l00191"></a>00191 
<a name="l00196"></a>00196   <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">double</span> <a class="code" href="../../d1/d9d/classParameterList.xhtml#a99c664620aa97bc31d1defcf7ab4c927" title="Getter for parameter value.">GetParameterValue</a>(<span class="keyword">const</span> std::string parname) <span class="keyword">const</span> ;
<a name="l00197"></a>00197 
<a name="l00199"></a>00199 
<a name="l00204"></a>00204   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../d1/d9d/classParameterList.xhtml#ad88a26efd71e1d3d65924500b72ffd61" title="Setter for parameter value.">SetParameterValue</a>(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i, <span class="keyword">const</span> <span class="keywordtype">double</span> inVal) ;
<a name="l00205"></a>00205 
<a name="l00207"></a>00207 
<a name="l00212"></a>00212   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../d1/d9d/classParameterList.xhtml#ad88a26efd71e1d3d65924500b72ffd61" title="Setter for parameter value.">SetParameterValue</a>(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i, <span class="keyword">const</span> <span class="keywordtype">int</span> inVal) ;
<a name="l00213"></a>00213 
<a name="l00215"></a>00215 
<a name="l00220"></a>00220   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../d1/d9d/classParameterList.xhtml#ad88a26efd71e1d3d65924500b72ffd61" title="Setter for parameter value.">SetParameterValue</a>(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i, <span class="keyword">const</span> <span class="keywordtype">bool</span> inVal) ;
<a name="l00221"></a>00221 
<a name="l00223"></a>00223 
<a name="l00227"></a>00227   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../d1/d9d/classParameterList.xhtml#a3574caceee6e2701f25327d35f7bce40" title="Add parameter via abstract pointer.">AddParameter</a>(std::shared_ptr&lt;AbsParameter&gt; par);
<a name="l00228"></a>00228 
<a name="l00230"></a>00230 
<a name="l00234"></a>00234   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../d1/d9d/classParameterList.xhtml#a3574caceee6e2701f25327d35f7bce40" title="Add parameter via abstract pointer.">AddParameter</a>(std::shared_ptr&lt;DoubleParameter&gt; par);
<a name="l00235"></a>00235 
<a name="l00237"></a>00237 
<a name="l00241"></a>00241   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../d1/d9d/classParameterList.xhtml#a3574caceee6e2701f25327d35f7bce40" title="Add parameter via abstract pointer.">AddParameter</a>(std::shared_ptr&lt;IntegerParameter&gt; par);
<a name="l00242"></a>00242 
<a name="l00244"></a>00244 
<a name="l00248"></a>00248   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../d1/d9d/classParameterList.xhtml#a3574caceee6e2701f25327d35f7bce40" title="Add parameter via abstract pointer.">AddParameter</a>(std::shared_ptr&lt;BoolParameter&gt; par);
<a name="l00249"></a>00249 
<a name="l00251"></a>00251 
<a name="l00255"></a>00255   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../d1/d9d/classParameterList.xhtml#ac38ce5a2a0110de70fb2b264b8e7f6d2" title="Remove floating point parameter.">RemoveDouble</a>(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <span class="keywordtype">id</span>);
<a name="l00256"></a>00256 
<a name="l00258"></a>00258 
<a name="l00262"></a>00262   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../d1/d9d/classParameterList.xhtml#a5b904789262ece31024a488468cfa9e9" title="Remove integer parameter.">RemoveInteger</a>(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <span class="keywordtype">id</span>);
<a name="l00263"></a>00263 
<a name="l00265"></a>00265 
<a name="l00269"></a>00269   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../d1/d9d/classParameterList.xhtml#ae19571aa39e0d2ab7332e287a5154bf1" title="Remove boolean parameter.">RemoveBool</a>(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <span class="keywordtype">id</span>);
<a name="l00270"></a>00270 
<a name="l00272"></a>00272 
<a name="l00276"></a>00276   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../d1/d9d/classParameterList.xhtml#ac38ce5a2a0110de70fb2b264b8e7f6d2" title="Remove floating point parameter.">RemoveDouble</a>(<span class="keyword">const</span> std::string parName);
<a name="l00277"></a>00277 
<a name="l00279"></a>00279 
<a name="l00283"></a>00283   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../d1/d9d/classParameterList.xhtml#a5b904789262ece31024a488468cfa9e9" title="Remove integer parameter.">RemoveInteger</a>(<span class="keyword">const</span> std::string parName);
<a name="l00284"></a>00284 
<a name="l00286"></a>00286 
<a name="l00290"></a>00290   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../d1/d9d/classParameterList.xhtml#ae19571aa39e0d2ab7332e287a5154bf1" title="Remove boolean parameter.">RemoveBool</a>(<span class="keyword">const</span> std::string parName);
<a name="l00291"></a>00291 
<a name="l00293"></a>00293 
<a name="l00300"></a>00300   std::string <span class="keyword">const</span>&amp; <a class="code" href="../../d1/d9d/classParameterList.xhtml#a8cbd202a3a670ce91d1bdf6e548c957b" title="A public function returning a string with parameter information.">to_str</a>() ;
<a name="l00301"></a>00301 
<a name="l00302"></a>00302 <span class="keyword">protected</span>:
<a name="l00303"></a><a class="code" href="../../d1/d9d/classParameterList.xhtml#a96fbf1366e4ff34557a8ea073698b22a">00303</a>   std::map&lt;std::string,unsigned int&gt; <a class="code" href="../../d1/d9d/classParameterList.xhtml#a96fbf1366e4ff34557a8ea073698b22a" title="Map of floating point parameter ids.">mDoubleParID_</a>; 
<a name="l00304"></a><a class="code" href="../../d1/d9d/classParameterList.xhtml#a3165537f04f2be5549fe4d2271e4cf4b">00304</a>   std::map&lt;std::string,unsigned int&gt; <a class="code" href="../../d1/d9d/classParameterList.xhtml#a3165537f04f2be5549fe4d2271e4cf4b" title="Map of integer parameter ids.">mIntParID_</a>; 
<a name="l00305"></a><a class="code" href="../../d1/d9d/classParameterList.xhtml#a7aa6a9ff80e28bf0f62567765243e22a">00305</a>   std::map&lt;std::string,unsigned int&gt; <a class="code" href="../../d1/d9d/classParameterList.xhtml#a7aa6a9ff80e28bf0f62567765243e22a" title="Map of boolean parameter ids.">mBoolParID_</a>; 
<a name="l00306"></a><a class="code" href="../../d1/d9d/classParameterList.xhtml#ad6c4e63c2c71893dd9c732cb738be79d">00306</a>   std::vector&lt;std::shared_ptr&lt;DoubleParameter&gt; &gt; <a class="code" href="../../d1/d9d/classParameterList.xhtml#ad6c4e63c2c71893dd9c732cb738be79d" title="Vector of floating point parameters.">vDoublePar_</a>; 
<a name="l00307"></a><a class="code" href="../../d1/d9d/classParameterList.xhtml#a8773149b60a7f4fccd21183f59ea3f9f">00307</a>   std::vector&lt;std::shared_ptr&lt;IntegerParameter&gt; &gt; <a class="code" href="../../d1/d9d/classParameterList.xhtml#a8773149b60a7f4fccd21183f59ea3f9f" title="Vector of integer parameters.">vIntPar_</a>; 
<a name="l00308"></a><a class="code" href="../../d1/d9d/classParameterList.xhtml#a34c649412e92056ae41ac5c3e3e111e9">00308</a>   std::vector&lt;std::shared_ptr&lt;BoolParameter&gt; &gt; <a class="code" href="../../d1/d9d/classParameterList.xhtml#a34c649412e92056ae41ac5c3e3e111e9" title="Vector of boolean parameters.">vBoolPar_</a>; 
<a name="l00309"></a><a class="code" href="../../d1/d9d/classParameterList.xhtml#a8091ca235596882df0e06a3fcd5345c6">00309</a>   std::string <a class="code" href="../../d1/d9d/classParameterList.xhtml#a8091ca235596882df0e06a3fcd5345c6" title="Output string to print information.">out_</a>; 
<a name="l00311"></a>00311 
<a name="l00312"></a>00312 
<a name="l00317"></a>00317   <span class="keywordtype">void</span> <a class="code" href="../../d1/d9d/classParameterList.xhtml#ac93259ed7c23cfcc73e906664ba2159a" title="A protected function which creates an output string for printing.">make_str</a>();
<a name="l00318"></a>00318 
<a name="l00320"></a>00320 
<a name="l00326"></a>00326   <span class="keyword">friend</span> std::ostream &amp; <a class="code" href="../../d1/d9d/classParameterList.xhtml#ada2f035a1d035e7e93ca7f78cbd96f9a" title="friend function to stream parameter information to output">operator&lt;&lt;</a>(std::ostream &amp;os, <a class="code" href="../../d1/d9d/classParameterList.xhtml" title="Internal container representing a parameter list.">ParameterList</a> &amp;p);
<a name="l00327"></a>00327 
<a name="l00328"></a>00328 };
<a name="l00329"></a>00329 
<a name="l00330"></a>00330 
<a name="l00331"></a>00331 <span class="preprocessor">#endif</span>
</pre></div></div>
</div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<hr class="footer"/><address class="footer"><small>Generated on Thu Oct 24 2013 for ComPWA by&#160;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.7.4 </small></address>
</body>
</html>
